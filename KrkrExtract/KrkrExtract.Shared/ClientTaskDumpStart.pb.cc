// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientTaskDumpStart.proto

#include "ClientTaskDumpStart.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class ClientTaskDumpStartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientTaskDumpStart> _instance;
} _ClientTaskDumpStart_default_instance_;
static void InitDefaultsscc_info_ClientTaskDumpStart_ClientTaskDumpStart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientTaskDumpStart_default_instance_;
    new (ptr) ::ClientTaskDumpStart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientTaskDumpStart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientTaskDumpStart_ClientTaskDumpStart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientTaskDumpStart_ClientTaskDumpStart_2eproto}, {}};


// ===================================================================

void ClientTaskDumpStart::InitAsDefaultInstance() {
}
class ClientTaskDumpStart::_Internal {
 public:
};

ClientTaskDumpStart::ClientTaskDumpStart()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientTaskDumpStart)
}
ClientTaskDumpStart::ClientTaskDumpStart(const ClientTaskDumpStart& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file().empty()) {
    file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  ::memcpy(&sequenceid_, &from.sequenceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pdbmode_) -
    reinterpret_cast<char*>(&sequenceid_)) + sizeof(pdbmode_));
  // @@protoc_insertion_point(copy_constructor:ClientTaskDumpStart)
}

void ClientTaskDumpStart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientTaskDumpStart_ClientTaskDumpStart_2eproto.base);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequenceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdbmode_) -
      reinterpret_cast<char*>(&sequenceid_)) + sizeof(pdbmode_));
}

ClientTaskDumpStart::~ClientTaskDumpStart() {
  // @@protoc_insertion_point(destructor:ClientTaskDumpStart)
  SharedDtor();
}

void ClientTaskDumpStart::SharedDtor() {
  file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientTaskDumpStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientTaskDumpStart& ClientTaskDumpStart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientTaskDumpStart_ClientTaskDumpStart_2eproto.base);
  return *internal_default_instance();
}


void ClientTaskDumpStart::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientTaskDumpStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequenceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdbmode_) -
      reinterpret_cast<char*>(&sequenceid_)) + sizeof(pdbmode_));
  _internal_metadata_.Clear();
}

const char* ClientTaskDumpStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 SequenceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequenceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 PsbMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          psbmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TextMode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          textmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 PngMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pngmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Tjs2Mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tjs2mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TlgMode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tlgmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AmvMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          amvmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 PdbMode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pdbmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string File = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientTaskDumpStart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientTaskDumpStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 SequenceId = 1;
  if (this->sequenceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sequenceid(), target);
  }

  // uint64 PsbMode = 2;
  if (this->psbmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_psbmode(), target);
  }

  // uint64 TextMode = 3;
  if (this->textmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_textmode(), target);
  }

  // uint64 PngMode = 4;
  if (this->pngmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pngmode(), target);
  }

  // uint64 Tjs2Mode = 5;
  if (this->tjs2mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_tjs2mode(), target);
  }

  // uint64 TlgMode = 6;
  if (this->tlgmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_tlgmode(), target);
  }

  // uint64 AmvMode = 7;
  if (this->amvmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_amvmode(), target);
  }

  // uint64 PdbMode = 8;
  if (this->pdbmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_pdbmode(), target);
  }

  // string File = 9;
  if (this->file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ClientTaskDumpStart.File");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientTaskDumpStart)
  return target;
}

size_t ClientTaskDumpStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientTaskDumpStart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string File = 9;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file());
  }

  // uint64 SequenceId = 1;
  if (this->sequenceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequenceid());
  }

  // uint64 PsbMode = 2;
  if (this->psbmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_psbmode());
  }

  // uint64 TextMode = 3;
  if (this->textmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_textmode());
  }

  // uint64 PngMode = 4;
  if (this->pngmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pngmode());
  }

  // uint64 Tjs2Mode = 5;
  if (this->tjs2mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tjs2mode());
  }

  // uint64 TlgMode = 6;
  if (this->tlgmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tlgmode());
  }

  // uint64 AmvMode = 7;
  if (this->amvmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amvmode());
  }

  // uint64 PdbMode = 8;
  if (this->pdbmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pdbmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientTaskDumpStart::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientTaskDumpStart*>(
      &from));
}

void ClientTaskDumpStart::MergeFrom(const ClientTaskDumpStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientTaskDumpStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.sequenceid() != 0) {
    _internal_set_sequenceid(from._internal_sequenceid());
  }
  if (from.psbmode() != 0) {
    _internal_set_psbmode(from._internal_psbmode());
  }
  if (from.textmode() != 0) {
    _internal_set_textmode(from._internal_textmode());
  }
  if (from.pngmode() != 0) {
    _internal_set_pngmode(from._internal_pngmode());
  }
  if (from.tjs2mode() != 0) {
    _internal_set_tjs2mode(from._internal_tjs2mode());
  }
  if (from.tlgmode() != 0) {
    _internal_set_tlgmode(from._internal_tlgmode());
  }
  if (from.amvmode() != 0) {
    _internal_set_amvmode(from._internal_amvmode());
  }
  if (from.pdbmode() != 0) {
    _internal_set_pdbmode(from._internal_pdbmode());
  }
}

void ClientTaskDumpStart::CopyFrom(const ClientTaskDumpStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientTaskDumpStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientTaskDumpStart::IsInitialized() const {
  return true;
}

void ClientTaskDumpStart::InternalSwap(ClientTaskDumpStart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_.Swap(&other->file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sequenceid_, other->sequenceid_);
  swap(psbmode_, other->psbmode_);
  swap(textmode_, other->textmode_);
  swap(pngmode_, other->pngmode_);
  swap(tjs2mode_, other->tjs2mode_);
  swap(tlgmode_, other->tlgmode_);
  swap(amvmode_, other->amvmode_);
  swap(pdbmode_, other->pdbmode_);
}

std::string ClientTaskDumpStart::GetTypeName() const {
  return "ClientTaskDumpStart";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClientTaskDumpStart* Arena::CreateMaybeMessage< ::ClientTaskDumpStart >(Arena* arena) {
  return Arena::CreateInternal< ::ClientTaskDumpStart >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
