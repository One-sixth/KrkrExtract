// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace krserver {
constexpr ServerCommandResultOutputRequest::ServerCommandResultOutputRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reply_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(PROTOBUF_ULONGLONG(0)){}
struct ServerCommandResultOutputRequestDefaultTypeInternal {
  constexpr ServerCommandResultOutputRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerCommandResultOutputRequestDefaultTypeInternal() {}
  union {
    ServerCommandResultOutputRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerCommandResultOutputRequestDefaultTypeInternal _ServerCommandResultOutputRequest_default_instance_;
constexpr ServerCommandResultOutputResponse::ServerCommandResultOutputResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ServerCommandResultOutputResponseDefaultTypeInternal {
  constexpr ServerCommandResultOutputResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerCommandResultOutputResponseDefaultTypeInternal() {}
  union {
    ServerCommandResultOutputResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerCommandResultOutputResponseDefaultTypeInternal _ServerCommandResultOutputResponse_default_instance_;
constexpr ServerExitFromRemoteProcessRequest::ServerExitFromRemoteProcessRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ServerExitFromRemoteProcessRequestDefaultTypeInternal {
  constexpr ServerExitFromRemoteProcessRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerExitFromRemoteProcessRequestDefaultTypeInternal() {}
  union {
    ServerExitFromRemoteProcessRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerExitFromRemoteProcessRequestDefaultTypeInternal _ServerExitFromRemoteProcessRequest_default_instance_;
constexpr ServerExitFromRemoteProcessResponse::ServerExitFromRemoteProcessResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ServerExitFromRemoteProcessResponseDefaultTypeInternal {
  constexpr ServerExitFromRemoteProcessResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerExitFromRemoteProcessResponseDefaultTypeInternal() {}
  union {
    ServerExitFromRemoteProcessResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerExitFromRemoteProcessResponseDefaultTypeInternal _ServerExitFromRemoteProcessResponse_default_instance_;
constexpr ServerLogOutputRequest::ServerLogOutputRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , level_(PROTOBUF_ULONGLONG(0)){}
struct ServerLogOutputRequestDefaultTypeInternal {
  constexpr ServerLogOutputRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerLogOutputRequestDefaultTypeInternal() {}
  union {
    ServerLogOutputRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerLogOutputRequestDefaultTypeInternal _ServerLogOutputRequest_default_instance_;
constexpr ServerLogOutputResponse::ServerLogOutputResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ServerLogOutputResponseDefaultTypeInternal {
  constexpr ServerLogOutputResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerLogOutputResponseDefaultTypeInternal() {}
  union {
    ServerLogOutputResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerLogOutputResponseDefaultTypeInternal _ServerLogOutputResponse_default_instance_;
constexpr ServerMessageBoxRequest::ServerMessageBoxRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flags_(0u)
  , locked_(false){}
struct ServerMessageBoxRequestDefaultTypeInternal {
  constexpr ServerMessageBoxRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerMessageBoxRequestDefaultTypeInternal() {}
  union {
    ServerMessageBoxRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerMessageBoxRequestDefaultTypeInternal _ServerMessageBoxRequest_default_instance_;
constexpr ServerMessageBoxResponse::ServerMessageBoxResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ServerMessageBoxResponseDefaultTypeInternal {
  constexpr ServerMessageBoxResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerMessageBoxResponseDefaultTypeInternal() {}
  union {
    ServerMessageBoxResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerMessageBoxResponseDefaultTypeInternal _ServerMessageBoxResponse_default_instance_;
constexpr ServerProgressBarRequest::ServerProgressBarRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : taskname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , current_(PROTOBUF_ULONGLONG(0))
  , total_(PROTOBUF_ULONGLONG(0)){}
struct ServerProgressBarRequestDefaultTypeInternal {
  constexpr ServerProgressBarRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerProgressBarRequestDefaultTypeInternal() {}
  union {
    ServerProgressBarRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerProgressBarRequestDefaultTypeInternal _ServerProgressBarRequest_default_instance_;
constexpr ServerProgressBarResponse::ServerProgressBarResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ServerProgressBarResponseDefaultTypeInternal {
  constexpr ServerProgressBarResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerProgressBarResponseDefaultTypeInternal() {}
  union {
    ServerProgressBarResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerProgressBarResponseDefaultTypeInternal _ServerProgressBarResponse_default_instance_;
constexpr ServerTaskEndAndEnableUIRequest::ServerTaskEndAndEnableUIRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , taskcompletestatus_(false){}
struct ServerTaskEndAndEnableUIRequestDefaultTypeInternal {
  constexpr ServerTaskEndAndEnableUIRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerTaskEndAndEnableUIRequestDefaultTypeInternal() {}
  union {
    ServerTaskEndAndEnableUIRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerTaskEndAndEnableUIRequestDefaultTypeInternal _ServerTaskEndAndEnableUIRequest_default_instance_;
constexpr ServerTaskEndAndEnableUIResponse::ServerTaskEndAndEnableUIResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ServerTaskEndAndEnableUIResponseDefaultTypeInternal {
  constexpr ServerTaskEndAndEnableUIResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerTaskEndAndEnableUIResponseDefaultTypeInternal() {}
  union {
    ServerTaskEndAndEnableUIResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerTaskEndAndEnableUIResponseDefaultTypeInternal _ServerTaskEndAndEnableUIResponse_default_instance_;
constexpr ServerTaskStartAndDisableUIRequest::ServerTaskStartAndDisableUIRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ServerTaskStartAndDisableUIRequestDefaultTypeInternal {
  constexpr ServerTaskStartAndDisableUIRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerTaskStartAndDisableUIRequestDefaultTypeInternal() {}
  union {
    ServerTaskStartAndDisableUIRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerTaskStartAndDisableUIRequestDefaultTypeInternal _ServerTaskStartAndDisableUIRequest_default_instance_;
constexpr ServerTaskStartAndDisableUIResponse::ServerTaskStartAndDisableUIResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct ServerTaskStartAndDisableUIResponseDefaultTypeInternal {
  constexpr ServerTaskStartAndDisableUIResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerTaskStartAndDisableUIResponseDefaultTypeInternal() {}
  union {
    ServerTaskStartAndDisableUIResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerTaskStartAndDisableUIResponseDefaultTypeInternal _ServerTaskStartAndDisableUIResponse_default_instance_;
constexpr ServerUIHeartbeatPackageRequest::ServerUIHeartbeatPackageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ServerUIHeartbeatPackageRequestDefaultTypeInternal {
  constexpr ServerUIHeartbeatPackageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerUIHeartbeatPackageRequestDefaultTypeInternal() {}
  union {
    ServerUIHeartbeatPackageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerUIHeartbeatPackageRequestDefaultTypeInternal _ServerUIHeartbeatPackageRequest_default_instance_;
constexpr ServerUIHeartbeatPackageResponse::ServerUIHeartbeatPackageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ServerUIHeartbeatPackageResponseDefaultTypeInternal {
  constexpr ServerUIHeartbeatPackageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerUIHeartbeatPackageResponseDefaultTypeInternal() {}
  union {
    ServerUIHeartbeatPackageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerUIHeartbeatPackageResponseDefaultTypeInternal _ServerUIHeartbeatPackageResponse_default_instance_;
constexpr ServerUIReadyRequest::ServerUIReadyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sessionkey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clientport_(0u)
  , extra_(0u){}
struct ServerUIReadyRequestDefaultTypeInternal {
  constexpr ServerUIReadyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerUIReadyRequestDefaultTypeInternal() {}
  union {
    ServerUIReadyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerUIReadyRequestDefaultTypeInternal _ServerUIReadyRequest_default_instance_;
constexpr ServerUIReadyResponse::ServerUIReadyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false)
  , heartbeatinterval_(0u){}
struct ServerUIReadyResponseDefaultTypeInternal {
  constexpr ServerUIReadyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerUIReadyResponseDefaultTypeInternal() {}
  union {
    ServerUIReadyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerUIReadyResponseDefaultTypeInternal _ServerUIReadyResponse_default_instance_;
}  // namespace krserver
namespace krserver {

// ===================================================================

class ServerCommandResultOutputRequest::_Internal {
 public:
};

ServerCommandResultOutputRequest::ServerCommandResultOutputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerCommandResultOutputRequest)
}
ServerCommandResultOutputRequest::ServerCommandResultOutputRequest(const ServerCommandResultOutputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reply().empty()) {
    reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reply(), 
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:krserver.ServerCommandResultOutputRequest)
}

void ServerCommandResultOutputRequest::SharedCtor() {
reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_ = PROTOBUF_ULONGLONG(0);
}

ServerCommandResultOutputRequest::~ServerCommandResultOutputRequest() {
  // @@protoc_insertion_point(destructor:krserver.ServerCommandResultOutputRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerCommandResultOutputRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerCommandResultOutputRequest::ArenaDtor(void* object) {
  ServerCommandResultOutputRequest* _this = reinterpret_cast< ServerCommandResultOutputRequest* >(object);
  (void)_this;
}
void ServerCommandResultOutputRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerCommandResultOutputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerCommandResultOutputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerCommandResultOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reply_.ClearToEmpty();
  status_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* ServerCommandResultOutputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 Status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Reply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_reply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerCommandResultOutputRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerCommandResultOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_status(), target);
  }

  // string Reply = 2;
  if (this->reply().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply().data(), static_cast<int>(this->_internal_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerCommandResultOutputRequest.Reply");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerCommandResultOutputRequest)
  return target;
}

size_t ServerCommandResultOutputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerCommandResultOutputRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Reply = 2;
  if (this->reply().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply());
  }

  // uint64 Status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerCommandResultOutputRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerCommandResultOutputRequest*>(
      &from));
}

void ServerCommandResultOutputRequest::MergeFrom(const ServerCommandResultOutputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerCommandResultOutputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reply().size() > 0) {
    _internal_set_reply(from._internal_reply());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ServerCommandResultOutputRequest::CopyFrom(const ServerCommandResultOutputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerCommandResultOutputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCommandResultOutputRequest::IsInitialized() const {
  return true;
}

void ServerCommandResultOutputRequest::InternalSwap(ServerCommandResultOutputRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  reply_.Swap(&other->reply_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

std::string ServerCommandResultOutputRequest::GetTypeName() const {
  return "krserver.ServerCommandResultOutputRequest";
}


// ===================================================================

class ServerCommandResultOutputResponse::_Internal {
 public:
};

ServerCommandResultOutputResponse::ServerCommandResultOutputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerCommandResultOutputResponse)
}
ServerCommandResultOutputResponse::ServerCommandResultOutputResponse(const ServerCommandResultOutputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krserver.ServerCommandResultOutputResponse)
}

void ServerCommandResultOutputResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

ServerCommandResultOutputResponse::~ServerCommandResultOutputResponse() {
  // @@protoc_insertion_point(destructor:krserver.ServerCommandResultOutputResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerCommandResultOutputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerCommandResultOutputResponse::ArenaDtor(void* object) {
  ServerCommandResultOutputResponse* _this = reinterpret_cast< ServerCommandResultOutputResponse* >(object);
  (void)_this;
}
void ServerCommandResultOutputResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerCommandResultOutputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerCommandResultOutputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerCommandResultOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* ServerCommandResultOutputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerCommandResultOutputResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerCommandResultOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerCommandResultOutputResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerCommandResultOutputResponse)
  return target;
}

size_t ServerCommandResultOutputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerCommandResultOutputResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerCommandResultOutputResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerCommandResultOutputResponse*>(
      &from));
}

void ServerCommandResultOutputResponse::MergeFrom(const ServerCommandResultOutputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerCommandResultOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ServerCommandResultOutputResponse::CopyFrom(const ServerCommandResultOutputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerCommandResultOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCommandResultOutputResponse::IsInitialized() const {
  return true;
}

void ServerCommandResultOutputResponse::InternalSwap(ServerCommandResultOutputResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string ServerCommandResultOutputResponse::GetTypeName() const {
  return "krserver.ServerCommandResultOutputResponse";
}


// ===================================================================

class ServerExitFromRemoteProcessRequest::_Internal {
 public:
};

ServerExitFromRemoteProcessRequest::ServerExitFromRemoteProcessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerExitFromRemoteProcessRequest)
}
ServerExitFromRemoteProcessRequest::ServerExitFromRemoteProcessRequest(const ServerExitFromRemoteProcessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:krserver.ServerExitFromRemoteProcessRequest)
}

void ServerExitFromRemoteProcessRequest::SharedCtor() {
}

ServerExitFromRemoteProcessRequest::~ServerExitFromRemoteProcessRequest() {
  // @@protoc_insertion_point(destructor:krserver.ServerExitFromRemoteProcessRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerExitFromRemoteProcessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerExitFromRemoteProcessRequest::ArenaDtor(void* object) {
  ServerExitFromRemoteProcessRequest* _this = reinterpret_cast< ServerExitFromRemoteProcessRequest* >(object);
  (void)_this;
}
void ServerExitFromRemoteProcessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerExitFromRemoteProcessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerExitFromRemoteProcessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerExitFromRemoteProcessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ServerExitFromRemoteProcessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerExitFromRemoteProcessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerExitFromRemoteProcessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerExitFromRemoteProcessRequest)
  return target;
}

size_t ServerExitFromRemoteProcessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerExitFromRemoteProcessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerExitFromRemoteProcessRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerExitFromRemoteProcessRequest*>(
      &from));
}

void ServerExitFromRemoteProcessRequest::MergeFrom(const ServerExitFromRemoteProcessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerExitFromRemoteProcessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ServerExitFromRemoteProcessRequest::CopyFrom(const ServerExitFromRemoteProcessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerExitFromRemoteProcessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerExitFromRemoteProcessRequest::IsInitialized() const {
  return true;
}

void ServerExitFromRemoteProcessRequest::InternalSwap(ServerExitFromRemoteProcessRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ServerExitFromRemoteProcessRequest::GetTypeName() const {
  return "krserver.ServerExitFromRemoteProcessRequest";
}


// ===================================================================

class ServerExitFromRemoteProcessResponse::_Internal {
 public:
};

ServerExitFromRemoteProcessResponse::ServerExitFromRemoteProcessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerExitFromRemoteProcessResponse)
}
ServerExitFromRemoteProcessResponse::ServerExitFromRemoteProcessResponse(const ServerExitFromRemoteProcessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krserver.ServerExitFromRemoteProcessResponse)
}

void ServerExitFromRemoteProcessResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

ServerExitFromRemoteProcessResponse::~ServerExitFromRemoteProcessResponse() {
  // @@protoc_insertion_point(destructor:krserver.ServerExitFromRemoteProcessResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerExitFromRemoteProcessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerExitFromRemoteProcessResponse::ArenaDtor(void* object) {
  ServerExitFromRemoteProcessResponse* _this = reinterpret_cast< ServerExitFromRemoteProcessResponse* >(object);
  (void)_this;
}
void ServerExitFromRemoteProcessResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerExitFromRemoteProcessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerExitFromRemoteProcessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerExitFromRemoteProcessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* ServerExitFromRemoteProcessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerExitFromRemoteProcessResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerExitFromRemoteProcessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerExitFromRemoteProcessResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerExitFromRemoteProcessResponse)
  return target;
}

size_t ServerExitFromRemoteProcessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerExitFromRemoteProcessResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerExitFromRemoteProcessResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerExitFromRemoteProcessResponse*>(
      &from));
}

void ServerExitFromRemoteProcessResponse::MergeFrom(const ServerExitFromRemoteProcessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerExitFromRemoteProcessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ServerExitFromRemoteProcessResponse::CopyFrom(const ServerExitFromRemoteProcessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerExitFromRemoteProcessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerExitFromRemoteProcessResponse::IsInitialized() const {
  return true;
}

void ServerExitFromRemoteProcessResponse::InternalSwap(ServerExitFromRemoteProcessResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string ServerExitFromRemoteProcessResponse::GetTypeName() const {
  return "krserver.ServerExitFromRemoteProcessResponse";
}


// ===================================================================

class ServerLogOutputRequest::_Internal {
 public:
};

ServerLogOutputRequest::ServerLogOutputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerLogOutputRequest)
}
ServerLogOutputRequest::ServerLogOutputRequest(const ServerLogOutputRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArena());
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:krserver.ServerLogOutputRequest)
}

void ServerLogOutputRequest::SharedCtor() {
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
level_ = PROTOBUF_ULONGLONG(0);
}

ServerLogOutputRequest::~ServerLogOutputRequest() {
  // @@protoc_insertion_point(destructor:krserver.ServerLogOutputRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerLogOutputRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerLogOutputRequest::ArenaDtor(void* object) {
  ServerLogOutputRequest* _this = reinterpret_cast< ServerLogOutputRequest* >(object);
  (void)_this;
}
void ServerLogOutputRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerLogOutputRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerLogOutputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerLogOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.ClearToEmpty();
  level_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<std::string>();
}

const char* ServerLogOutputRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 Level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerLogOutputRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerLogOutputRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Level = 1;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_level(), target);
  }

  // string Command = 2;
  if (this->command().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerLogOutputRequest.Command");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerLogOutputRequest)
  return target;
}

size_t ServerLogOutputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerLogOutputRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Command = 2;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // uint64 Level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerLogOutputRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerLogOutputRequest*>(
      &from));
}

void ServerLogOutputRequest::MergeFrom(const ServerLogOutputRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerLogOutputRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command().size() > 0) {
    _internal_set_command(from._internal_command());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void ServerLogOutputRequest::CopyFrom(const ServerLogOutputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerLogOutputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLogOutputRequest::IsInitialized() const {
  return true;
}

void ServerLogOutputRequest::InternalSwap(ServerLogOutputRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(level_, other->level_);
}

std::string ServerLogOutputRequest::GetTypeName() const {
  return "krserver.ServerLogOutputRequest";
}


// ===================================================================

class ServerLogOutputResponse::_Internal {
 public:
};

ServerLogOutputResponse::ServerLogOutputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerLogOutputResponse)
}
ServerLogOutputResponse::ServerLogOutputResponse(const ServerLogOutputResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krserver.ServerLogOutputResponse)
}

void ServerLogOutputResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

ServerLogOutputResponse::~ServerLogOutputResponse() {
  // @@protoc_insertion_point(destructor:krserver.ServerLogOutputResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerLogOutputResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerLogOutputResponse::ArenaDtor(void* object) {
  ServerLogOutputResponse* _this = reinterpret_cast< ServerLogOutputResponse* >(object);
  (void)_this;
}
void ServerLogOutputResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerLogOutputResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerLogOutputResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerLogOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* ServerLogOutputResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerLogOutputResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerLogOutputResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerLogOutputResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerLogOutputResponse)
  return target;
}

size_t ServerLogOutputResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerLogOutputResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerLogOutputResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerLogOutputResponse*>(
      &from));
}

void ServerLogOutputResponse::MergeFrom(const ServerLogOutputResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerLogOutputResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ServerLogOutputResponse::CopyFrom(const ServerLogOutputResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerLogOutputResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerLogOutputResponse::IsInitialized() const {
  return true;
}

void ServerLogOutputResponse::InternalSwap(ServerLogOutputResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string ServerLogOutputResponse::GetTypeName() const {
  return "krserver.ServerLogOutputResponse";
}


// ===================================================================

class ServerMessageBoxRequest::_Internal {
 public:
};

ServerMessageBoxRequest::ServerMessageBoxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerMessageBoxRequest)
}
ServerMessageBoxRequest::ServerMessageBoxRequest(const ServerMessageBoxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&locked_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(locked_));
  // @@protoc_insertion_point(copy_constructor:krserver.ServerMessageBoxRequest)
}

void ServerMessageBoxRequest::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flags_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&locked_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(locked_));
}

ServerMessageBoxRequest::~ServerMessageBoxRequest() {
  // @@protoc_insertion_point(destructor:krserver.ServerMessageBoxRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerMessageBoxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerMessageBoxRequest::ArenaDtor(void* object) {
  ServerMessageBoxRequest* _this = reinterpret_cast< ServerMessageBoxRequest* >(object);
  (void)_this;
}
void ServerMessageBoxRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerMessageBoxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerMessageBoxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerMessageBoxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locked_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(locked_));
  _internal_metadata_.Clear<std::string>();
}

const char* ServerMessageBoxRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Locked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerMessageBoxRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerMessageBoxRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Description = 1;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerMessageBoxRequest.Description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // uint32 Flags = 2;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // bool Locked = 3;
  if (this->locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_locked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerMessageBoxRequest)
  return target;
}

size_t ServerMessageBoxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerMessageBoxRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint32 Flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // bool Locked = 3;
  if (this->locked() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMessageBoxRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerMessageBoxRequest*>(
      &from));
}

void ServerMessageBoxRequest::MergeFrom(const ServerMessageBoxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerMessageBoxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.locked() != 0) {
    _internal_set_locked(from._internal_locked());
  }
}

void ServerMessageBoxRequest::CopyFrom(const ServerMessageBoxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerMessageBoxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessageBoxRequest::IsInitialized() const {
  return true;
}

void ServerMessageBoxRequest::InternalSwap(ServerMessageBoxRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMessageBoxRequest, locked_)
      + sizeof(ServerMessageBoxRequest::locked_)
      - PROTOBUF_FIELD_OFFSET(ServerMessageBoxRequest, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

std::string ServerMessageBoxRequest::GetTypeName() const {
  return "krserver.ServerMessageBoxRequest";
}


// ===================================================================

class ServerMessageBoxResponse::_Internal {
 public:
};

ServerMessageBoxResponse::ServerMessageBoxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerMessageBoxResponse)
}
ServerMessageBoxResponse::ServerMessageBoxResponse(const ServerMessageBoxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krserver.ServerMessageBoxResponse)
}

void ServerMessageBoxResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

ServerMessageBoxResponse::~ServerMessageBoxResponse() {
  // @@protoc_insertion_point(destructor:krserver.ServerMessageBoxResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerMessageBoxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerMessageBoxResponse::ArenaDtor(void* object) {
  ServerMessageBoxResponse* _this = reinterpret_cast< ServerMessageBoxResponse* >(object);
  (void)_this;
}
void ServerMessageBoxResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerMessageBoxResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerMessageBoxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerMessageBoxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* ServerMessageBoxResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerMessageBoxResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerMessageBoxResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerMessageBoxResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerMessageBoxResponse)
  return target;
}

size_t ServerMessageBoxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerMessageBoxResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMessageBoxResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerMessageBoxResponse*>(
      &from));
}

void ServerMessageBoxResponse::MergeFrom(const ServerMessageBoxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerMessageBoxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ServerMessageBoxResponse::CopyFrom(const ServerMessageBoxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerMessageBoxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessageBoxResponse::IsInitialized() const {
  return true;
}

void ServerMessageBoxResponse::InternalSwap(ServerMessageBoxResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string ServerMessageBoxResponse::GetTypeName() const {
  return "krserver.ServerMessageBoxResponse";
}


// ===================================================================

class ServerProgressBarRequest::_Internal {
 public:
};

ServerProgressBarRequest::ServerProgressBarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerProgressBarRequest)
}
ServerProgressBarRequest::ServerProgressBarRequest(const ServerProgressBarRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  taskname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskname().empty()) {
    taskname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_taskname(), 
      GetArena());
  }
  ::memcpy(&current_, &from.current_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&current_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:krserver.ServerProgressBarRequest)
}

void ServerProgressBarRequest::SharedCtor() {
taskname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&current_)) + sizeof(total_));
}

ServerProgressBarRequest::~ServerProgressBarRequest() {
  // @@protoc_insertion_point(destructor:krserver.ServerProgressBarRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerProgressBarRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  taskname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerProgressBarRequest::ArenaDtor(void* object) {
  ServerProgressBarRequest* _this = reinterpret_cast< ServerProgressBarRequest* >(object);
  (void)_this;
}
void ServerProgressBarRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerProgressBarRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerProgressBarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerProgressBarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskname_.ClearToEmpty();
  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&current_)) + sizeof(total_));
  _internal_metadata_.Clear<std::string>();
}

const char* ServerProgressBarRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string TaskName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_taskname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Current = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerProgressBarRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerProgressBarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string TaskName = 1;
  if (this->taskname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_taskname().data(), static_cast<int>(this->_internal_taskname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerProgressBarRequest.TaskName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_taskname(), target);
  }

  // uint64 Current = 2;
  if (this->current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_current(), target);
  }

  // uint64 Total = 3;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerProgressBarRequest)
  return target;
}

size_t ServerProgressBarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerProgressBarRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string TaskName = 1;
  if (this->taskname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskname());
  }

  // uint64 Current = 2;
  if (this->current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_current());
  }

  // uint64 Total = 3;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerProgressBarRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerProgressBarRequest*>(
      &from));
}

void ServerProgressBarRequest::MergeFrom(const ServerProgressBarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerProgressBarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskname().size() > 0) {
    _internal_set_taskname(from._internal_taskname());
  }
  if (from.current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
}

void ServerProgressBarRequest::CopyFrom(const ServerProgressBarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerProgressBarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerProgressBarRequest::IsInitialized() const {
  return true;
}

void ServerProgressBarRequest::InternalSwap(ServerProgressBarRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  taskname_.Swap(&other->taskname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerProgressBarRequest, total_)
      + sizeof(ServerProgressBarRequest::total_)
      - PROTOBUF_FIELD_OFFSET(ServerProgressBarRequest, current_)>(
          reinterpret_cast<char*>(&current_),
          reinterpret_cast<char*>(&other->current_));
}

std::string ServerProgressBarRequest::GetTypeName() const {
  return "krserver.ServerProgressBarRequest";
}


// ===================================================================

class ServerProgressBarResponse::_Internal {
 public:
};

ServerProgressBarResponse::ServerProgressBarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerProgressBarResponse)
}
ServerProgressBarResponse::ServerProgressBarResponse(const ServerProgressBarResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krserver.ServerProgressBarResponse)
}

void ServerProgressBarResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

ServerProgressBarResponse::~ServerProgressBarResponse() {
  // @@protoc_insertion_point(destructor:krserver.ServerProgressBarResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerProgressBarResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerProgressBarResponse::ArenaDtor(void* object) {
  ServerProgressBarResponse* _this = reinterpret_cast< ServerProgressBarResponse* >(object);
  (void)_this;
}
void ServerProgressBarResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerProgressBarResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerProgressBarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerProgressBarResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* ServerProgressBarResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerProgressBarResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerProgressBarResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerProgressBarResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerProgressBarResponse)
  return target;
}

size_t ServerProgressBarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerProgressBarResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerProgressBarResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerProgressBarResponse*>(
      &from));
}

void ServerProgressBarResponse::MergeFrom(const ServerProgressBarResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerProgressBarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ServerProgressBarResponse::CopyFrom(const ServerProgressBarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerProgressBarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerProgressBarResponse::IsInitialized() const {
  return true;
}

void ServerProgressBarResponse::InternalSwap(ServerProgressBarResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string ServerProgressBarResponse::GetTypeName() const {
  return "krserver.ServerProgressBarResponse";
}


// ===================================================================

class ServerTaskEndAndEnableUIRequest::_Internal {
 public:
};

ServerTaskEndAndEnableUIRequest::ServerTaskEndAndEnableUIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerTaskEndAndEnableUIRequest)
}
ServerTaskEndAndEnableUIRequest::ServerTaskEndAndEnableUIRequest(const ServerTaskEndAndEnableUIRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  taskcompletestatus_ = from.taskcompletestatus_;
  // @@protoc_insertion_point(copy_constructor:krserver.ServerTaskEndAndEnableUIRequest)
}

void ServerTaskEndAndEnableUIRequest::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
taskcompletestatus_ = false;
}

ServerTaskEndAndEnableUIRequest::~ServerTaskEndAndEnableUIRequest() {
  // @@protoc_insertion_point(destructor:krserver.ServerTaskEndAndEnableUIRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerTaskEndAndEnableUIRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerTaskEndAndEnableUIRequest::ArenaDtor(void* object) {
  ServerTaskEndAndEnableUIRequest* _this = reinterpret_cast< ServerTaskEndAndEnableUIRequest* >(object);
  (void)_this;
}
void ServerTaskEndAndEnableUIRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerTaskEndAndEnableUIRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerTaskEndAndEnableUIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerTaskEndAndEnableUIRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  taskcompletestatus_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* ServerTaskEndAndEnableUIRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool TaskCompleteStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          taskcompletestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerTaskEndAndEnableUIRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerTaskEndAndEnableUIRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool TaskCompleteStatus = 1;
  if (this->taskcompletestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_taskcompletestatus(), target);
  }

  // string Description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerTaskEndAndEnableUIRequest.Description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerTaskEndAndEnableUIRequest)
  return target;
}

size_t ServerTaskEndAndEnableUIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerTaskEndAndEnableUIRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool TaskCompleteStatus = 1;
  if (this->taskcompletestatus() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerTaskEndAndEnableUIRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerTaskEndAndEnableUIRequest*>(
      &from));
}

void ServerTaskEndAndEnableUIRequest::MergeFrom(const ServerTaskEndAndEnableUIRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerTaskEndAndEnableUIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.taskcompletestatus() != 0) {
    _internal_set_taskcompletestatus(from._internal_taskcompletestatus());
  }
}

void ServerTaskEndAndEnableUIRequest::CopyFrom(const ServerTaskEndAndEnableUIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerTaskEndAndEnableUIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTaskEndAndEnableUIRequest::IsInitialized() const {
  return true;
}

void ServerTaskEndAndEnableUIRequest::InternalSwap(ServerTaskEndAndEnableUIRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(taskcompletestatus_, other->taskcompletestatus_);
}

std::string ServerTaskEndAndEnableUIRequest::GetTypeName() const {
  return "krserver.ServerTaskEndAndEnableUIRequest";
}


// ===================================================================

class ServerTaskEndAndEnableUIResponse::_Internal {
 public:
};

ServerTaskEndAndEnableUIResponse::ServerTaskEndAndEnableUIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerTaskEndAndEnableUIResponse)
}
ServerTaskEndAndEnableUIResponse::ServerTaskEndAndEnableUIResponse(const ServerTaskEndAndEnableUIResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krserver.ServerTaskEndAndEnableUIResponse)
}

void ServerTaskEndAndEnableUIResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

ServerTaskEndAndEnableUIResponse::~ServerTaskEndAndEnableUIResponse() {
  // @@protoc_insertion_point(destructor:krserver.ServerTaskEndAndEnableUIResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerTaskEndAndEnableUIResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerTaskEndAndEnableUIResponse::ArenaDtor(void* object) {
  ServerTaskEndAndEnableUIResponse* _this = reinterpret_cast< ServerTaskEndAndEnableUIResponse* >(object);
  (void)_this;
}
void ServerTaskEndAndEnableUIResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerTaskEndAndEnableUIResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerTaskEndAndEnableUIResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerTaskEndAndEnableUIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* ServerTaskEndAndEnableUIResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerTaskEndAndEnableUIResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerTaskEndAndEnableUIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerTaskEndAndEnableUIResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerTaskEndAndEnableUIResponse)
  return target;
}

size_t ServerTaskEndAndEnableUIResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerTaskEndAndEnableUIResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerTaskEndAndEnableUIResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerTaskEndAndEnableUIResponse*>(
      &from));
}

void ServerTaskEndAndEnableUIResponse::MergeFrom(const ServerTaskEndAndEnableUIResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerTaskEndAndEnableUIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ServerTaskEndAndEnableUIResponse::CopyFrom(const ServerTaskEndAndEnableUIResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerTaskEndAndEnableUIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTaskEndAndEnableUIResponse::IsInitialized() const {
  return true;
}

void ServerTaskEndAndEnableUIResponse::InternalSwap(ServerTaskEndAndEnableUIResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string ServerTaskEndAndEnableUIResponse::GetTypeName() const {
  return "krserver.ServerTaskEndAndEnableUIResponse";
}


// ===================================================================

class ServerTaskStartAndDisableUIRequest::_Internal {
 public:
};

ServerTaskStartAndDisableUIRequest::ServerTaskStartAndDisableUIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerTaskStartAndDisableUIRequest)
}
ServerTaskStartAndDisableUIRequest::ServerTaskStartAndDisableUIRequest(const ServerTaskStartAndDisableUIRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:krserver.ServerTaskStartAndDisableUIRequest)
}

void ServerTaskStartAndDisableUIRequest::SharedCtor() {
}

ServerTaskStartAndDisableUIRequest::~ServerTaskStartAndDisableUIRequest() {
  // @@protoc_insertion_point(destructor:krserver.ServerTaskStartAndDisableUIRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerTaskStartAndDisableUIRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerTaskStartAndDisableUIRequest::ArenaDtor(void* object) {
  ServerTaskStartAndDisableUIRequest* _this = reinterpret_cast< ServerTaskStartAndDisableUIRequest* >(object);
  (void)_this;
}
void ServerTaskStartAndDisableUIRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerTaskStartAndDisableUIRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerTaskStartAndDisableUIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerTaskStartAndDisableUIRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ServerTaskStartAndDisableUIRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerTaskStartAndDisableUIRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerTaskStartAndDisableUIRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerTaskStartAndDisableUIRequest)
  return target;
}

size_t ServerTaskStartAndDisableUIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerTaskStartAndDisableUIRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerTaskStartAndDisableUIRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerTaskStartAndDisableUIRequest*>(
      &from));
}

void ServerTaskStartAndDisableUIRequest::MergeFrom(const ServerTaskStartAndDisableUIRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerTaskStartAndDisableUIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ServerTaskStartAndDisableUIRequest::CopyFrom(const ServerTaskStartAndDisableUIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerTaskStartAndDisableUIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTaskStartAndDisableUIRequest::IsInitialized() const {
  return true;
}

void ServerTaskStartAndDisableUIRequest::InternalSwap(ServerTaskStartAndDisableUIRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ServerTaskStartAndDisableUIRequest::GetTypeName() const {
  return "krserver.ServerTaskStartAndDisableUIRequest";
}


// ===================================================================

class ServerTaskStartAndDisableUIResponse::_Internal {
 public:
};

ServerTaskStartAndDisableUIResponse::ServerTaskStartAndDisableUIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerTaskStartAndDisableUIResponse)
}
ServerTaskStartAndDisableUIResponse::ServerTaskStartAndDisableUIResponse(const ServerTaskStartAndDisableUIResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krserver.ServerTaskStartAndDisableUIResponse)
}

void ServerTaskStartAndDisableUIResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

ServerTaskStartAndDisableUIResponse::~ServerTaskStartAndDisableUIResponse() {
  // @@protoc_insertion_point(destructor:krserver.ServerTaskStartAndDisableUIResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerTaskStartAndDisableUIResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerTaskStartAndDisableUIResponse::ArenaDtor(void* object) {
  ServerTaskStartAndDisableUIResponse* _this = reinterpret_cast< ServerTaskStartAndDisableUIResponse* >(object);
  (void)_this;
}
void ServerTaskStartAndDisableUIResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerTaskStartAndDisableUIResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerTaskStartAndDisableUIResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerTaskStartAndDisableUIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* ServerTaskStartAndDisableUIResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerTaskStartAndDisableUIResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerTaskStartAndDisableUIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerTaskStartAndDisableUIResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerTaskStartAndDisableUIResponse)
  return target;
}

size_t ServerTaskStartAndDisableUIResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerTaskStartAndDisableUIResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerTaskStartAndDisableUIResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerTaskStartAndDisableUIResponse*>(
      &from));
}

void ServerTaskStartAndDisableUIResponse::MergeFrom(const ServerTaskStartAndDisableUIResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerTaskStartAndDisableUIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ServerTaskStartAndDisableUIResponse::CopyFrom(const ServerTaskStartAndDisableUIResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerTaskStartAndDisableUIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTaskStartAndDisableUIResponse::IsInitialized() const {
  return true;
}

void ServerTaskStartAndDisableUIResponse::InternalSwap(ServerTaskStartAndDisableUIResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string ServerTaskStartAndDisableUIResponse::GetTypeName() const {
  return "krserver.ServerTaskStartAndDisableUIResponse";
}


// ===================================================================

class ServerUIHeartbeatPackageRequest::_Internal {
 public:
};

ServerUIHeartbeatPackageRequest::ServerUIHeartbeatPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerUIHeartbeatPackageRequest)
}
ServerUIHeartbeatPackageRequest::ServerUIHeartbeatPackageRequest(const ServerUIHeartbeatPackageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:krserver.ServerUIHeartbeatPackageRequest)
}

void ServerUIHeartbeatPackageRequest::SharedCtor() {
}

ServerUIHeartbeatPackageRequest::~ServerUIHeartbeatPackageRequest() {
  // @@protoc_insertion_point(destructor:krserver.ServerUIHeartbeatPackageRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerUIHeartbeatPackageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerUIHeartbeatPackageRequest::ArenaDtor(void* object) {
  ServerUIHeartbeatPackageRequest* _this = reinterpret_cast< ServerUIHeartbeatPackageRequest* >(object);
  (void)_this;
}
void ServerUIHeartbeatPackageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerUIHeartbeatPackageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerUIHeartbeatPackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerUIHeartbeatPackageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ServerUIHeartbeatPackageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerUIHeartbeatPackageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerUIHeartbeatPackageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerUIHeartbeatPackageRequest)
  return target;
}

size_t ServerUIHeartbeatPackageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerUIHeartbeatPackageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerUIHeartbeatPackageRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerUIHeartbeatPackageRequest*>(
      &from));
}

void ServerUIHeartbeatPackageRequest::MergeFrom(const ServerUIHeartbeatPackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerUIHeartbeatPackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ServerUIHeartbeatPackageRequest::CopyFrom(const ServerUIHeartbeatPackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerUIHeartbeatPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUIHeartbeatPackageRequest::IsInitialized() const {
  return true;
}

void ServerUIHeartbeatPackageRequest::InternalSwap(ServerUIHeartbeatPackageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ServerUIHeartbeatPackageRequest::GetTypeName() const {
  return "krserver.ServerUIHeartbeatPackageRequest";
}


// ===================================================================

class ServerUIHeartbeatPackageResponse::_Internal {
 public:
};

ServerUIHeartbeatPackageResponse::ServerUIHeartbeatPackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerUIHeartbeatPackageResponse)
}
ServerUIHeartbeatPackageResponse::ServerUIHeartbeatPackageResponse(const ServerUIHeartbeatPackageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:krserver.ServerUIHeartbeatPackageResponse)
}

void ServerUIHeartbeatPackageResponse::SharedCtor() {
}

ServerUIHeartbeatPackageResponse::~ServerUIHeartbeatPackageResponse() {
  // @@protoc_insertion_point(destructor:krserver.ServerUIHeartbeatPackageResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerUIHeartbeatPackageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerUIHeartbeatPackageResponse::ArenaDtor(void* object) {
  ServerUIHeartbeatPackageResponse* _this = reinterpret_cast< ServerUIHeartbeatPackageResponse* >(object);
  (void)_this;
}
void ServerUIHeartbeatPackageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerUIHeartbeatPackageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerUIHeartbeatPackageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerUIHeartbeatPackageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* ServerUIHeartbeatPackageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerUIHeartbeatPackageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerUIHeartbeatPackageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerUIHeartbeatPackageResponse)
  return target;
}

size_t ServerUIHeartbeatPackageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerUIHeartbeatPackageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerUIHeartbeatPackageResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerUIHeartbeatPackageResponse*>(
      &from));
}

void ServerUIHeartbeatPackageResponse::MergeFrom(const ServerUIHeartbeatPackageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerUIHeartbeatPackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ServerUIHeartbeatPackageResponse::CopyFrom(const ServerUIHeartbeatPackageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerUIHeartbeatPackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUIHeartbeatPackageResponse::IsInitialized() const {
  return true;
}

void ServerUIHeartbeatPackageResponse::InternalSwap(ServerUIHeartbeatPackageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string ServerUIHeartbeatPackageResponse::GetTypeName() const {
  return "krserver.ServerUIHeartbeatPackageResponse";
}


// ===================================================================

class ServerUIReadyRequest::_Internal {
 public:
};

ServerUIReadyRequest::ServerUIReadyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerUIReadyRequest)
}
ServerUIReadyRequest::ServerUIReadyRequest(const ServerUIReadyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sessionkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sessionkey().empty()) {
    sessionkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionkey(), 
      GetArena());
  }
  ::memcpy(&clientport_, &from.clientport_,
    static_cast<size_t>(reinterpret_cast<char*>(&extra_) -
    reinterpret_cast<char*>(&clientport_)) + sizeof(extra_));
  // @@protoc_insertion_point(copy_constructor:krserver.ServerUIReadyRequest)
}

void ServerUIReadyRequest::SharedCtor() {
sessionkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&clientport_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extra_) -
    reinterpret_cast<char*>(&clientport_)) + sizeof(extra_));
}

ServerUIReadyRequest::~ServerUIReadyRequest() {
  // @@protoc_insertion_point(destructor:krserver.ServerUIReadyRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerUIReadyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sessionkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerUIReadyRequest::ArenaDtor(void* object) {
  ServerUIReadyRequest* _this = reinterpret_cast< ServerUIReadyRequest* >(object);
  (void)_this;
}
void ServerUIReadyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerUIReadyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerUIReadyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerUIReadyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sessionkey_.ClearToEmpty();
  ::memset(&clientport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_) -
      reinterpret_cast<char*>(&clientport_)) + sizeof(extra_));
  _internal_metadata_.Clear<std::string>();
}

const char* ServerUIReadyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ClientPort = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          clientport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SessionKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sessionkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Extra = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          extra_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerUIReadyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerUIReadyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ClientPort = 1;
  if (this->clientport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_clientport(), target);
  }

  // string SessionKey = 2;
  if (this->sessionkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionkey().data(), static_cast<int>(this->_internal_sessionkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerUIReadyRequest.SessionKey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sessionkey(), target);
  }

  // uint32 Extra = 3;
  if (this->extra() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_extra(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerUIReadyRequest)
  return target;
}

size_t ServerUIReadyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerUIReadyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SessionKey = 2;
  if (this->sessionkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionkey());
  }

  // uint32 ClientPort = 1;
  if (this->clientport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_clientport());
  }

  // uint32 Extra = 3;
  if (this->extra() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extra());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerUIReadyRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerUIReadyRequest*>(
      &from));
}

void ServerUIReadyRequest::MergeFrom(const ServerUIReadyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerUIReadyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionkey().size() > 0) {
    _internal_set_sessionkey(from._internal_sessionkey());
  }
  if (from.clientport() != 0) {
    _internal_set_clientport(from._internal_clientport());
  }
  if (from.extra() != 0) {
    _internal_set_extra(from._internal_extra());
  }
}

void ServerUIReadyRequest::CopyFrom(const ServerUIReadyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerUIReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUIReadyRequest::IsInitialized() const {
  return true;
}

void ServerUIReadyRequest::InternalSwap(ServerUIReadyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  sessionkey_.Swap(&other->sessionkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerUIReadyRequest, extra_)
      + sizeof(ServerUIReadyRequest::extra_)
      - PROTOBUF_FIELD_OFFSET(ServerUIReadyRequest, clientport_)>(
          reinterpret_cast<char*>(&clientport_),
          reinterpret_cast<char*>(&other->clientport_));
}

std::string ServerUIReadyRequest::GetTypeName() const {
  return "krserver.ServerUIReadyRequest";
}


// ===================================================================

class ServerUIReadyResponse::_Internal {
 public:
};

ServerUIReadyResponse::ServerUIReadyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krserver.ServerUIReadyResponse)
}
ServerUIReadyResponse::ServerUIReadyResponse(const ServerUIReadyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&heartbeatinterval_) -
    reinterpret_cast<char*>(&success_)) + sizeof(heartbeatinterval_));
  // @@protoc_insertion_point(copy_constructor:krserver.ServerUIReadyResponse)
}

void ServerUIReadyResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heartbeatinterval_) -
    reinterpret_cast<char*>(&success_)) + sizeof(heartbeatinterval_));
}

ServerUIReadyResponse::~ServerUIReadyResponse() {
  // @@protoc_insertion_point(destructor:krserver.ServerUIReadyResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerUIReadyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerUIReadyResponse::ArenaDtor(void* object) {
  ServerUIReadyResponse* _this = reinterpret_cast< ServerUIReadyResponse* >(object);
  (void)_this;
}
void ServerUIReadyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerUIReadyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerUIReadyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krserver.ServerUIReadyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeatinterval_) -
      reinterpret_cast<char*>(&success_)) + sizeof(heartbeatinterval_));
  _internal_metadata_.Clear<std::string>();
}

const char* ServerUIReadyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 HeartbeatInterval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          heartbeatinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerUIReadyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krserver.ServerUIReadyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krserver.ServerUIReadyResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // uint32 HeartbeatInterval = 3;
  if (this->heartbeatinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_heartbeatinterval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krserver.ServerUIReadyResponse)
  return target;
}

size_t ServerUIReadyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krserver.ServerUIReadyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 HeartbeatInterval = 3;
  if (this->heartbeatinterval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_heartbeatinterval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerUIReadyResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerUIReadyResponse*>(
      &from));
}

void ServerUIReadyResponse::MergeFrom(const ServerUIReadyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krserver.ServerUIReadyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.heartbeatinterval() != 0) {
    _internal_set_heartbeatinterval(from._internal_heartbeatinterval());
  }
}

void ServerUIReadyResponse::CopyFrom(const ServerUIReadyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krserver.ServerUIReadyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUIReadyResponse::IsInitialized() const {
  return true;
}

void ServerUIReadyResponse::InternalSwap(ServerUIReadyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerUIReadyResponse, heartbeatinterval_)
      + sizeof(ServerUIReadyResponse::heartbeatinterval_)
      - PROTOBUF_FIELD_OFFSET(ServerUIReadyResponse, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

std::string ServerUIReadyResponse::GetTypeName() const {
  return "krserver.ServerUIReadyResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace krserver
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::krserver::ServerCommandResultOutputRequest* Arena::CreateMaybeMessage< ::krserver::ServerCommandResultOutputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerCommandResultOutputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerCommandResultOutputResponse* Arena::CreateMaybeMessage< ::krserver::ServerCommandResultOutputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerCommandResultOutputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerExitFromRemoteProcessRequest* Arena::CreateMaybeMessage< ::krserver::ServerExitFromRemoteProcessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerExitFromRemoteProcessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerExitFromRemoteProcessResponse* Arena::CreateMaybeMessage< ::krserver::ServerExitFromRemoteProcessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerExitFromRemoteProcessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerLogOutputRequest* Arena::CreateMaybeMessage< ::krserver::ServerLogOutputRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerLogOutputRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerLogOutputResponse* Arena::CreateMaybeMessage< ::krserver::ServerLogOutputResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerLogOutputResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerMessageBoxRequest* Arena::CreateMaybeMessage< ::krserver::ServerMessageBoxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerMessageBoxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerMessageBoxResponse* Arena::CreateMaybeMessage< ::krserver::ServerMessageBoxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerMessageBoxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerProgressBarRequest* Arena::CreateMaybeMessage< ::krserver::ServerProgressBarRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerProgressBarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerProgressBarResponse* Arena::CreateMaybeMessage< ::krserver::ServerProgressBarResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerProgressBarResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerTaskEndAndEnableUIRequest* Arena::CreateMaybeMessage< ::krserver::ServerTaskEndAndEnableUIRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerTaskEndAndEnableUIRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerTaskEndAndEnableUIResponse* Arena::CreateMaybeMessage< ::krserver::ServerTaskEndAndEnableUIResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerTaskEndAndEnableUIResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerTaskStartAndDisableUIRequest* Arena::CreateMaybeMessage< ::krserver::ServerTaskStartAndDisableUIRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerTaskStartAndDisableUIRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerTaskStartAndDisableUIResponse* Arena::CreateMaybeMessage< ::krserver::ServerTaskStartAndDisableUIResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerTaskStartAndDisableUIResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerUIHeartbeatPackageRequest* Arena::CreateMaybeMessage< ::krserver::ServerUIHeartbeatPackageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerUIHeartbeatPackageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerUIHeartbeatPackageResponse* Arena::CreateMaybeMessage< ::krserver::ServerUIHeartbeatPackageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerUIHeartbeatPackageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerUIReadyRequest* Arena::CreateMaybeMessage< ::krserver::ServerUIReadyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerUIReadyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krserver::ServerUIReadyResponse* Arena::CreateMaybeMessage< ::krserver::ServerUIReadyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krserver::ServerUIReadyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
