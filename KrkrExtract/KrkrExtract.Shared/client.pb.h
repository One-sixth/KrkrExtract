// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace krclient {
class CancelTaskRequest;
struct CancelTaskRequestDefaultTypeInternal;
extern CancelTaskRequestDefaultTypeInternal _CancelTaskRequest_default_instance_;
class CancelTaskResponse;
struct CancelTaskResponseDefaultTypeInternal;
extern CancelTaskResponseDefaultTypeInternal _CancelTaskResponse_default_instance_;
class EmitCommandRequest;
struct EmitCommandRequestDefaultTypeInternal;
extern EmitCommandRequestDefaultTypeInternal _EmitCommandRequest_default_instance_;
class EmitCommandResponse;
struct EmitCommandResponseDefaultTypeInternal;
extern EmitCommandResponseDefaultTypeInternal _EmitCommandResponse_default_instance_;
class PackerRequest;
struct PackerRequestDefaultTypeInternal;
extern PackerRequestDefaultTypeInternal _PackerRequest_default_instance_;
class PackerResponse;
struct PackerResponseDefaultTypeInternal;
extern PackerResponseDefaultTypeInternal _PackerResponse_default_instance_;
class TaskCloseWindowRequest;
struct TaskCloseWindowRequestDefaultTypeInternal;
extern TaskCloseWindowRequestDefaultTypeInternal _TaskCloseWindowRequest_default_instance_;
class TaskCloseWindowResponse;
struct TaskCloseWindowResponseDefaultTypeInternal;
extern TaskCloseWindowResponseDefaultTypeInternal _TaskCloseWindowResponse_default_instance_;
class TaskDumpStartRequest;
struct TaskDumpStartRequestDefaultTypeInternal;
extern TaskDumpStartRequestDefaultTypeInternal _TaskDumpStartRequest_default_instance_;
class TaskDumpStartResponse;
struct TaskDumpStartResponseDefaultTypeInternal;
extern TaskDumpStartResponseDefaultTypeInternal _TaskDumpStartResponse_default_instance_;
class UniversalDumperRequest;
struct UniversalDumperRequestDefaultTypeInternal;
extern UniversalDumperRequestDefaultTypeInternal _UniversalDumperRequest_default_instance_;
class UniversalDumperResponse;
struct UniversalDumperResponseDefaultTypeInternal;
extern UniversalDumperResponseDefaultTypeInternal _UniversalDumperResponse_default_instance_;
class UniversalPatchRequest;
struct UniversalPatchRequestDefaultTypeInternal;
extern UniversalPatchRequestDefaultTypeInternal _UniversalPatchRequest_default_instance_;
class UniversalPatchResponse;
struct UniversalPatchResponseDefaultTypeInternal;
extern UniversalPatchResponseDefaultTypeInternal _UniversalPatchResponse_default_instance_;
}  // namespace krclient
PROTOBUF_NAMESPACE_OPEN
template<> ::krclient::CancelTaskRequest* Arena::CreateMaybeMessage<::krclient::CancelTaskRequest>(Arena*);
template<> ::krclient::CancelTaskResponse* Arena::CreateMaybeMessage<::krclient::CancelTaskResponse>(Arena*);
template<> ::krclient::EmitCommandRequest* Arena::CreateMaybeMessage<::krclient::EmitCommandRequest>(Arena*);
template<> ::krclient::EmitCommandResponse* Arena::CreateMaybeMessage<::krclient::EmitCommandResponse>(Arena*);
template<> ::krclient::PackerRequest* Arena::CreateMaybeMessage<::krclient::PackerRequest>(Arena*);
template<> ::krclient::PackerResponse* Arena::CreateMaybeMessage<::krclient::PackerResponse>(Arena*);
template<> ::krclient::TaskCloseWindowRequest* Arena::CreateMaybeMessage<::krclient::TaskCloseWindowRequest>(Arena*);
template<> ::krclient::TaskCloseWindowResponse* Arena::CreateMaybeMessage<::krclient::TaskCloseWindowResponse>(Arena*);
template<> ::krclient::TaskDumpStartRequest* Arena::CreateMaybeMessage<::krclient::TaskDumpStartRequest>(Arena*);
template<> ::krclient::TaskDumpStartResponse* Arena::CreateMaybeMessage<::krclient::TaskDumpStartResponse>(Arena*);
template<> ::krclient::UniversalDumperRequest* Arena::CreateMaybeMessage<::krclient::UniversalDumperRequest>(Arena*);
template<> ::krclient::UniversalDumperResponse* Arena::CreateMaybeMessage<::krclient::UniversalDumperResponse>(Arena*);
template<> ::krclient::UniversalPatchRequest* Arena::CreateMaybeMessage<::krclient::UniversalPatchRequest>(Arena*);
template<> ::krclient::UniversalPatchResponse* Arena::CreateMaybeMessage<::krclient::UniversalPatchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace krclient {

// ===================================================================

class CancelTaskRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.CancelTaskRequest) */ {
 public:
  inline CancelTaskRequest() : CancelTaskRequest(nullptr) {}
  virtual ~CancelTaskRequest();
  explicit constexpr CancelTaskRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelTaskRequest(const CancelTaskRequest& from);
  CancelTaskRequest(CancelTaskRequest&& from) noexcept
    : CancelTaskRequest() {
    *this = ::std::move(from);
  }

  inline CancelTaskRequest& operator=(const CancelTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelTaskRequest& operator=(CancelTaskRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CancelTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelTaskRequest* internal_default_instance() {
    return reinterpret_cast<const CancelTaskRequest*>(
               &_CancelTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CancelTaskRequest& a, CancelTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelTaskRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelTaskRequest* New() const final {
    return CreateMaybeMessage<CancelTaskRequest>(nullptr);
  }

  CancelTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelTaskRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CancelTaskRequest& from);
  void MergeFrom(const CancelTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CancelTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.CancelTaskRequest";
  }
  protected:
  explicit CancelTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:krclient.CancelTaskRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class CancelTaskResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.CancelTaskResponse) */ {
 public:
  inline CancelTaskResponse() : CancelTaskResponse(nullptr) {}
  virtual ~CancelTaskResponse();
  explicit constexpr CancelTaskResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelTaskResponse(const CancelTaskResponse& from);
  CancelTaskResponse(CancelTaskResponse&& from) noexcept
    : CancelTaskResponse() {
    *this = ::std::move(from);
  }

  inline CancelTaskResponse& operator=(const CancelTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelTaskResponse& operator=(CancelTaskResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CancelTaskResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelTaskResponse* internal_default_instance() {
    return reinterpret_cast<const CancelTaskResponse*>(
               &_CancelTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CancelTaskResponse& a, CancelTaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelTaskResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelTaskResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelTaskResponse* New() const final {
    return CreateMaybeMessage<CancelTaskResponse>(nullptr);
  }

  CancelTaskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelTaskResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CancelTaskResponse& from);
  void MergeFrom(const CancelTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CancelTaskResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.CancelTaskResponse";
  }
  protected:
  explicit CancelTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krclient.CancelTaskResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class EmitCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.EmitCommandRequest) */ {
 public:
  inline EmitCommandRequest() : EmitCommandRequest(nullptr) {}
  virtual ~EmitCommandRequest();
  explicit constexpr EmitCommandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmitCommandRequest(const EmitCommandRequest& from);
  EmitCommandRequest(EmitCommandRequest&& from) noexcept
    : EmitCommandRequest() {
    *this = ::std::move(from);
  }

  inline EmitCommandRequest& operator=(const EmitCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmitCommandRequest& operator=(EmitCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EmitCommandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmitCommandRequest* internal_default_instance() {
    return reinterpret_cast<const EmitCommandRequest*>(
               &_EmitCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EmitCommandRequest& a, EmitCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EmitCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmitCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmitCommandRequest* New() const final {
    return CreateMaybeMessage<EmitCommandRequest>(nullptr);
  }

  EmitCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmitCommandRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EmitCommandRequest& from);
  void MergeFrom(const EmitCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmitCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.EmitCommandRequest";
  }
  protected:
  explicit EmitCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // string Command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:krclient.EmitCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class EmitCommandResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.EmitCommandResponse) */ {
 public:
  inline EmitCommandResponse() : EmitCommandResponse(nullptr) {}
  virtual ~EmitCommandResponse();
  explicit constexpr EmitCommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmitCommandResponse(const EmitCommandResponse& from);
  EmitCommandResponse(EmitCommandResponse&& from) noexcept
    : EmitCommandResponse() {
    *this = ::std::move(from);
  }

  inline EmitCommandResponse& operator=(const EmitCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmitCommandResponse& operator=(EmitCommandResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EmitCommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmitCommandResponse* internal_default_instance() {
    return reinterpret_cast<const EmitCommandResponse*>(
               &_EmitCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EmitCommandResponse& a, EmitCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EmitCommandResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmitCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmitCommandResponse* New() const final {
    return CreateMaybeMessage<EmitCommandResponse>(nullptr);
  }

  EmitCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmitCommandResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EmitCommandResponse& from);
  void MergeFrom(const EmitCommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmitCommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.EmitCommandResponse";
  }
  protected:
  explicit EmitCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krclient.EmitCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class PackerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.PackerRequest) */ {
 public:
  inline PackerRequest() : PackerRequest(nullptr) {}
  virtual ~PackerRequest();
  explicit constexpr PackerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PackerRequest(const PackerRequest& from);
  PackerRequest(PackerRequest&& from) noexcept
    : PackerRequest() {
    *this = ::std::move(from);
  }

  inline PackerRequest& operator=(const PackerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackerRequest& operator=(PackerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PackerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackerRequest* internal_default_instance() {
    return reinterpret_cast<const PackerRequest*>(
               &_PackerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PackerRequest& a, PackerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PackerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackerRequest* New() const final {
    return CreateMaybeMessage<PackerRequest>(nullptr);
  }

  PackerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackerRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackerRequest& from);
  void MergeFrom(const PackerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.PackerRequest";
  }
  protected:
  explicit PackerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseDirFieldNumber = 1,
    kOriginalArchiveNameFieldNumber = 2,
    kOutputArchiveNameFieldNumber = 3,
  };
  // string BaseDir = 1;
  void clear_basedir();
  const std::string& basedir() const;
  void set_basedir(const std::string& value);
  void set_basedir(std::string&& value);
  void set_basedir(const char* value);
  void set_basedir(const char* value, size_t size);
  std::string* mutable_basedir();
  std::string* release_basedir();
  void set_allocated_basedir(std::string* basedir);
  private:
  const std::string& _internal_basedir() const;
  void _internal_set_basedir(const std::string& value);
  std::string* _internal_mutable_basedir();
  public:

  // string OriginalArchiveName = 2;
  void clear_originalarchivename();
  const std::string& originalarchivename() const;
  void set_originalarchivename(const std::string& value);
  void set_originalarchivename(std::string&& value);
  void set_originalarchivename(const char* value);
  void set_originalarchivename(const char* value, size_t size);
  std::string* mutable_originalarchivename();
  std::string* release_originalarchivename();
  void set_allocated_originalarchivename(std::string* originalarchivename);
  private:
  const std::string& _internal_originalarchivename() const;
  void _internal_set_originalarchivename(const std::string& value);
  std::string* _internal_mutable_originalarchivename();
  public:

  // string OutputArchiveName = 3;
  void clear_outputarchivename();
  const std::string& outputarchivename() const;
  void set_outputarchivename(const std::string& value);
  void set_outputarchivename(std::string&& value);
  void set_outputarchivename(const char* value);
  void set_outputarchivename(const char* value, size_t size);
  std::string* mutable_outputarchivename();
  std::string* release_outputarchivename();
  void set_allocated_outputarchivename(std::string* outputarchivename);
  private:
  const std::string& _internal_outputarchivename() const;
  void _internal_set_outputarchivename(const std::string& value);
  std::string* _internal_mutable_outputarchivename();
  public:

  // @@protoc_insertion_point(class_scope:krclient.PackerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr basedir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr originalarchivename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputarchivename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class PackerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.PackerResponse) */ {
 public:
  inline PackerResponse() : PackerResponse(nullptr) {}
  virtual ~PackerResponse();
  explicit constexpr PackerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PackerResponse(const PackerResponse& from);
  PackerResponse(PackerResponse&& from) noexcept
    : PackerResponse() {
    *this = ::std::move(from);
  }

  inline PackerResponse& operator=(const PackerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackerResponse& operator=(PackerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PackerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackerResponse* internal_default_instance() {
    return reinterpret_cast<const PackerResponse*>(
               &_PackerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PackerResponse& a, PackerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PackerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackerResponse* New() const final {
    return CreateMaybeMessage<PackerResponse>(nullptr);
  }

  PackerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackerResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackerResponse& from);
  void MergeFrom(const PackerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.PackerResponse";
  }
  protected:
  explicit PackerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krclient.PackerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class TaskCloseWindowRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.TaskCloseWindowRequest) */ {
 public:
  inline TaskCloseWindowRequest() : TaskCloseWindowRequest(nullptr) {}
  virtual ~TaskCloseWindowRequest();
  explicit constexpr TaskCloseWindowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskCloseWindowRequest(const TaskCloseWindowRequest& from);
  TaskCloseWindowRequest(TaskCloseWindowRequest&& from) noexcept
    : TaskCloseWindowRequest() {
    *this = ::std::move(from);
  }

  inline TaskCloseWindowRequest& operator=(const TaskCloseWindowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskCloseWindowRequest& operator=(TaskCloseWindowRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TaskCloseWindowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskCloseWindowRequest* internal_default_instance() {
    return reinterpret_cast<const TaskCloseWindowRequest*>(
               &_TaskCloseWindowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TaskCloseWindowRequest& a, TaskCloseWindowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskCloseWindowRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskCloseWindowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskCloseWindowRequest* New() const final {
    return CreateMaybeMessage<TaskCloseWindowRequest>(nullptr);
  }

  TaskCloseWindowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskCloseWindowRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TaskCloseWindowRequest& from);
  void MergeFrom(const TaskCloseWindowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskCloseWindowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.TaskCloseWindowRequest";
  }
  protected:
  explicit TaskCloseWindowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:krclient.TaskCloseWindowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class TaskCloseWindowResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.TaskCloseWindowResponse) */ {
 public:
  inline TaskCloseWindowResponse() : TaskCloseWindowResponse(nullptr) {}
  virtual ~TaskCloseWindowResponse();
  explicit constexpr TaskCloseWindowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskCloseWindowResponse(const TaskCloseWindowResponse& from);
  TaskCloseWindowResponse(TaskCloseWindowResponse&& from) noexcept
    : TaskCloseWindowResponse() {
    *this = ::std::move(from);
  }

  inline TaskCloseWindowResponse& operator=(const TaskCloseWindowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskCloseWindowResponse& operator=(TaskCloseWindowResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TaskCloseWindowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskCloseWindowResponse* internal_default_instance() {
    return reinterpret_cast<const TaskCloseWindowResponse*>(
               &_TaskCloseWindowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TaskCloseWindowResponse& a, TaskCloseWindowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskCloseWindowResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskCloseWindowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskCloseWindowResponse* New() const final {
    return CreateMaybeMessage<TaskCloseWindowResponse>(nullptr);
  }

  TaskCloseWindowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskCloseWindowResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TaskCloseWindowResponse& from);
  void MergeFrom(const TaskCloseWindowResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskCloseWindowResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.TaskCloseWindowResponse";
  }
  protected:
  explicit TaskCloseWindowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:krclient.TaskCloseWindowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class TaskDumpStartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.TaskDumpStartRequest) */ {
 public:
  inline TaskDumpStartRequest() : TaskDumpStartRequest(nullptr) {}
  virtual ~TaskDumpStartRequest();
  explicit constexpr TaskDumpStartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskDumpStartRequest(const TaskDumpStartRequest& from);
  TaskDumpStartRequest(TaskDumpStartRequest&& from) noexcept
    : TaskDumpStartRequest() {
    *this = ::std::move(from);
  }

  inline TaskDumpStartRequest& operator=(const TaskDumpStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskDumpStartRequest& operator=(TaskDumpStartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TaskDumpStartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskDumpStartRequest* internal_default_instance() {
    return reinterpret_cast<const TaskDumpStartRequest*>(
               &_TaskDumpStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TaskDumpStartRequest& a, TaskDumpStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskDumpStartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskDumpStartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskDumpStartRequest* New() const final {
    return CreateMaybeMessage<TaskDumpStartRequest>(nullptr);
  }

  TaskDumpStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskDumpStartRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TaskDumpStartRequest& from);
  void MergeFrom(const TaskDumpStartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskDumpStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.TaskDumpStartRequest";
  }
  protected:
  explicit TaskDumpStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kPsbModeFieldNumber = 2,
    kTextModeFieldNumber = 3,
    kPngModeFieldNumber = 4,
    kTjs2ModeFieldNumber = 5,
    kTlgModeFieldNumber = 6,
    kAmvModeFieldNumber = 7,
    kPdbModeFieldNumber = 8,
  };
  // string File = 1;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // uint64 PsbMode = 2;
  void clear_psbmode();
  ::PROTOBUF_NAMESPACE_ID::uint64 psbmode() const;
  void set_psbmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_psbmode() const;
  void _internal_set_psbmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 TextMode = 3;
  void clear_textmode();
  ::PROTOBUF_NAMESPACE_ID::uint64 textmode() const;
  void set_textmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_textmode() const;
  void _internal_set_textmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 PngMode = 4;
  void clear_pngmode();
  ::PROTOBUF_NAMESPACE_ID::uint64 pngmode() const;
  void set_pngmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pngmode() const;
  void _internal_set_pngmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 Tjs2Mode = 5;
  void clear_tjs2mode();
  ::PROTOBUF_NAMESPACE_ID::uint64 tjs2mode() const;
  void set_tjs2mode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tjs2mode() const;
  void _internal_set_tjs2mode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 TlgMode = 6;
  void clear_tlgmode();
  ::PROTOBUF_NAMESPACE_ID::uint64 tlgmode() const;
  void set_tlgmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tlgmode() const;
  void _internal_set_tlgmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 AmvMode = 7;
  void clear_amvmode();
  ::PROTOBUF_NAMESPACE_ID::uint64 amvmode() const;
  void set_amvmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amvmode() const;
  void _internal_set_amvmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 PdbMode = 8;
  void clear_pdbmode();
  ::PROTOBUF_NAMESPACE_ID::uint64 pdbmode() const;
  void set_pdbmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pdbmode() const;
  void _internal_set_pdbmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:krclient.TaskDumpStartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  ::PROTOBUF_NAMESPACE_ID::uint64 psbmode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 textmode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pngmode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tjs2mode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tlgmode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amvmode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pdbmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class TaskDumpStartResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.TaskDumpStartResponse) */ {
 public:
  inline TaskDumpStartResponse() : TaskDumpStartResponse(nullptr) {}
  virtual ~TaskDumpStartResponse();
  explicit constexpr TaskDumpStartResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskDumpStartResponse(const TaskDumpStartResponse& from);
  TaskDumpStartResponse(TaskDumpStartResponse&& from) noexcept
    : TaskDumpStartResponse() {
    *this = ::std::move(from);
  }

  inline TaskDumpStartResponse& operator=(const TaskDumpStartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskDumpStartResponse& operator=(TaskDumpStartResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TaskDumpStartResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskDumpStartResponse* internal_default_instance() {
    return reinterpret_cast<const TaskDumpStartResponse*>(
               &_TaskDumpStartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TaskDumpStartResponse& a, TaskDumpStartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskDumpStartResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskDumpStartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskDumpStartResponse* New() const final {
    return CreateMaybeMessage<TaskDumpStartResponse>(nullptr);
  }

  TaskDumpStartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskDumpStartResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TaskDumpStartResponse& from);
  void MergeFrom(const TaskDumpStartResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskDumpStartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.TaskDumpStartResponse";
  }
  protected:
  explicit TaskDumpStartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krclient.TaskDumpStartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class UniversalDumperRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.UniversalDumperRequest) */ {
 public:
  inline UniversalDumperRequest() : UniversalDumperRequest(nullptr) {}
  virtual ~UniversalDumperRequest();
  explicit constexpr UniversalDumperRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UniversalDumperRequest(const UniversalDumperRequest& from);
  UniversalDumperRequest(UniversalDumperRequest&& from) noexcept
    : UniversalDumperRequest() {
    *this = ::std::move(from);
  }

  inline UniversalDumperRequest& operator=(const UniversalDumperRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniversalDumperRequest& operator=(UniversalDumperRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UniversalDumperRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UniversalDumperRequest* internal_default_instance() {
    return reinterpret_cast<const UniversalDumperRequest*>(
               &_UniversalDumperRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UniversalDumperRequest& a, UniversalDumperRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UniversalDumperRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniversalDumperRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniversalDumperRequest* New() const final {
    return CreateMaybeMessage<UniversalDumperRequest>(nullptr);
  }

  UniversalDumperRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniversalDumperRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UniversalDumperRequest& from);
  void MergeFrom(const UniversalDumperRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UniversalDumperRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.UniversalDumperRequest";
  }
  protected:
  explicit UniversalDumperRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPsbModeFieldNumber = 1,
    kTextModeFieldNumber = 2,
    kPngModeFieldNumber = 3,
    kTjs2ModeFieldNumber = 4,
    kTlgModeFieldNumber = 5,
    kAmvModeFieldNumber = 6,
    kPdbModeFieldNumber = 7,
  };
  // uint64 PsbMode = 1;
  void clear_psbmode();
  ::PROTOBUF_NAMESPACE_ID::uint64 psbmode() const;
  void set_psbmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_psbmode() const;
  void _internal_set_psbmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 TextMode = 2;
  void clear_textmode();
  ::PROTOBUF_NAMESPACE_ID::uint64 textmode() const;
  void set_textmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_textmode() const;
  void _internal_set_textmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 PngMode = 3;
  void clear_pngmode();
  ::PROTOBUF_NAMESPACE_ID::uint64 pngmode() const;
  void set_pngmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pngmode() const;
  void _internal_set_pngmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 Tjs2Mode = 4;
  void clear_tjs2mode();
  ::PROTOBUF_NAMESPACE_ID::uint64 tjs2mode() const;
  void set_tjs2mode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tjs2mode() const;
  void _internal_set_tjs2mode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 TlgMode = 5;
  void clear_tlgmode();
  ::PROTOBUF_NAMESPACE_ID::uint64 tlgmode() const;
  void set_tlgmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tlgmode() const;
  void _internal_set_tlgmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 AmvMode = 6;
  void clear_amvmode();
  ::PROTOBUF_NAMESPACE_ID::uint64 amvmode() const;
  void set_amvmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amvmode() const;
  void _internal_set_amvmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 PdbMode = 7;
  void clear_pdbmode();
  ::PROTOBUF_NAMESPACE_ID::uint64 pdbmode() const;
  void set_pdbmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pdbmode() const;
  void _internal_set_pdbmode(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:krclient.UniversalDumperRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 psbmode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 textmode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pngmode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tjs2mode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tlgmode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amvmode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pdbmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class UniversalDumperResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.UniversalDumperResponse) */ {
 public:
  inline UniversalDumperResponse() : UniversalDumperResponse(nullptr) {}
  virtual ~UniversalDumperResponse();
  explicit constexpr UniversalDumperResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UniversalDumperResponse(const UniversalDumperResponse& from);
  UniversalDumperResponse(UniversalDumperResponse&& from) noexcept
    : UniversalDumperResponse() {
    *this = ::std::move(from);
  }

  inline UniversalDumperResponse& operator=(const UniversalDumperResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniversalDumperResponse& operator=(UniversalDumperResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UniversalDumperResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UniversalDumperResponse* internal_default_instance() {
    return reinterpret_cast<const UniversalDumperResponse*>(
               &_UniversalDumperResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UniversalDumperResponse& a, UniversalDumperResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UniversalDumperResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniversalDumperResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniversalDumperResponse* New() const final {
    return CreateMaybeMessage<UniversalDumperResponse>(nullptr);
  }

  UniversalDumperResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniversalDumperResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UniversalDumperResponse& from);
  void MergeFrom(const UniversalDumperResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UniversalDumperResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.UniversalDumperResponse";
  }
  protected:
  explicit UniversalDumperResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krclient.UniversalDumperResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class UniversalPatchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.UniversalPatchRequest) */ {
 public:
  inline UniversalPatchRequest() : UniversalPatchRequest(nullptr) {}
  virtual ~UniversalPatchRequest();
  explicit constexpr UniversalPatchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UniversalPatchRequest(const UniversalPatchRequest& from);
  UniversalPatchRequest(UniversalPatchRequest&& from) noexcept
    : UniversalPatchRequest() {
    *this = ::std::move(from);
  }

  inline UniversalPatchRequest& operator=(const UniversalPatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniversalPatchRequest& operator=(UniversalPatchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UniversalPatchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UniversalPatchRequest* internal_default_instance() {
    return reinterpret_cast<const UniversalPatchRequest*>(
               &_UniversalPatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UniversalPatchRequest& a, UniversalPatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UniversalPatchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniversalPatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniversalPatchRequest* New() const final {
    return CreateMaybeMessage<UniversalPatchRequest>(nullptr);
  }

  UniversalPatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniversalPatchRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UniversalPatchRequest& from);
  void MergeFrom(const UniversalPatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UniversalPatchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.UniversalPatchRequest";
  }
  protected:
  explicit UniversalPatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtectFieldNumber = 1,
    kIconFieldNumber = 2,
  };
  // uint32 Protect = 1;
  void clear_protect();
  ::PROTOBUF_NAMESPACE_ID::uint32 protect() const;
  void set_protect(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protect() const;
  void _internal_set_protect(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Icon = 2;
  void clear_icon();
  ::PROTOBUF_NAMESPACE_ID::uint32 icon() const;
  void set_icon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_icon() const;
  void _internal_set_icon(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:krclient.UniversalPatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protect_;
  ::PROTOBUF_NAMESPACE_ID::uint32 icon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// -------------------------------------------------------------------

class UniversalPatchResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krclient.UniversalPatchResponse) */ {
 public:
  inline UniversalPatchResponse() : UniversalPatchResponse(nullptr) {}
  virtual ~UniversalPatchResponse();
  explicit constexpr UniversalPatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UniversalPatchResponse(const UniversalPatchResponse& from);
  UniversalPatchResponse(UniversalPatchResponse&& from) noexcept
    : UniversalPatchResponse() {
    *this = ::std::move(from);
  }

  inline UniversalPatchResponse& operator=(const UniversalPatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UniversalPatchResponse& operator=(UniversalPatchResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UniversalPatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UniversalPatchResponse* internal_default_instance() {
    return reinterpret_cast<const UniversalPatchResponse*>(
               &_UniversalPatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UniversalPatchResponse& a, UniversalPatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UniversalPatchResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UniversalPatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UniversalPatchResponse* New() const final {
    return CreateMaybeMessage<UniversalPatchResponse>(nullptr);
  }

  UniversalPatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UniversalPatchResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UniversalPatchResponse& from);
  void MergeFrom(const UniversalPatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UniversalPatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krclient.UniversalPatchResponse";
  }
  protected:
  explicit UniversalPatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krclient.UniversalPatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CancelTaskRequest

// -------------------------------------------------------------------

// CancelTaskResponse

// bool Success = 1;
inline void CancelTaskResponse::clear_success() {
  success_ = false;
}
inline bool CancelTaskResponse::_internal_success() const {
  return success_;
}
inline bool CancelTaskResponse::success() const {
  // @@protoc_insertion_point(field_get:krclient.CancelTaskResponse.Success)
  return _internal_success();
}
inline void CancelTaskResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CancelTaskResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krclient.CancelTaskResponse.Success)
}

// string Message = 2;
inline void CancelTaskResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CancelTaskResponse::message() const {
  // @@protoc_insertion_point(field_get:krclient.CancelTaskResponse.Message)
  return _internal_message();
}
inline void CancelTaskResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krclient.CancelTaskResponse.Message)
}
inline std::string* CancelTaskResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krclient.CancelTaskResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& CancelTaskResponse::_internal_message() const {
  return message_.Get();
}
inline void CancelTaskResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CancelTaskResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krclient.CancelTaskResponse.Message)
}
inline void CancelTaskResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krclient.CancelTaskResponse.Message)
}
inline void CancelTaskResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krclient.CancelTaskResponse.Message)
}
inline std::string* CancelTaskResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CancelTaskResponse::release_message() {
  // @@protoc_insertion_point(field_release:krclient.CancelTaskResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CancelTaskResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krclient.CancelTaskResponse.Message)
}

// -------------------------------------------------------------------

// EmitCommandRequest

// string Command = 1;
inline void EmitCommandRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& EmitCommandRequest::command() const {
  // @@protoc_insertion_point(field_get:krclient.EmitCommandRequest.Command)
  return _internal_command();
}
inline void EmitCommandRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:krclient.EmitCommandRequest.Command)
}
inline std::string* EmitCommandRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:krclient.EmitCommandRequest.Command)
  return _internal_mutable_command();
}
inline const std::string& EmitCommandRequest::_internal_command() const {
  return command_.Get();
}
inline void EmitCommandRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmitCommandRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krclient.EmitCommandRequest.Command)
}
inline void EmitCommandRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krclient.EmitCommandRequest.Command)
}
inline void EmitCommandRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krclient.EmitCommandRequest.Command)
}
inline std::string* EmitCommandRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmitCommandRequest::release_command() {
  // @@protoc_insertion_point(field_release:krclient.EmitCommandRequest.Command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmitCommandRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krclient.EmitCommandRequest.Command)
}

// -------------------------------------------------------------------

// EmitCommandResponse

// bool Success = 1;
inline void EmitCommandResponse::clear_success() {
  success_ = false;
}
inline bool EmitCommandResponse::_internal_success() const {
  return success_;
}
inline bool EmitCommandResponse::success() const {
  // @@protoc_insertion_point(field_get:krclient.EmitCommandResponse.Success)
  return _internal_success();
}
inline void EmitCommandResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void EmitCommandResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krclient.EmitCommandResponse.Success)
}

// string Message = 2;
inline void EmitCommandResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& EmitCommandResponse::message() const {
  // @@protoc_insertion_point(field_get:krclient.EmitCommandResponse.Message)
  return _internal_message();
}
inline void EmitCommandResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krclient.EmitCommandResponse.Message)
}
inline std::string* EmitCommandResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krclient.EmitCommandResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& EmitCommandResponse::_internal_message() const {
  return message_.Get();
}
inline void EmitCommandResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmitCommandResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krclient.EmitCommandResponse.Message)
}
inline void EmitCommandResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krclient.EmitCommandResponse.Message)
}
inline void EmitCommandResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krclient.EmitCommandResponse.Message)
}
inline std::string* EmitCommandResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmitCommandResponse::release_message() {
  // @@protoc_insertion_point(field_release:krclient.EmitCommandResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmitCommandResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krclient.EmitCommandResponse.Message)
}

// -------------------------------------------------------------------

// PackerRequest

// string BaseDir = 1;
inline void PackerRequest::clear_basedir() {
  basedir_.ClearToEmpty();
}
inline const std::string& PackerRequest::basedir() const {
  // @@protoc_insertion_point(field_get:krclient.PackerRequest.BaseDir)
  return _internal_basedir();
}
inline void PackerRequest::set_basedir(const std::string& value) {
  _internal_set_basedir(value);
  // @@protoc_insertion_point(field_set:krclient.PackerRequest.BaseDir)
}
inline std::string* PackerRequest::mutable_basedir() {
  // @@protoc_insertion_point(field_mutable:krclient.PackerRequest.BaseDir)
  return _internal_mutable_basedir();
}
inline const std::string& PackerRequest::_internal_basedir() const {
  return basedir_.Get();
}
inline void PackerRequest::_internal_set_basedir(const std::string& value) {
  
  basedir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PackerRequest::set_basedir(std::string&& value) {
  
  basedir_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krclient.PackerRequest.BaseDir)
}
inline void PackerRequest::set_basedir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  basedir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krclient.PackerRequest.BaseDir)
}
inline void PackerRequest::set_basedir(const char* value,
    size_t size) {
  
  basedir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krclient.PackerRequest.BaseDir)
}
inline std::string* PackerRequest::_internal_mutable_basedir() {
  
  return basedir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PackerRequest::release_basedir() {
  // @@protoc_insertion_point(field_release:krclient.PackerRequest.BaseDir)
  return basedir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PackerRequest::set_allocated_basedir(std::string* basedir) {
  if (basedir != nullptr) {
    
  } else {
    
  }
  basedir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), basedir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krclient.PackerRequest.BaseDir)
}

// string OriginalArchiveName = 2;
inline void PackerRequest::clear_originalarchivename() {
  originalarchivename_.ClearToEmpty();
}
inline const std::string& PackerRequest::originalarchivename() const {
  // @@protoc_insertion_point(field_get:krclient.PackerRequest.OriginalArchiveName)
  return _internal_originalarchivename();
}
inline void PackerRequest::set_originalarchivename(const std::string& value) {
  _internal_set_originalarchivename(value);
  // @@protoc_insertion_point(field_set:krclient.PackerRequest.OriginalArchiveName)
}
inline std::string* PackerRequest::mutable_originalarchivename() {
  // @@protoc_insertion_point(field_mutable:krclient.PackerRequest.OriginalArchiveName)
  return _internal_mutable_originalarchivename();
}
inline const std::string& PackerRequest::_internal_originalarchivename() const {
  return originalarchivename_.Get();
}
inline void PackerRequest::_internal_set_originalarchivename(const std::string& value) {
  
  originalarchivename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PackerRequest::set_originalarchivename(std::string&& value) {
  
  originalarchivename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krclient.PackerRequest.OriginalArchiveName)
}
inline void PackerRequest::set_originalarchivename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  originalarchivename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krclient.PackerRequest.OriginalArchiveName)
}
inline void PackerRequest::set_originalarchivename(const char* value,
    size_t size) {
  
  originalarchivename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krclient.PackerRequest.OriginalArchiveName)
}
inline std::string* PackerRequest::_internal_mutable_originalarchivename() {
  
  return originalarchivename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PackerRequest::release_originalarchivename() {
  // @@protoc_insertion_point(field_release:krclient.PackerRequest.OriginalArchiveName)
  return originalarchivename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PackerRequest::set_allocated_originalarchivename(std::string* originalarchivename) {
  if (originalarchivename != nullptr) {
    
  } else {
    
  }
  originalarchivename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), originalarchivename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krclient.PackerRequest.OriginalArchiveName)
}

// string OutputArchiveName = 3;
inline void PackerRequest::clear_outputarchivename() {
  outputarchivename_.ClearToEmpty();
}
inline const std::string& PackerRequest::outputarchivename() const {
  // @@protoc_insertion_point(field_get:krclient.PackerRequest.OutputArchiveName)
  return _internal_outputarchivename();
}
inline void PackerRequest::set_outputarchivename(const std::string& value) {
  _internal_set_outputarchivename(value);
  // @@protoc_insertion_point(field_set:krclient.PackerRequest.OutputArchiveName)
}
inline std::string* PackerRequest::mutable_outputarchivename() {
  // @@protoc_insertion_point(field_mutable:krclient.PackerRequest.OutputArchiveName)
  return _internal_mutable_outputarchivename();
}
inline const std::string& PackerRequest::_internal_outputarchivename() const {
  return outputarchivename_.Get();
}
inline void PackerRequest::_internal_set_outputarchivename(const std::string& value) {
  
  outputarchivename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PackerRequest::set_outputarchivename(std::string&& value) {
  
  outputarchivename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krclient.PackerRequest.OutputArchiveName)
}
inline void PackerRequest::set_outputarchivename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outputarchivename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krclient.PackerRequest.OutputArchiveName)
}
inline void PackerRequest::set_outputarchivename(const char* value,
    size_t size) {
  
  outputarchivename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krclient.PackerRequest.OutputArchiveName)
}
inline std::string* PackerRequest::_internal_mutable_outputarchivename() {
  
  return outputarchivename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PackerRequest::release_outputarchivename() {
  // @@protoc_insertion_point(field_release:krclient.PackerRequest.OutputArchiveName)
  return outputarchivename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PackerRequest::set_allocated_outputarchivename(std::string* outputarchivename) {
  if (outputarchivename != nullptr) {
    
  } else {
    
  }
  outputarchivename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputarchivename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krclient.PackerRequest.OutputArchiveName)
}

// -------------------------------------------------------------------

// PackerResponse

// bool Success = 1;
inline void PackerResponse::clear_success() {
  success_ = false;
}
inline bool PackerResponse::_internal_success() const {
  return success_;
}
inline bool PackerResponse::success() const {
  // @@protoc_insertion_point(field_get:krclient.PackerResponse.Success)
  return _internal_success();
}
inline void PackerResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void PackerResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krclient.PackerResponse.Success)
}

// string Message = 2;
inline void PackerResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PackerResponse::message() const {
  // @@protoc_insertion_point(field_get:krclient.PackerResponse.Message)
  return _internal_message();
}
inline void PackerResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krclient.PackerResponse.Message)
}
inline std::string* PackerResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krclient.PackerResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& PackerResponse::_internal_message() const {
  return message_.Get();
}
inline void PackerResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PackerResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krclient.PackerResponse.Message)
}
inline void PackerResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krclient.PackerResponse.Message)
}
inline void PackerResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krclient.PackerResponse.Message)
}
inline std::string* PackerResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PackerResponse::release_message() {
  // @@protoc_insertion_point(field_release:krclient.PackerResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PackerResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krclient.PackerResponse.Message)
}

// -------------------------------------------------------------------

// TaskCloseWindowRequest

// -------------------------------------------------------------------

// TaskCloseWindowResponse

// -------------------------------------------------------------------

// TaskDumpStartRequest

// string File = 1;
inline void TaskDumpStartRequest::clear_file() {
  file_.ClearToEmpty();
}
inline const std::string& TaskDumpStartRequest::file() const {
  // @@protoc_insertion_point(field_get:krclient.TaskDumpStartRequest.File)
  return _internal_file();
}
inline void TaskDumpStartRequest::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:krclient.TaskDumpStartRequest.File)
}
inline std::string* TaskDumpStartRequest::mutable_file() {
  // @@protoc_insertion_point(field_mutable:krclient.TaskDumpStartRequest.File)
  return _internal_mutable_file();
}
inline const std::string& TaskDumpStartRequest::_internal_file() const {
  return file_.Get();
}
inline void TaskDumpStartRequest::_internal_set_file(const std::string& value) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskDumpStartRequest::set_file(std::string&& value) {
  
  file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krclient.TaskDumpStartRequest.File)
}
inline void TaskDumpStartRequest::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krclient.TaskDumpStartRequest.File)
}
inline void TaskDumpStartRequest::set_file(const char* value,
    size_t size) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krclient.TaskDumpStartRequest.File)
}
inline std::string* TaskDumpStartRequest::_internal_mutable_file() {
  
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskDumpStartRequest::release_file() {
  // @@protoc_insertion_point(field_release:krclient.TaskDumpStartRequest.File)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskDumpStartRequest::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krclient.TaskDumpStartRequest.File)
}

// uint64 PsbMode = 2;
inline void TaskDumpStartRequest::clear_psbmode() {
  psbmode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::_internal_psbmode() const {
  return psbmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::psbmode() const {
  // @@protoc_insertion_point(field_get:krclient.TaskDumpStartRequest.PsbMode)
  return _internal_psbmode();
}
inline void TaskDumpStartRequest::_internal_set_psbmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  psbmode_ = value;
}
inline void TaskDumpStartRequest::set_psbmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_psbmode(value);
  // @@protoc_insertion_point(field_set:krclient.TaskDumpStartRequest.PsbMode)
}

// uint64 TextMode = 3;
inline void TaskDumpStartRequest::clear_textmode() {
  textmode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::_internal_textmode() const {
  return textmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::textmode() const {
  // @@protoc_insertion_point(field_get:krclient.TaskDumpStartRequest.TextMode)
  return _internal_textmode();
}
inline void TaskDumpStartRequest::_internal_set_textmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  textmode_ = value;
}
inline void TaskDumpStartRequest::set_textmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_textmode(value);
  // @@protoc_insertion_point(field_set:krclient.TaskDumpStartRequest.TextMode)
}

// uint64 PngMode = 4;
inline void TaskDumpStartRequest::clear_pngmode() {
  pngmode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::_internal_pngmode() const {
  return pngmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::pngmode() const {
  // @@protoc_insertion_point(field_get:krclient.TaskDumpStartRequest.PngMode)
  return _internal_pngmode();
}
inline void TaskDumpStartRequest::_internal_set_pngmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pngmode_ = value;
}
inline void TaskDumpStartRequest::set_pngmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pngmode(value);
  // @@protoc_insertion_point(field_set:krclient.TaskDumpStartRequest.PngMode)
}

// uint64 Tjs2Mode = 5;
inline void TaskDumpStartRequest::clear_tjs2mode() {
  tjs2mode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::_internal_tjs2mode() const {
  return tjs2mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::tjs2mode() const {
  // @@protoc_insertion_point(field_get:krclient.TaskDumpStartRequest.Tjs2Mode)
  return _internal_tjs2mode();
}
inline void TaskDumpStartRequest::_internal_set_tjs2mode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tjs2mode_ = value;
}
inline void TaskDumpStartRequest::set_tjs2mode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tjs2mode(value);
  // @@protoc_insertion_point(field_set:krclient.TaskDumpStartRequest.Tjs2Mode)
}

// uint64 TlgMode = 6;
inline void TaskDumpStartRequest::clear_tlgmode() {
  tlgmode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::_internal_tlgmode() const {
  return tlgmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::tlgmode() const {
  // @@protoc_insertion_point(field_get:krclient.TaskDumpStartRequest.TlgMode)
  return _internal_tlgmode();
}
inline void TaskDumpStartRequest::_internal_set_tlgmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tlgmode_ = value;
}
inline void TaskDumpStartRequest::set_tlgmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tlgmode(value);
  // @@protoc_insertion_point(field_set:krclient.TaskDumpStartRequest.TlgMode)
}

// uint64 AmvMode = 7;
inline void TaskDumpStartRequest::clear_amvmode() {
  amvmode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::_internal_amvmode() const {
  return amvmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::amvmode() const {
  // @@protoc_insertion_point(field_get:krclient.TaskDumpStartRequest.AmvMode)
  return _internal_amvmode();
}
inline void TaskDumpStartRequest::_internal_set_amvmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amvmode_ = value;
}
inline void TaskDumpStartRequest::set_amvmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amvmode(value);
  // @@protoc_insertion_point(field_set:krclient.TaskDumpStartRequest.AmvMode)
}

// uint64 PdbMode = 8;
inline void TaskDumpStartRequest::clear_pdbmode() {
  pdbmode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::_internal_pdbmode() const {
  return pdbmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TaskDumpStartRequest::pdbmode() const {
  // @@protoc_insertion_point(field_get:krclient.TaskDumpStartRequest.PdbMode)
  return _internal_pdbmode();
}
inline void TaskDumpStartRequest::_internal_set_pdbmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pdbmode_ = value;
}
inline void TaskDumpStartRequest::set_pdbmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pdbmode(value);
  // @@protoc_insertion_point(field_set:krclient.TaskDumpStartRequest.PdbMode)
}

// -------------------------------------------------------------------

// TaskDumpStartResponse

// bool Success = 1;
inline void TaskDumpStartResponse::clear_success() {
  success_ = false;
}
inline bool TaskDumpStartResponse::_internal_success() const {
  return success_;
}
inline bool TaskDumpStartResponse::success() const {
  // @@protoc_insertion_point(field_get:krclient.TaskDumpStartResponse.Success)
  return _internal_success();
}
inline void TaskDumpStartResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void TaskDumpStartResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krclient.TaskDumpStartResponse.Success)
}

// string Message = 2;
inline void TaskDumpStartResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& TaskDumpStartResponse::message() const {
  // @@protoc_insertion_point(field_get:krclient.TaskDumpStartResponse.Message)
  return _internal_message();
}
inline void TaskDumpStartResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krclient.TaskDumpStartResponse.Message)
}
inline std::string* TaskDumpStartResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krclient.TaskDumpStartResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& TaskDumpStartResponse::_internal_message() const {
  return message_.Get();
}
inline void TaskDumpStartResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskDumpStartResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krclient.TaskDumpStartResponse.Message)
}
inline void TaskDumpStartResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krclient.TaskDumpStartResponse.Message)
}
inline void TaskDumpStartResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krclient.TaskDumpStartResponse.Message)
}
inline std::string* TaskDumpStartResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskDumpStartResponse::release_message() {
  // @@protoc_insertion_point(field_release:krclient.TaskDumpStartResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskDumpStartResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krclient.TaskDumpStartResponse.Message)
}

// -------------------------------------------------------------------

// UniversalDumperRequest

// uint64 PsbMode = 1;
inline void UniversalDumperRequest::clear_psbmode() {
  psbmode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::_internal_psbmode() const {
  return psbmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::psbmode() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalDumperRequest.PsbMode)
  return _internal_psbmode();
}
inline void UniversalDumperRequest::_internal_set_psbmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  psbmode_ = value;
}
inline void UniversalDumperRequest::set_psbmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_psbmode(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalDumperRequest.PsbMode)
}

// uint64 TextMode = 2;
inline void UniversalDumperRequest::clear_textmode() {
  textmode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::_internal_textmode() const {
  return textmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::textmode() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalDumperRequest.TextMode)
  return _internal_textmode();
}
inline void UniversalDumperRequest::_internal_set_textmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  textmode_ = value;
}
inline void UniversalDumperRequest::set_textmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_textmode(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalDumperRequest.TextMode)
}

// uint64 PngMode = 3;
inline void UniversalDumperRequest::clear_pngmode() {
  pngmode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::_internal_pngmode() const {
  return pngmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::pngmode() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalDumperRequest.PngMode)
  return _internal_pngmode();
}
inline void UniversalDumperRequest::_internal_set_pngmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pngmode_ = value;
}
inline void UniversalDumperRequest::set_pngmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pngmode(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalDumperRequest.PngMode)
}

// uint64 Tjs2Mode = 4;
inline void UniversalDumperRequest::clear_tjs2mode() {
  tjs2mode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::_internal_tjs2mode() const {
  return tjs2mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::tjs2mode() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalDumperRequest.Tjs2Mode)
  return _internal_tjs2mode();
}
inline void UniversalDumperRequest::_internal_set_tjs2mode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tjs2mode_ = value;
}
inline void UniversalDumperRequest::set_tjs2mode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tjs2mode(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalDumperRequest.Tjs2Mode)
}

// uint64 TlgMode = 5;
inline void UniversalDumperRequest::clear_tlgmode() {
  tlgmode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::_internal_tlgmode() const {
  return tlgmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::tlgmode() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalDumperRequest.TlgMode)
  return _internal_tlgmode();
}
inline void UniversalDumperRequest::_internal_set_tlgmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tlgmode_ = value;
}
inline void UniversalDumperRequest::set_tlgmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tlgmode(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalDumperRequest.TlgMode)
}

// uint64 AmvMode = 6;
inline void UniversalDumperRequest::clear_amvmode() {
  amvmode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::_internal_amvmode() const {
  return amvmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::amvmode() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalDumperRequest.AmvMode)
  return _internal_amvmode();
}
inline void UniversalDumperRequest::_internal_set_amvmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amvmode_ = value;
}
inline void UniversalDumperRequest::set_amvmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amvmode(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalDumperRequest.AmvMode)
}

// uint64 PdbMode = 7;
inline void UniversalDumperRequest::clear_pdbmode() {
  pdbmode_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::_internal_pdbmode() const {
  return pdbmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UniversalDumperRequest::pdbmode() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalDumperRequest.PdbMode)
  return _internal_pdbmode();
}
inline void UniversalDumperRequest::_internal_set_pdbmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pdbmode_ = value;
}
inline void UniversalDumperRequest::set_pdbmode(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pdbmode(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalDumperRequest.PdbMode)
}

// -------------------------------------------------------------------

// UniversalDumperResponse

// bool Success = 1;
inline void UniversalDumperResponse::clear_success() {
  success_ = false;
}
inline bool UniversalDumperResponse::_internal_success() const {
  return success_;
}
inline bool UniversalDumperResponse::success() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalDumperResponse.Success)
  return _internal_success();
}
inline void UniversalDumperResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void UniversalDumperResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalDumperResponse.Success)
}

// string Message = 2;
inline void UniversalDumperResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& UniversalDumperResponse::message() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalDumperResponse.Message)
  return _internal_message();
}
inline void UniversalDumperResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalDumperResponse.Message)
}
inline std::string* UniversalDumperResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krclient.UniversalDumperResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& UniversalDumperResponse::_internal_message() const {
  return message_.Get();
}
inline void UniversalDumperResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UniversalDumperResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krclient.UniversalDumperResponse.Message)
}
inline void UniversalDumperResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krclient.UniversalDumperResponse.Message)
}
inline void UniversalDumperResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krclient.UniversalDumperResponse.Message)
}
inline std::string* UniversalDumperResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UniversalDumperResponse::release_message() {
  // @@protoc_insertion_point(field_release:krclient.UniversalDumperResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UniversalDumperResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krclient.UniversalDumperResponse.Message)
}

// -------------------------------------------------------------------

// UniversalPatchRequest

// uint32 Protect = 1;
inline void UniversalPatchRequest::clear_protect() {
  protect_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UniversalPatchRequest::_internal_protect() const {
  return protect_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UniversalPatchRequest::protect() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalPatchRequest.Protect)
  return _internal_protect();
}
inline void UniversalPatchRequest::_internal_set_protect(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protect_ = value;
}
inline void UniversalPatchRequest::set_protect(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protect(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalPatchRequest.Protect)
}

// uint32 Icon = 2;
inline void UniversalPatchRequest::clear_icon() {
  icon_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UniversalPatchRequest::_internal_icon() const {
  return icon_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UniversalPatchRequest::icon() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalPatchRequest.Icon)
  return _internal_icon();
}
inline void UniversalPatchRequest::_internal_set_icon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  icon_ = value;
}
inline void UniversalPatchRequest::set_icon(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalPatchRequest.Icon)
}

// -------------------------------------------------------------------

// UniversalPatchResponse

// bool Success = 1;
inline void UniversalPatchResponse::clear_success() {
  success_ = false;
}
inline bool UniversalPatchResponse::_internal_success() const {
  return success_;
}
inline bool UniversalPatchResponse::success() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalPatchResponse.Success)
  return _internal_success();
}
inline void UniversalPatchResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void UniversalPatchResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalPatchResponse.Success)
}

// string Message = 2;
inline void UniversalPatchResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& UniversalPatchResponse::message() const {
  // @@protoc_insertion_point(field_get:krclient.UniversalPatchResponse.Message)
  return _internal_message();
}
inline void UniversalPatchResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krclient.UniversalPatchResponse.Message)
}
inline std::string* UniversalPatchResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krclient.UniversalPatchResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& UniversalPatchResponse::_internal_message() const {
  return message_.Get();
}
inline void UniversalPatchResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UniversalPatchResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krclient.UniversalPatchResponse.Message)
}
inline void UniversalPatchResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krclient.UniversalPatchResponse.Message)
}
inline void UniversalPatchResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krclient.UniversalPatchResponse.Message)
}
inline std::string* UniversalPatchResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UniversalPatchResponse::release_message() {
  // @@protoc_insertion_point(field_release:krclient.UniversalPatchResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UniversalPatchResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krclient.UniversalPatchResponse.Message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace krclient

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_2eproto
