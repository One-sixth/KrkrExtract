// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientUniversalPatchMakeChecked.proto

#include "ClientUniversalPatchMakeChecked.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class ClientUniversalPatchMakeCheckedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientUniversalPatchMakeChecked> _instance;
} _ClientUniversalPatchMakeChecked_default_instance_;
static void InitDefaultsscc_info_ClientUniversalPatchMakeChecked_ClientUniversalPatchMakeChecked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientUniversalPatchMakeChecked_default_instance_;
    new (ptr) ::ClientUniversalPatchMakeChecked();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientUniversalPatchMakeChecked::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientUniversalPatchMakeChecked_ClientUniversalPatchMakeChecked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientUniversalPatchMakeChecked_ClientUniversalPatchMakeChecked_2eproto}, {}};


// ===================================================================

void ClientUniversalPatchMakeChecked::InitAsDefaultInstance() {
}
class ClientUniversalPatchMakeChecked::_Internal {
 public:
};

ClientUniversalPatchMakeChecked::ClientUniversalPatchMakeChecked()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientUniversalPatchMakeChecked)
}
ClientUniversalPatchMakeChecked::ClientUniversalPatchMakeChecked(const ClientUniversalPatchMakeChecked& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sequenceid_, &from.sequenceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&icon_) -
    reinterpret_cast<char*>(&sequenceid_)) + sizeof(icon_));
  // @@protoc_insertion_point(copy_constructor:ClientUniversalPatchMakeChecked)
}

void ClientUniversalPatchMakeChecked::SharedCtor() {
  ::memset(&sequenceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&icon_) -
      reinterpret_cast<char*>(&sequenceid_)) + sizeof(icon_));
}

ClientUniversalPatchMakeChecked::~ClientUniversalPatchMakeChecked() {
  // @@protoc_insertion_point(destructor:ClientUniversalPatchMakeChecked)
  SharedDtor();
}

void ClientUniversalPatchMakeChecked::SharedDtor() {
}

void ClientUniversalPatchMakeChecked::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientUniversalPatchMakeChecked& ClientUniversalPatchMakeChecked::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientUniversalPatchMakeChecked_ClientUniversalPatchMakeChecked_2eproto.base);
  return *internal_default_instance();
}


void ClientUniversalPatchMakeChecked::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientUniversalPatchMakeChecked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequenceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&icon_) -
      reinterpret_cast<char*>(&sequenceid_)) + sizeof(icon_));
  _internal_metadata_.Clear();
}

const char* ClientUniversalPatchMakeChecked::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 SequenceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequenceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Protect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          protect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          icon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientUniversalPatchMakeChecked::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientUniversalPatchMakeChecked)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 SequenceId = 1;
  if (this->sequenceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sequenceid(), target);
  }

  // uint32 Protect = 2;
  if (this->protect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_protect(), target);
  }

  // uint32 Icon = 3;
  if (this->icon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_icon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientUniversalPatchMakeChecked)
  return target;
}

size_t ClientUniversalPatchMakeChecked::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientUniversalPatchMakeChecked)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 SequenceId = 1;
  if (this->sequenceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequenceid());
  }

  // uint32 Protect = 2;
  if (this->protect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protect());
  }

  // uint32 Icon = 3;
  if (this->icon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_icon());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientUniversalPatchMakeChecked::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientUniversalPatchMakeChecked*>(
      &from));
}

void ClientUniversalPatchMakeChecked::MergeFrom(const ClientUniversalPatchMakeChecked& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientUniversalPatchMakeChecked)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequenceid() != 0) {
    _internal_set_sequenceid(from._internal_sequenceid());
  }
  if (from.protect() != 0) {
    _internal_set_protect(from._internal_protect());
  }
  if (from.icon() != 0) {
    _internal_set_icon(from._internal_icon());
  }
}

void ClientUniversalPatchMakeChecked::CopyFrom(const ClientUniversalPatchMakeChecked& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientUniversalPatchMakeChecked)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientUniversalPatchMakeChecked::IsInitialized() const {
  return true;
}

void ClientUniversalPatchMakeChecked::InternalSwap(ClientUniversalPatchMakeChecked* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sequenceid_, other->sequenceid_);
  swap(protect_, other->protect_);
  swap(icon_, other->icon_);
}

std::string ClientUniversalPatchMakeChecked::GetTypeName() const {
  return "ClientUniversalPatchMakeChecked";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClientUniversalPatchMakeChecked* Arena::CreateMaybeMessage< ::ClientUniversalPatchMakeChecked >(Arena* arena) {
  return Arena::CreateInternal< ::ClientUniversalPatchMakeChecked >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
