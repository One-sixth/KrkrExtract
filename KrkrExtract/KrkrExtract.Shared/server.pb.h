// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace krserver {
class ServerCommandResultOutputRequest;
struct ServerCommandResultOutputRequestDefaultTypeInternal;
extern ServerCommandResultOutputRequestDefaultTypeInternal _ServerCommandResultOutputRequest_default_instance_;
class ServerCommandResultOutputResponse;
struct ServerCommandResultOutputResponseDefaultTypeInternal;
extern ServerCommandResultOutputResponseDefaultTypeInternal _ServerCommandResultOutputResponse_default_instance_;
class ServerExitFromRemoteProcessRequest;
struct ServerExitFromRemoteProcessRequestDefaultTypeInternal;
extern ServerExitFromRemoteProcessRequestDefaultTypeInternal _ServerExitFromRemoteProcessRequest_default_instance_;
class ServerExitFromRemoteProcessResponse;
struct ServerExitFromRemoteProcessResponseDefaultTypeInternal;
extern ServerExitFromRemoteProcessResponseDefaultTypeInternal _ServerExitFromRemoteProcessResponse_default_instance_;
class ServerLogOutputRequest;
struct ServerLogOutputRequestDefaultTypeInternal;
extern ServerLogOutputRequestDefaultTypeInternal _ServerLogOutputRequest_default_instance_;
class ServerLogOutputResponse;
struct ServerLogOutputResponseDefaultTypeInternal;
extern ServerLogOutputResponseDefaultTypeInternal _ServerLogOutputResponse_default_instance_;
class ServerMessageBoxRequest;
struct ServerMessageBoxRequestDefaultTypeInternal;
extern ServerMessageBoxRequestDefaultTypeInternal _ServerMessageBoxRequest_default_instance_;
class ServerMessageBoxResponse;
struct ServerMessageBoxResponseDefaultTypeInternal;
extern ServerMessageBoxResponseDefaultTypeInternal _ServerMessageBoxResponse_default_instance_;
class ServerProgressBarRequest;
struct ServerProgressBarRequestDefaultTypeInternal;
extern ServerProgressBarRequestDefaultTypeInternal _ServerProgressBarRequest_default_instance_;
class ServerProgressBarResponse;
struct ServerProgressBarResponseDefaultTypeInternal;
extern ServerProgressBarResponseDefaultTypeInternal _ServerProgressBarResponse_default_instance_;
class ServerTaskEndAndEnableUIRequest;
struct ServerTaskEndAndEnableUIRequestDefaultTypeInternal;
extern ServerTaskEndAndEnableUIRequestDefaultTypeInternal _ServerTaskEndAndEnableUIRequest_default_instance_;
class ServerTaskEndAndEnableUIResponse;
struct ServerTaskEndAndEnableUIResponseDefaultTypeInternal;
extern ServerTaskEndAndEnableUIResponseDefaultTypeInternal _ServerTaskEndAndEnableUIResponse_default_instance_;
class ServerTaskStartAndDisableUIRequest;
struct ServerTaskStartAndDisableUIRequestDefaultTypeInternal;
extern ServerTaskStartAndDisableUIRequestDefaultTypeInternal _ServerTaskStartAndDisableUIRequest_default_instance_;
class ServerTaskStartAndDisableUIResponse;
struct ServerTaskStartAndDisableUIResponseDefaultTypeInternal;
extern ServerTaskStartAndDisableUIResponseDefaultTypeInternal _ServerTaskStartAndDisableUIResponse_default_instance_;
class ServerUIHeartbeatPackageRequest;
struct ServerUIHeartbeatPackageRequestDefaultTypeInternal;
extern ServerUIHeartbeatPackageRequestDefaultTypeInternal _ServerUIHeartbeatPackageRequest_default_instance_;
class ServerUIHeartbeatPackageResponse;
struct ServerUIHeartbeatPackageResponseDefaultTypeInternal;
extern ServerUIHeartbeatPackageResponseDefaultTypeInternal _ServerUIHeartbeatPackageResponse_default_instance_;
class ServerUIReadyRequest;
struct ServerUIReadyRequestDefaultTypeInternal;
extern ServerUIReadyRequestDefaultTypeInternal _ServerUIReadyRequest_default_instance_;
class ServerUIReadyResponse;
struct ServerUIReadyResponseDefaultTypeInternal;
extern ServerUIReadyResponseDefaultTypeInternal _ServerUIReadyResponse_default_instance_;
}  // namespace krserver
PROTOBUF_NAMESPACE_OPEN
template<> ::krserver::ServerCommandResultOutputRequest* Arena::CreateMaybeMessage<::krserver::ServerCommandResultOutputRequest>(Arena*);
template<> ::krserver::ServerCommandResultOutputResponse* Arena::CreateMaybeMessage<::krserver::ServerCommandResultOutputResponse>(Arena*);
template<> ::krserver::ServerExitFromRemoteProcessRequest* Arena::CreateMaybeMessage<::krserver::ServerExitFromRemoteProcessRequest>(Arena*);
template<> ::krserver::ServerExitFromRemoteProcessResponse* Arena::CreateMaybeMessage<::krserver::ServerExitFromRemoteProcessResponse>(Arena*);
template<> ::krserver::ServerLogOutputRequest* Arena::CreateMaybeMessage<::krserver::ServerLogOutputRequest>(Arena*);
template<> ::krserver::ServerLogOutputResponse* Arena::CreateMaybeMessage<::krserver::ServerLogOutputResponse>(Arena*);
template<> ::krserver::ServerMessageBoxRequest* Arena::CreateMaybeMessage<::krserver::ServerMessageBoxRequest>(Arena*);
template<> ::krserver::ServerMessageBoxResponse* Arena::CreateMaybeMessage<::krserver::ServerMessageBoxResponse>(Arena*);
template<> ::krserver::ServerProgressBarRequest* Arena::CreateMaybeMessage<::krserver::ServerProgressBarRequest>(Arena*);
template<> ::krserver::ServerProgressBarResponse* Arena::CreateMaybeMessage<::krserver::ServerProgressBarResponse>(Arena*);
template<> ::krserver::ServerTaskEndAndEnableUIRequest* Arena::CreateMaybeMessage<::krserver::ServerTaskEndAndEnableUIRequest>(Arena*);
template<> ::krserver::ServerTaskEndAndEnableUIResponse* Arena::CreateMaybeMessage<::krserver::ServerTaskEndAndEnableUIResponse>(Arena*);
template<> ::krserver::ServerTaskStartAndDisableUIRequest* Arena::CreateMaybeMessage<::krserver::ServerTaskStartAndDisableUIRequest>(Arena*);
template<> ::krserver::ServerTaskStartAndDisableUIResponse* Arena::CreateMaybeMessage<::krserver::ServerTaskStartAndDisableUIResponse>(Arena*);
template<> ::krserver::ServerUIHeartbeatPackageRequest* Arena::CreateMaybeMessage<::krserver::ServerUIHeartbeatPackageRequest>(Arena*);
template<> ::krserver::ServerUIHeartbeatPackageResponse* Arena::CreateMaybeMessage<::krserver::ServerUIHeartbeatPackageResponse>(Arena*);
template<> ::krserver::ServerUIReadyRequest* Arena::CreateMaybeMessage<::krserver::ServerUIReadyRequest>(Arena*);
template<> ::krserver::ServerUIReadyResponse* Arena::CreateMaybeMessage<::krserver::ServerUIReadyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace krserver {

// ===================================================================

class ServerCommandResultOutputRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerCommandResultOutputRequest) */ {
 public:
  inline ServerCommandResultOutputRequest() : ServerCommandResultOutputRequest(nullptr) {}
  virtual ~ServerCommandResultOutputRequest();
  explicit constexpr ServerCommandResultOutputRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerCommandResultOutputRequest(const ServerCommandResultOutputRequest& from);
  ServerCommandResultOutputRequest(ServerCommandResultOutputRequest&& from) noexcept
    : ServerCommandResultOutputRequest() {
    *this = ::std::move(from);
  }

  inline ServerCommandResultOutputRequest& operator=(const ServerCommandResultOutputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerCommandResultOutputRequest& operator=(ServerCommandResultOutputRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerCommandResultOutputRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerCommandResultOutputRequest* internal_default_instance() {
    return reinterpret_cast<const ServerCommandResultOutputRequest*>(
               &_ServerCommandResultOutputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerCommandResultOutputRequest& a, ServerCommandResultOutputRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerCommandResultOutputRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerCommandResultOutputRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerCommandResultOutputRequest* New() const final {
    return CreateMaybeMessage<ServerCommandResultOutputRequest>(nullptr);
  }

  ServerCommandResultOutputRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerCommandResultOutputRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerCommandResultOutputRequest& from);
  void MergeFrom(const ServerCommandResultOutputRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerCommandResultOutputRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerCommandResultOutputRequest";
  }
  protected:
  explicit ServerCommandResultOutputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string Reply = 2;
  void clear_reply();
  const std::string& reply() const;
  void set_reply(const std::string& value);
  void set_reply(std::string&& value);
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  std::string* mutable_reply();
  std::string* release_reply();
  void set_allocated_reply(std::string* reply);
  private:
  const std::string& _internal_reply() const;
  void _internal_set_reply(const std::string& value);
  std::string* _internal_mutable_reply();
  public:

  // uint64 Status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint64 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerCommandResultOutputRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_;
  ::PROTOBUF_NAMESPACE_ID::uint64 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerCommandResultOutputResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerCommandResultOutputResponse) */ {
 public:
  inline ServerCommandResultOutputResponse() : ServerCommandResultOutputResponse(nullptr) {}
  virtual ~ServerCommandResultOutputResponse();
  explicit constexpr ServerCommandResultOutputResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerCommandResultOutputResponse(const ServerCommandResultOutputResponse& from);
  ServerCommandResultOutputResponse(ServerCommandResultOutputResponse&& from) noexcept
    : ServerCommandResultOutputResponse() {
    *this = ::std::move(from);
  }

  inline ServerCommandResultOutputResponse& operator=(const ServerCommandResultOutputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerCommandResultOutputResponse& operator=(ServerCommandResultOutputResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerCommandResultOutputResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerCommandResultOutputResponse* internal_default_instance() {
    return reinterpret_cast<const ServerCommandResultOutputResponse*>(
               &_ServerCommandResultOutputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerCommandResultOutputResponse& a, ServerCommandResultOutputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerCommandResultOutputResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerCommandResultOutputResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerCommandResultOutputResponse* New() const final {
    return CreateMaybeMessage<ServerCommandResultOutputResponse>(nullptr);
  }

  ServerCommandResultOutputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerCommandResultOutputResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerCommandResultOutputResponse& from);
  void MergeFrom(const ServerCommandResultOutputResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerCommandResultOutputResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerCommandResultOutputResponse";
  }
  protected:
  explicit ServerCommandResultOutputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerCommandResultOutputResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerExitFromRemoteProcessRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerExitFromRemoteProcessRequest) */ {
 public:
  inline ServerExitFromRemoteProcessRequest() : ServerExitFromRemoteProcessRequest(nullptr) {}
  virtual ~ServerExitFromRemoteProcessRequest();
  explicit constexpr ServerExitFromRemoteProcessRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerExitFromRemoteProcessRequest(const ServerExitFromRemoteProcessRequest& from);
  ServerExitFromRemoteProcessRequest(ServerExitFromRemoteProcessRequest&& from) noexcept
    : ServerExitFromRemoteProcessRequest() {
    *this = ::std::move(from);
  }

  inline ServerExitFromRemoteProcessRequest& operator=(const ServerExitFromRemoteProcessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerExitFromRemoteProcessRequest& operator=(ServerExitFromRemoteProcessRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerExitFromRemoteProcessRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerExitFromRemoteProcessRequest* internal_default_instance() {
    return reinterpret_cast<const ServerExitFromRemoteProcessRequest*>(
               &_ServerExitFromRemoteProcessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerExitFromRemoteProcessRequest& a, ServerExitFromRemoteProcessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerExitFromRemoteProcessRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerExitFromRemoteProcessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerExitFromRemoteProcessRequest* New() const final {
    return CreateMaybeMessage<ServerExitFromRemoteProcessRequest>(nullptr);
  }

  ServerExitFromRemoteProcessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerExitFromRemoteProcessRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerExitFromRemoteProcessRequest& from);
  void MergeFrom(const ServerExitFromRemoteProcessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerExitFromRemoteProcessRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerExitFromRemoteProcessRequest";
  }
  protected:
  explicit ServerExitFromRemoteProcessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:krserver.ServerExitFromRemoteProcessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerExitFromRemoteProcessResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerExitFromRemoteProcessResponse) */ {
 public:
  inline ServerExitFromRemoteProcessResponse() : ServerExitFromRemoteProcessResponse(nullptr) {}
  virtual ~ServerExitFromRemoteProcessResponse();
  explicit constexpr ServerExitFromRemoteProcessResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerExitFromRemoteProcessResponse(const ServerExitFromRemoteProcessResponse& from);
  ServerExitFromRemoteProcessResponse(ServerExitFromRemoteProcessResponse&& from) noexcept
    : ServerExitFromRemoteProcessResponse() {
    *this = ::std::move(from);
  }

  inline ServerExitFromRemoteProcessResponse& operator=(const ServerExitFromRemoteProcessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerExitFromRemoteProcessResponse& operator=(ServerExitFromRemoteProcessResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerExitFromRemoteProcessResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerExitFromRemoteProcessResponse* internal_default_instance() {
    return reinterpret_cast<const ServerExitFromRemoteProcessResponse*>(
               &_ServerExitFromRemoteProcessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerExitFromRemoteProcessResponse& a, ServerExitFromRemoteProcessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerExitFromRemoteProcessResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerExitFromRemoteProcessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerExitFromRemoteProcessResponse* New() const final {
    return CreateMaybeMessage<ServerExitFromRemoteProcessResponse>(nullptr);
  }

  ServerExitFromRemoteProcessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerExitFromRemoteProcessResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerExitFromRemoteProcessResponse& from);
  void MergeFrom(const ServerExitFromRemoteProcessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerExitFromRemoteProcessResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerExitFromRemoteProcessResponse";
  }
  protected:
  explicit ServerExitFromRemoteProcessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerExitFromRemoteProcessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerLogOutputRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerLogOutputRequest) */ {
 public:
  inline ServerLogOutputRequest() : ServerLogOutputRequest(nullptr) {}
  virtual ~ServerLogOutputRequest();
  explicit constexpr ServerLogOutputRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerLogOutputRequest(const ServerLogOutputRequest& from);
  ServerLogOutputRequest(ServerLogOutputRequest&& from) noexcept
    : ServerLogOutputRequest() {
    *this = ::std::move(from);
  }

  inline ServerLogOutputRequest& operator=(const ServerLogOutputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerLogOutputRequest& operator=(ServerLogOutputRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerLogOutputRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerLogOutputRequest* internal_default_instance() {
    return reinterpret_cast<const ServerLogOutputRequest*>(
               &_ServerLogOutputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerLogOutputRequest& a, ServerLogOutputRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerLogOutputRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerLogOutputRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerLogOutputRequest* New() const final {
    return CreateMaybeMessage<ServerLogOutputRequest>(nullptr);
  }

  ServerLogOutputRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerLogOutputRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerLogOutputRequest& from);
  void MergeFrom(const ServerLogOutputRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerLogOutputRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerLogOutputRequest";
  }
  protected:
  explicit ServerLogOutputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // string Command = 2;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // uint64 Level = 1;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint64 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerLogOutputRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::uint64 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerLogOutputResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerLogOutputResponse) */ {
 public:
  inline ServerLogOutputResponse() : ServerLogOutputResponse(nullptr) {}
  virtual ~ServerLogOutputResponse();
  explicit constexpr ServerLogOutputResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerLogOutputResponse(const ServerLogOutputResponse& from);
  ServerLogOutputResponse(ServerLogOutputResponse&& from) noexcept
    : ServerLogOutputResponse() {
    *this = ::std::move(from);
  }

  inline ServerLogOutputResponse& operator=(const ServerLogOutputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerLogOutputResponse& operator=(ServerLogOutputResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerLogOutputResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerLogOutputResponse* internal_default_instance() {
    return reinterpret_cast<const ServerLogOutputResponse*>(
               &_ServerLogOutputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServerLogOutputResponse& a, ServerLogOutputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerLogOutputResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerLogOutputResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerLogOutputResponse* New() const final {
    return CreateMaybeMessage<ServerLogOutputResponse>(nullptr);
  }

  ServerLogOutputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerLogOutputResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerLogOutputResponse& from);
  void MergeFrom(const ServerLogOutputResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerLogOutputResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerLogOutputResponse";
  }
  protected:
  explicit ServerLogOutputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerLogOutputResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerMessageBoxRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerMessageBoxRequest) */ {
 public:
  inline ServerMessageBoxRequest() : ServerMessageBoxRequest(nullptr) {}
  virtual ~ServerMessageBoxRequest();
  explicit constexpr ServerMessageBoxRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessageBoxRequest(const ServerMessageBoxRequest& from);
  ServerMessageBoxRequest(ServerMessageBoxRequest&& from) noexcept
    : ServerMessageBoxRequest() {
    *this = ::std::move(from);
  }

  inline ServerMessageBoxRequest& operator=(const ServerMessageBoxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessageBoxRequest& operator=(ServerMessageBoxRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerMessageBoxRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessageBoxRequest* internal_default_instance() {
    return reinterpret_cast<const ServerMessageBoxRequest*>(
               &_ServerMessageBoxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerMessageBoxRequest& a, ServerMessageBoxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessageBoxRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessageBoxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessageBoxRequest* New() const final {
    return CreateMaybeMessage<ServerMessageBoxRequest>(nullptr);
  }

  ServerMessageBoxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessageBoxRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerMessageBoxRequest& from);
  void MergeFrom(const ServerMessageBoxRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerMessageBoxRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerMessageBoxRequest";
  }
  protected:
  explicit ServerMessageBoxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kLockedFieldNumber = 3,
  };
  // string Description = 1;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 Flags = 2;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool Locked = 3;
  void clear_locked();
  bool locked() const;
  void set_locked(bool value);
  private:
  bool _internal_locked() const;
  void _internal_set_locked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerMessageBoxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  bool locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerMessageBoxResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerMessageBoxResponse) */ {
 public:
  inline ServerMessageBoxResponse() : ServerMessageBoxResponse(nullptr) {}
  virtual ~ServerMessageBoxResponse();
  explicit constexpr ServerMessageBoxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessageBoxResponse(const ServerMessageBoxResponse& from);
  ServerMessageBoxResponse(ServerMessageBoxResponse&& from) noexcept
    : ServerMessageBoxResponse() {
    *this = ::std::move(from);
  }

  inline ServerMessageBoxResponse& operator=(const ServerMessageBoxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessageBoxResponse& operator=(ServerMessageBoxResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerMessageBoxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessageBoxResponse* internal_default_instance() {
    return reinterpret_cast<const ServerMessageBoxResponse*>(
               &_ServerMessageBoxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServerMessageBoxResponse& a, ServerMessageBoxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessageBoxResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessageBoxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessageBoxResponse* New() const final {
    return CreateMaybeMessage<ServerMessageBoxResponse>(nullptr);
  }

  ServerMessageBoxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessageBoxResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerMessageBoxResponse& from);
  void MergeFrom(const ServerMessageBoxResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerMessageBoxResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerMessageBoxResponse";
  }
  protected:
  explicit ServerMessageBoxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerMessageBoxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerProgressBarRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerProgressBarRequest) */ {
 public:
  inline ServerProgressBarRequest() : ServerProgressBarRequest(nullptr) {}
  virtual ~ServerProgressBarRequest();
  explicit constexpr ServerProgressBarRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerProgressBarRequest(const ServerProgressBarRequest& from);
  ServerProgressBarRequest(ServerProgressBarRequest&& from) noexcept
    : ServerProgressBarRequest() {
    *this = ::std::move(from);
  }

  inline ServerProgressBarRequest& operator=(const ServerProgressBarRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerProgressBarRequest& operator=(ServerProgressBarRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerProgressBarRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerProgressBarRequest* internal_default_instance() {
    return reinterpret_cast<const ServerProgressBarRequest*>(
               &_ServerProgressBarRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServerProgressBarRequest& a, ServerProgressBarRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerProgressBarRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerProgressBarRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerProgressBarRequest* New() const final {
    return CreateMaybeMessage<ServerProgressBarRequest>(nullptr);
  }

  ServerProgressBarRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerProgressBarRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerProgressBarRequest& from);
  void MergeFrom(const ServerProgressBarRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerProgressBarRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerProgressBarRequest";
  }
  protected:
  explicit ServerProgressBarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskNameFieldNumber = 1,
    kCurrentFieldNumber = 2,
    kTotalFieldNumber = 3,
  };
  // string TaskName = 1;
  void clear_taskname();
  const std::string& taskname() const;
  void set_taskname(const std::string& value);
  void set_taskname(std::string&& value);
  void set_taskname(const char* value);
  void set_taskname(const char* value, size_t size);
  std::string* mutable_taskname();
  std::string* release_taskname();
  void set_allocated_taskname(std::string* taskname);
  private:
  const std::string& _internal_taskname() const;
  void _internal_set_taskname(const std::string& value);
  std::string* _internal_mutable_taskname();
  public:

  // uint64 Current = 2;
  void clear_current();
  ::PROTOBUF_NAMESPACE_ID::uint64 current() const;
  void set_current(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_current() const;
  void _internal_set_current(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 Total = 3;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint64 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerProgressBarRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 current_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerProgressBarResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerProgressBarResponse) */ {
 public:
  inline ServerProgressBarResponse() : ServerProgressBarResponse(nullptr) {}
  virtual ~ServerProgressBarResponse();
  explicit constexpr ServerProgressBarResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerProgressBarResponse(const ServerProgressBarResponse& from);
  ServerProgressBarResponse(ServerProgressBarResponse&& from) noexcept
    : ServerProgressBarResponse() {
    *this = ::std::move(from);
  }

  inline ServerProgressBarResponse& operator=(const ServerProgressBarResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerProgressBarResponse& operator=(ServerProgressBarResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerProgressBarResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerProgressBarResponse* internal_default_instance() {
    return reinterpret_cast<const ServerProgressBarResponse*>(
               &_ServerProgressBarResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ServerProgressBarResponse& a, ServerProgressBarResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerProgressBarResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerProgressBarResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerProgressBarResponse* New() const final {
    return CreateMaybeMessage<ServerProgressBarResponse>(nullptr);
  }

  ServerProgressBarResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerProgressBarResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerProgressBarResponse& from);
  void MergeFrom(const ServerProgressBarResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerProgressBarResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerProgressBarResponse";
  }
  protected:
  explicit ServerProgressBarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerProgressBarResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerTaskEndAndEnableUIRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerTaskEndAndEnableUIRequest) */ {
 public:
  inline ServerTaskEndAndEnableUIRequest() : ServerTaskEndAndEnableUIRequest(nullptr) {}
  virtual ~ServerTaskEndAndEnableUIRequest();
  explicit constexpr ServerTaskEndAndEnableUIRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerTaskEndAndEnableUIRequest(const ServerTaskEndAndEnableUIRequest& from);
  ServerTaskEndAndEnableUIRequest(ServerTaskEndAndEnableUIRequest&& from) noexcept
    : ServerTaskEndAndEnableUIRequest() {
    *this = ::std::move(from);
  }

  inline ServerTaskEndAndEnableUIRequest& operator=(const ServerTaskEndAndEnableUIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerTaskEndAndEnableUIRequest& operator=(ServerTaskEndAndEnableUIRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerTaskEndAndEnableUIRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerTaskEndAndEnableUIRequest* internal_default_instance() {
    return reinterpret_cast<const ServerTaskEndAndEnableUIRequest*>(
               &_ServerTaskEndAndEnableUIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ServerTaskEndAndEnableUIRequest& a, ServerTaskEndAndEnableUIRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerTaskEndAndEnableUIRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerTaskEndAndEnableUIRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerTaskEndAndEnableUIRequest* New() const final {
    return CreateMaybeMessage<ServerTaskEndAndEnableUIRequest>(nullptr);
  }

  ServerTaskEndAndEnableUIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerTaskEndAndEnableUIRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerTaskEndAndEnableUIRequest& from);
  void MergeFrom(const ServerTaskEndAndEnableUIRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerTaskEndAndEnableUIRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerTaskEndAndEnableUIRequest";
  }
  protected:
  explicit ServerTaskEndAndEnableUIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kTaskCompleteStatusFieldNumber = 1,
  };
  // string Description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bool TaskCompleteStatus = 1;
  void clear_taskcompletestatus();
  bool taskcompletestatus() const;
  void set_taskcompletestatus(bool value);
  private:
  bool _internal_taskcompletestatus() const;
  void _internal_set_taskcompletestatus(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerTaskEndAndEnableUIRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool taskcompletestatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerTaskEndAndEnableUIResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerTaskEndAndEnableUIResponse) */ {
 public:
  inline ServerTaskEndAndEnableUIResponse() : ServerTaskEndAndEnableUIResponse(nullptr) {}
  virtual ~ServerTaskEndAndEnableUIResponse();
  explicit constexpr ServerTaskEndAndEnableUIResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerTaskEndAndEnableUIResponse(const ServerTaskEndAndEnableUIResponse& from);
  ServerTaskEndAndEnableUIResponse(ServerTaskEndAndEnableUIResponse&& from) noexcept
    : ServerTaskEndAndEnableUIResponse() {
    *this = ::std::move(from);
  }

  inline ServerTaskEndAndEnableUIResponse& operator=(const ServerTaskEndAndEnableUIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerTaskEndAndEnableUIResponse& operator=(ServerTaskEndAndEnableUIResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerTaskEndAndEnableUIResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerTaskEndAndEnableUIResponse* internal_default_instance() {
    return reinterpret_cast<const ServerTaskEndAndEnableUIResponse*>(
               &_ServerTaskEndAndEnableUIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ServerTaskEndAndEnableUIResponse& a, ServerTaskEndAndEnableUIResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerTaskEndAndEnableUIResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerTaskEndAndEnableUIResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerTaskEndAndEnableUIResponse* New() const final {
    return CreateMaybeMessage<ServerTaskEndAndEnableUIResponse>(nullptr);
  }

  ServerTaskEndAndEnableUIResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerTaskEndAndEnableUIResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerTaskEndAndEnableUIResponse& from);
  void MergeFrom(const ServerTaskEndAndEnableUIResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerTaskEndAndEnableUIResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerTaskEndAndEnableUIResponse";
  }
  protected:
  explicit ServerTaskEndAndEnableUIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerTaskEndAndEnableUIResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerTaskStartAndDisableUIRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerTaskStartAndDisableUIRequest) */ {
 public:
  inline ServerTaskStartAndDisableUIRequest() : ServerTaskStartAndDisableUIRequest(nullptr) {}
  virtual ~ServerTaskStartAndDisableUIRequest();
  explicit constexpr ServerTaskStartAndDisableUIRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerTaskStartAndDisableUIRequest(const ServerTaskStartAndDisableUIRequest& from);
  ServerTaskStartAndDisableUIRequest(ServerTaskStartAndDisableUIRequest&& from) noexcept
    : ServerTaskStartAndDisableUIRequest() {
    *this = ::std::move(from);
  }

  inline ServerTaskStartAndDisableUIRequest& operator=(const ServerTaskStartAndDisableUIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerTaskStartAndDisableUIRequest& operator=(ServerTaskStartAndDisableUIRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerTaskStartAndDisableUIRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerTaskStartAndDisableUIRequest* internal_default_instance() {
    return reinterpret_cast<const ServerTaskStartAndDisableUIRequest*>(
               &_ServerTaskStartAndDisableUIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ServerTaskStartAndDisableUIRequest& a, ServerTaskStartAndDisableUIRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerTaskStartAndDisableUIRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerTaskStartAndDisableUIRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerTaskStartAndDisableUIRequest* New() const final {
    return CreateMaybeMessage<ServerTaskStartAndDisableUIRequest>(nullptr);
  }

  ServerTaskStartAndDisableUIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerTaskStartAndDisableUIRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerTaskStartAndDisableUIRequest& from);
  void MergeFrom(const ServerTaskStartAndDisableUIRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerTaskStartAndDisableUIRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerTaskStartAndDisableUIRequest";
  }
  protected:
  explicit ServerTaskStartAndDisableUIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:krserver.ServerTaskStartAndDisableUIRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerTaskStartAndDisableUIResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerTaskStartAndDisableUIResponse) */ {
 public:
  inline ServerTaskStartAndDisableUIResponse() : ServerTaskStartAndDisableUIResponse(nullptr) {}
  virtual ~ServerTaskStartAndDisableUIResponse();
  explicit constexpr ServerTaskStartAndDisableUIResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerTaskStartAndDisableUIResponse(const ServerTaskStartAndDisableUIResponse& from);
  ServerTaskStartAndDisableUIResponse(ServerTaskStartAndDisableUIResponse&& from) noexcept
    : ServerTaskStartAndDisableUIResponse() {
    *this = ::std::move(from);
  }

  inline ServerTaskStartAndDisableUIResponse& operator=(const ServerTaskStartAndDisableUIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerTaskStartAndDisableUIResponse& operator=(ServerTaskStartAndDisableUIResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerTaskStartAndDisableUIResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerTaskStartAndDisableUIResponse* internal_default_instance() {
    return reinterpret_cast<const ServerTaskStartAndDisableUIResponse*>(
               &_ServerTaskStartAndDisableUIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ServerTaskStartAndDisableUIResponse& a, ServerTaskStartAndDisableUIResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerTaskStartAndDisableUIResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerTaskStartAndDisableUIResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerTaskStartAndDisableUIResponse* New() const final {
    return CreateMaybeMessage<ServerTaskStartAndDisableUIResponse>(nullptr);
  }

  ServerTaskStartAndDisableUIResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerTaskStartAndDisableUIResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerTaskStartAndDisableUIResponse& from);
  void MergeFrom(const ServerTaskStartAndDisableUIResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerTaskStartAndDisableUIResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerTaskStartAndDisableUIResponse";
  }
  protected:
  explicit ServerTaskStartAndDisableUIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerTaskStartAndDisableUIResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerUIHeartbeatPackageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerUIHeartbeatPackageRequest) */ {
 public:
  inline ServerUIHeartbeatPackageRequest() : ServerUIHeartbeatPackageRequest(nullptr) {}
  virtual ~ServerUIHeartbeatPackageRequest();
  explicit constexpr ServerUIHeartbeatPackageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerUIHeartbeatPackageRequest(const ServerUIHeartbeatPackageRequest& from);
  ServerUIHeartbeatPackageRequest(ServerUIHeartbeatPackageRequest&& from) noexcept
    : ServerUIHeartbeatPackageRequest() {
    *this = ::std::move(from);
  }

  inline ServerUIHeartbeatPackageRequest& operator=(const ServerUIHeartbeatPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerUIHeartbeatPackageRequest& operator=(ServerUIHeartbeatPackageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerUIHeartbeatPackageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerUIHeartbeatPackageRequest* internal_default_instance() {
    return reinterpret_cast<const ServerUIHeartbeatPackageRequest*>(
               &_ServerUIHeartbeatPackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ServerUIHeartbeatPackageRequest& a, ServerUIHeartbeatPackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerUIHeartbeatPackageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerUIHeartbeatPackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerUIHeartbeatPackageRequest* New() const final {
    return CreateMaybeMessage<ServerUIHeartbeatPackageRequest>(nullptr);
  }

  ServerUIHeartbeatPackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerUIHeartbeatPackageRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerUIHeartbeatPackageRequest& from);
  void MergeFrom(const ServerUIHeartbeatPackageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerUIHeartbeatPackageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerUIHeartbeatPackageRequest";
  }
  protected:
  explicit ServerUIHeartbeatPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:krserver.ServerUIHeartbeatPackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerUIHeartbeatPackageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerUIHeartbeatPackageResponse) */ {
 public:
  inline ServerUIHeartbeatPackageResponse() : ServerUIHeartbeatPackageResponse(nullptr) {}
  virtual ~ServerUIHeartbeatPackageResponse();
  explicit constexpr ServerUIHeartbeatPackageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerUIHeartbeatPackageResponse(const ServerUIHeartbeatPackageResponse& from);
  ServerUIHeartbeatPackageResponse(ServerUIHeartbeatPackageResponse&& from) noexcept
    : ServerUIHeartbeatPackageResponse() {
    *this = ::std::move(from);
  }

  inline ServerUIHeartbeatPackageResponse& operator=(const ServerUIHeartbeatPackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerUIHeartbeatPackageResponse& operator=(ServerUIHeartbeatPackageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerUIHeartbeatPackageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerUIHeartbeatPackageResponse* internal_default_instance() {
    return reinterpret_cast<const ServerUIHeartbeatPackageResponse*>(
               &_ServerUIHeartbeatPackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ServerUIHeartbeatPackageResponse& a, ServerUIHeartbeatPackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerUIHeartbeatPackageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerUIHeartbeatPackageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerUIHeartbeatPackageResponse* New() const final {
    return CreateMaybeMessage<ServerUIHeartbeatPackageResponse>(nullptr);
  }

  ServerUIHeartbeatPackageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerUIHeartbeatPackageResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerUIHeartbeatPackageResponse& from);
  void MergeFrom(const ServerUIHeartbeatPackageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerUIHeartbeatPackageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerUIHeartbeatPackageResponse";
  }
  protected:
  explicit ServerUIHeartbeatPackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:krserver.ServerUIHeartbeatPackageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerUIReadyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerUIReadyRequest) */ {
 public:
  inline ServerUIReadyRequest() : ServerUIReadyRequest(nullptr) {}
  virtual ~ServerUIReadyRequest();
  explicit constexpr ServerUIReadyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerUIReadyRequest(const ServerUIReadyRequest& from);
  ServerUIReadyRequest(ServerUIReadyRequest&& from) noexcept
    : ServerUIReadyRequest() {
    *this = ::std::move(from);
  }

  inline ServerUIReadyRequest& operator=(const ServerUIReadyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerUIReadyRequest& operator=(ServerUIReadyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerUIReadyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerUIReadyRequest* internal_default_instance() {
    return reinterpret_cast<const ServerUIReadyRequest*>(
               &_ServerUIReadyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ServerUIReadyRequest& a, ServerUIReadyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerUIReadyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerUIReadyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerUIReadyRequest* New() const final {
    return CreateMaybeMessage<ServerUIReadyRequest>(nullptr);
  }

  ServerUIReadyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerUIReadyRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerUIReadyRequest& from);
  void MergeFrom(const ServerUIReadyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerUIReadyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerUIReadyRequest";
  }
  protected:
  explicit ServerUIReadyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 2,
    kClientPortFieldNumber = 1,
    kExtraFieldNumber = 3,
  };
  // string SessionKey = 2;
  void clear_sessionkey();
  const std::string& sessionkey() const;
  void set_sessionkey(const std::string& value);
  void set_sessionkey(std::string&& value);
  void set_sessionkey(const char* value);
  void set_sessionkey(const char* value, size_t size);
  std::string* mutable_sessionkey();
  std::string* release_sessionkey();
  void set_allocated_sessionkey(std::string* sessionkey);
  private:
  const std::string& _internal_sessionkey() const;
  void _internal_set_sessionkey(const std::string& value);
  std::string* _internal_mutable_sessionkey();
  public:

  // uint32 ClientPort = 1;
  void clear_clientport();
  ::PROTOBUF_NAMESPACE_ID::uint32 clientport() const;
  void set_clientport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_clientport() const;
  void _internal_set_clientport(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Extra = 3;
  void clear_extra();
  ::PROTOBUF_NAMESPACE_ID::uint32 extra() const;
  void set_extra(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_extra() const;
  void _internal_set_extra(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerUIReadyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionkey_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clientport_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class ServerUIReadyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:krserver.ServerUIReadyResponse) */ {
 public:
  inline ServerUIReadyResponse() : ServerUIReadyResponse(nullptr) {}
  virtual ~ServerUIReadyResponse();
  explicit constexpr ServerUIReadyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerUIReadyResponse(const ServerUIReadyResponse& from);
  ServerUIReadyResponse(ServerUIReadyResponse&& from) noexcept
    : ServerUIReadyResponse() {
    *this = ::std::move(from);
  }

  inline ServerUIReadyResponse& operator=(const ServerUIReadyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerUIReadyResponse& operator=(ServerUIReadyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerUIReadyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerUIReadyResponse* internal_default_instance() {
    return reinterpret_cast<const ServerUIReadyResponse*>(
               &_ServerUIReadyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ServerUIReadyResponse& a, ServerUIReadyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerUIReadyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerUIReadyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerUIReadyResponse* New() const final {
    return CreateMaybeMessage<ServerUIReadyResponse>(nullptr);
  }

  ServerUIReadyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerUIReadyResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerUIReadyResponse& from);
  void MergeFrom(const ServerUIReadyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerUIReadyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "krserver.ServerUIReadyResponse";
  }
  protected:
  explicit ServerUIReadyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kHeartbeatIntervalFieldNumber = 3,
  };
  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // uint32 HeartbeatInterval = 3;
  void clear_heartbeatinterval();
  ::PROTOBUF_NAMESPACE_ID::uint32 heartbeatinterval() const;
  void set_heartbeatinterval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heartbeatinterval() const;
  void _internal_set_heartbeatinterval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:krserver.ServerUIReadyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heartbeatinterval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerCommandResultOutputRequest

// uint64 Status = 1;
inline void ServerCommandResultOutputRequest::clear_status() {
  status_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerCommandResultOutputRequest::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerCommandResultOutputRequest::status() const {
  // @@protoc_insertion_point(field_get:krserver.ServerCommandResultOutputRequest.Status)
  return _internal_status();
}
inline void ServerCommandResultOutputRequest::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  status_ = value;
}
inline void ServerCommandResultOutputRequest::set_status(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:krserver.ServerCommandResultOutputRequest.Status)
}

// string Reply = 2;
inline void ServerCommandResultOutputRequest::clear_reply() {
  reply_.ClearToEmpty();
}
inline const std::string& ServerCommandResultOutputRequest::reply() const {
  // @@protoc_insertion_point(field_get:krserver.ServerCommandResultOutputRequest.Reply)
  return _internal_reply();
}
inline void ServerCommandResultOutputRequest::set_reply(const std::string& value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:krserver.ServerCommandResultOutputRequest.Reply)
}
inline std::string* ServerCommandResultOutputRequest::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerCommandResultOutputRequest.Reply)
  return _internal_mutable_reply();
}
inline const std::string& ServerCommandResultOutputRequest::_internal_reply() const {
  return reply_.Get();
}
inline void ServerCommandResultOutputRequest::_internal_set_reply(const std::string& value) {
  
  reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerCommandResultOutputRequest::set_reply(std::string&& value) {
  
  reply_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerCommandResultOutputRequest.Reply)
}
inline void ServerCommandResultOutputRequest::set_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerCommandResultOutputRequest.Reply)
}
inline void ServerCommandResultOutputRequest::set_reply(const char* value,
    size_t size) {
  
  reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerCommandResultOutputRequest.Reply)
}
inline std::string* ServerCommandResultOutputRequest::_internal_mutable_reply() {
  
  return reply_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerCommandResultOutputRequest::release_reply() {
  // @@protoc_insertion_point(field_release:krserver.ServerCommandResultOutputRequest.Reply)
  return reply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerCommandResultOutputRequest::set_allocated_reply(std::string* reply) {
  if (reply != nullptr) {
    
  } else {
    
  }
  reply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerCommandResultOutputRequest.Reply)
}

// -------------------------------------------------------------------

// ServerCommandResultOutputResponse

// bool Success = 1;
inline void ServerCommandResultOutputResponse::clear_success() {
  success_ = false;
}
inline bool ServerCommandResultOutputResponse::_internal_success() const {
  return success_;
}
inline bool ServerCommandResultOutputResponse::success() const {
  // @@protoc_insertion_point(field_get:krserver.ServerCommandResultOutputResponse.Success)
  return _internal_success();
}
inline void ServerCommandResultOutputResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ServerCommandResultOutputResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krserver.ServerCommandResultOutputResponse.Success)
}

// string Message = 2;
inline void ServerCommandResultOutputResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ServerCommandResultOutputResponse::message() const {
  // @@protoc_insertion_point(field_get:krserver.ServerCommandResultOutputResponse.Message)
  return _internal_message();
}
inline void ServerCommandResultOutputResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krserver.ServerCommandResultOutputResponse.Message)
}
inline std::string* ServerCommandResultOutputResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerCommandResultOutputResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& ServerCommandResultOutputResponse::_internal_message() const {
  return message_.Get();
}
inline void ServerCommandResultOutputResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerCommandResultOutputResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerCommandResultOutputResponse.Message)
}
inline void ServerCommandResultOutputResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerCommandResultOutputResponse.Message)
}
inline void ServerCommandResultOutputResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerCommandResultOutputResponse.Message)
}
inline std::string* ServerCommandResultOutputResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerCommandResultOutputResponse::release_message() {
  // @@protoc_insertion_point(field_release:krserver.ServerCommandResultOutputResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerCommandResultOutputResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerCommandResultOutputResponse.Message)
}

// -------------------------------------------------------------------

// ServerExitFromRemoteProcessRequest

// -------------------------------------------------------------------

// ServerExitFromRemoteProcessResponse

// bool Success = 1;
inline void ServerExitFromRemoteProcessResponse::clear_success() {
  success_ = false;
}
inline bool ServerExitFromRemoteProcessResponse::_internal_success() const {
  return success_;
}
inline bool ServerExitFromRemoteProcessResponse::success() const {
  // @@protoc_insertion_point(field_get:krserver.ServerExitFromRemoteProcessResponse.Success)
  return _internal_success();
}
inline void ServerExitFromRemoteProcessResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ServerExitFromRemoteProcessResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krserver.ServerExitFromRemoteProcessResponse.Success)
}

// string Message = 2;
inline void ServerExitFromRemoteProcessResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ServerExitFromRemoteProcessResponse::message() const {
  // @@protoc_insertion_point(field_get:krserver.ServerExitFromRemoteProcessResponse.Message)
  return _internal_message();
}
inline void ServerExitFromRemoteProcessResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krserver.ServerExitFromRemoteProcessResponse.Message)
}
inline std::string* ServerExitFromRemoteProcessResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerExitFromRemoteProcessResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& ServerExitFromRemoteProcessResponse::_internal_message() const {
  return message_.Get();
}
inline void ServerExitFromRemoteProcessResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerExitFromRemoteProcessResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerExitFromRemoteProcessResponse.Message)
}
inline void ServerExitFromRemoteProcessResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerExitFromRemoteProcessResponse.Message)
}
inline void ServerExitFromRemoteProcessResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerExitFromRemoteProcessResponse.Message)
}
inline std::string* ServerExitFromRemoteProcessResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerExitFromRemoteProcessResponse::release_message() {
  // @@protoc_insertion_point(field_release:krserver.ServerExitFromRemoteProcessResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerExitFromRemoteProcessResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerExitFromRemoteProcessResponse.Message)
}

// -------------------------------------------------------------------

// ServerLogOutputRequest

// uint64 Level = 1;
inline void ServerLogOutputRequest::clear_level() {
  level_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerLogOutputRequest::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerLogOutputRequest::level() const {
  // @@protoc_insertion_point(field_get:krserver.ServerLogOutputRequest.Level)
  return _internal_level();
}
inline void ServerLogOutputRequest::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  level_ = value;
}
inline void ServerLogOutputRequest::set_level(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:krserver.ServerLogOutputRequest.Level)
}

// string Command = 2;
inline void ServerLogOutputRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& ServerLogOutputRequest::command() const {
  // @@protoc_insertion_point(field_get:krserver.ServerLogOutputRequest.Command)
  return _internal_command();
}
inline void ServerLogOutputRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:krserver.ServerLogOutputRequest.Command)
}
inline std::string* ServerLogOutputRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerLogOutputRequest.Command)
  return _internal_mutable_command();
}
inline const std::string& ServerLogOutputRequest::_internal_command() const {
  return command_.Get();
}
inline void ServerLogOutputRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerLogOutputRequest::set_command(std::string&& value) {
  
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerLogOutputRequest.Command)
}
inline void ServerLogOutputRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerLogOutputRequest.Command)
}
inline void ServerLogOutputRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerLogOutputRequest.Command)
}
inline std::string* ServerLogOutputRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerLogOutputRequest::release_command() {
  // @@protoc_insertion_point(field_release:krserver.ServerLogOutputRequest.Command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerLogOutputRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerLogOutputRequest.Command)
}

// -------------------------------------------------------------------

// ServerLogOutputResponse

// bool Success = 1;
inline void ServerLogOutputResponse::clear_success() {
  success_ = false;
}
inline bool ServerLogOutputResponse::_internal_success() const {
  return success_;
}
inline bool ServerLogOutputResponse::success() const {
  // @@protoc_insertion_point(field_get:krserver.ServerLogOutputResponse.Success)
  return _internal_success();
}
inline void ServerLogOutputResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ServerLogOutputResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krserver.ServerLogOutputResponse.Success)
}

// string Message = 2;
inline void ServerLogOutputResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ServerLogOutputResponse::message() const {
  // @@protoc_insertion_point(field_get:krserver.ServerLogOutputResponse.Message)
  return _internal_message();
}
inline void ServerLogOutputResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krserver.ServerLogOutputResponse.Message)
}
inline std::string* ServerLogOutputResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerLogOutputResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& ServerLogOutputResponse::_internal_message() const {
  return message_.Get();
}
inline void ServerLogOutputResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerLogOutputResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerLogOutputResponse.Message)
}
inline void ServerLogOutputResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerLogOutputResponse.Message)
}
inline void ServerLogOutputResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerLogOutputResponse.Message)
}
inline std::string* ServerLogOutputResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerLogOutputResponse::release_message() {
  // @@protoc_insertion_point(field_release:krserver.ServerLogOutputResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerLogOutputResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerLogOutputResponse.Message)
}

// -------------------------------------------------------------------

// ServerMessageBoxRequest

// string Description = 1;
inline void ServerMessageBoxRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ServerMessageBoxRequest::description() const {
  // @@protoc_insertion_point(field_get:krserver.ServerMessageBoxRequest.Description)
  return _internal_description();
}
inline void ServerMessageBoxRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:krserver.ServerMessageBoxRequest.Description)
}
inline std::string* ServerMessageBoxRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerMessageBoxRequest.Description)
  return _internal_mutable_description();
}
inline const std::string& ServerMessageBoxRequest::_internal_description() const {
  return description_.Get();
}
inline void ServerMessageBoxRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerMessageBoxRequest::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerMessageBoxRequest.Description)
}
inline void ServerMessageBoxRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerMessageBoxRequest.Description)
}
inline void ServerMessageBoxRequest::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerMessageBoxRequest.Description)
}
inline std::string* ServerMessageBoxRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerMessageBoxRequest::release_description() {
  // @@protoc_insertion_point(field_release:krserver.ServerMessageBoxRequest.Description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerMessageBoxRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerMessageBoxRequest.Description)
}

// uint32 Flags = 2;
inline void ServerMessageBoxRequest::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerMessageBoxRequest::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerMessageBoxRequest::flags() const {
  // @@protoc_insertion_point(field_get:krserver.ServerMessageBoxRequest.Flags)
  return _internal_flags();
}
inline void ServerMessageBoxRequest::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void ServerMessageBoxRequest::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:krserver.ServerMessageBoxRequest.Flags)
}

// bool Locked = 3;
inline void ServerMessageBoxRequest::clear_locked() {
  locked_ = false;
}
inline bool ServerMessageBoxRequest::_internal_locked() const {
  return locked_;
}
inline bool ServerMessageBoxRequest::locked() const {
  // @@protoc_insertion_point(field_get:krserver.ServerMessageBoxRequest.Locked)
  return _internal_locked();
}
inline void ServerMessageBoxRequest::_internal_set_locked(bool value) {
  
  locked_ = value;
}
inline void ServerMessageBoxRequest::set_locked(bool value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:krserver.ServerMessageBoxRequest.Locked)
}

// -------------------------------------------------------------------

// ServerMessageBoxResponse

// bool Success = 1;
inline void ServerMessageBoxResponse::clear_success() {
  success_ = false;
}
inline bool ServerMessageBoxResponse::_internal_success() const {
  return success_;
}
inline bool ServerMessageBoxResponse::success() const {
  // @@protoc_insertion_point(field_get:krserver.ServerMessageBoxResponse.Success)
  return _internal_success();
}
inline void ServerMessageBoxResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ServerMessageBoxResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krserver.ServerMessageBoxResponse.Success)
}

// string Message = 2;
inline void ServerMessageBoxResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ServerMessageBoxResponse::message() const {
  // @@protoc_insertion_point(field_get:krserver.ServerMessageBoxResponse.Message)
  return _internal_message();
}
inline void ServerMessageBoxResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krserver.ServerMessageBoxResponse.Message)
}
inline std::string* ServerMessageBoxResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerMessageBoxResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& ServerMessageBoxResponse::_internal_message() const {
  return message_.Get();
}
inline void ServerMessageBoxResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerMessageBoxResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerMessageBoxResponse.Message)
}
inline void ServerMessageBoxResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerMessageBoxResponse.Message)
}
inline void ServerMessageBoxResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerMessageBoxResponse.Message)
}
inline std::string* ServerMessageBoxResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerMessageBoxResponse::release_message() {
  // @@protoc_insertion_point(field_release:krserver.ServerMessageBoxResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerMessageBoxResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerMessageBoxResponse.Message)
}

// -------------------------------------------------------------------

// ServerProgressBarRequest

// string TaskName = 1;
inline void ServerProgressBarRequest::clear_taskname() {
  taskname_.ClearToEmpty();
}
inline const std::string& ServerProgressBarRequest::taskname() const {
  // @@protoc_insertion_point(field_get:krserver.ServerProgressBarRequest.TaskName)
  return _internal_taskname();
}
inline void ServerProgressBarRequest::set_taskname(const std::string& value) {
  _internal_set_taskname(value);
  // @@protoc_insertion_point(field_set:krserver.ServerProgressBarRequest.TaskName)
}
inline std::string* ServerProgressBarRequest::mutable_taskname() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerProgressBarRequest.TaskName)
  return _internal_mutable_taskname();
}
inline const std::string& ServerProgressBarRequest::_internal_taskname() const {
  return taskname_.Get();
}
inline void ServerProgressBarRequest::_internal_set_taskname(const std::string& value) {
  
  taskname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerProgressBarRequest::set_taskname(std::string&& value) {
  
  taskname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerProgressBarRequest.TaskName)
}
inline void ServerProgressBarRequest::set_taskname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerProgressBarRequest.TaskName)
}
inline void ServerProgressBarRequest::set_taskname(const char* value,
    size_t size) {
  
  taskname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerProgressBarRequest.TaskName)
}
inline std::string* ServerProgressBarRequest::_internal_mutable_taskname() {
  
  return taskname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerProgressBarRequest::release_taskname() {
  // @@protoc_insertion_point(field_release:krserver.ServerProgressBarRequest.TaskName)
  return taskname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerProgressBarRequest::set_allocated_taskname(std::string* taskname) {
  if (taskname != nullptr) {
    
  } else {
    
  }
  taskname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerProgressBarRequest.TaskName)
}

// uint64 Current = 2;
inline void ServerProgressBarRequest::clear_current() {
  current_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerProgressBarRequest::_internal_current() const {
  return current_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerProgressBarRequest::current() const {
  // @@protoc_insertion_point(field_get:krserver.ServerProgressBarRequest.Current)
  return _internal_current();
}
inline void ServerProgressBarRequest::_internal_set_current(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  current_ = value;
}
inline void ServerProgressBarRequest::set_current(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:krserver.ServerProgressBarRequest.Current)
}

// uint64 Total = 3;
inline void ServerProgressBarRequest::clear_total() {
  total_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerProgressBarRequest::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServerProgressBarRequest::total() const {
  // @@protoc_insertion_point(field_get:krserver.ServerProgressBarRequest.Total)
  return _internal_total();
}
inline void ServerProgressBarRequest::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_ = value;
}
inline void ServerProgressBarRequest::set_total(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:krserver.ServerProgressBarRequest.Total)
}

// -------------------------------------------------------------------

// ServerProgressBarResponse

// bool Success = 1;
inline void ServerProgressBarResponse::clear_success() {
  success_ = false;
}
inline bool ServerProgressBarResponse::_internal_success() const {
  return success_;
}
inline bool ServerProgressBarResponse::success() const {
  // @@protoc_insertion_point(field_get:krserver.ServerProgressBarResponse.Success)
  return _internal_success();
}
inline void ServerProgressBarResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ServerProgressBarResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krserver.ServerProgressBarResponse.Success)
}

// string Message = 2;
inline void ServerProgressBarResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ServerProgressBarResponse::message() const {
  // @@protoc_insertion_point(field_get:krserver.ServerProgressBarResponse.Message)
  return _internal_message();
}
inline void ServerProgressBarResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krserver.ServerProgressBarResponse.Message)
}
inline std::string* ServerProgressBarResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerProgressBarResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& ServerProgressBarResponse::_internal_message() const {
  return message_.Get();
}
inline void ServerProgressBarResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerProgressBarResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerProgressBarResponse.Message)
}
inline void ServerProgressBarResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerProgressBarResponse.Message)
}
inline void ServerProgressBarResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerProgressBarResponse.Message)
}
inline std::string* ServerProgressBarResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerProgressBarResponse::release_message() {
  // @@protoc_insertion_point(field_release:krserver.ServerProgressBarResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerProgressBarResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerProgressBarResponse.Message)
}

// -------------------------------------------------------------------

// ServerTaskEndAndEnableUIRequest

// bool TaskCompleteStatus = 1;
inline void ServerTaskEndAndEnableUIRequest::clear_taskcompletestatus() {
  taskcompletestatus_ = false;
}
inline bool ServerTaskEndAndEnableUIRequest::_internal_taskcompletestatus() const {
  return taskcompletestatus_;
}
inline bool ServerTaskEndAndEnableUIRequest::taskcompletestatus() const {
  // @@protoc_insertion_point(field_get:krserver.ServerTaskEndAndEnableUIRequest.TaskCompleteStatus)
  return _internal_taskcompletestatus();
}
inline void ServerTaskEndAndEnableUIRequest::_internal_set_taskcompletestatus(bool value) {
  
  taskcompletestatus_ = value;
}
inline void ServerTaskEndAndEnableUIRequest::set_taskcompletestatus(bool value) {
  _internal_set_taskcompletestatus(value);
  // @@protoc_insertion_point(field_set:krserver.ServerTaskEndAndEnableUIRequest.TaskCompleteStatus)
}

// string Description = 2;
inline void ServerTaskEndAndEnableUIRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ServerTaskEndAndEnableUIRequest::description() const {
  // @@protoc_insertion_point(field_get:krserver.ServerTaskEndAndEnableUIRequest.Description)
  return _internal_description();
}
inline void ServerTaskEndAndEnableUIRequest::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:krserver.ServerTaskEndAndEnableUIRequest.Description)
}
inline std::string* ServerTaskEndAndEnableUIRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerTaskEndAndEnableUIRequest.Description)
  return _internal_mutable_description();
}
inline const std::string& ServerTaskEndAndEnableUIRequest::_internal_description() const {
  return description_.Get();
}
inline void ServerTaskEndAndEnableUIRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerTaskEndAndEnableUIRequest::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerTaskEndAndEnableUIRequest.Description)
}
inline void ServerTaskEndAndEnableUIRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerTaskEndAndEnableUIRequest.Description)
}
inline void ServerTaskEndAndEnableUIRequest::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerTaskEndAndEnableUIRequest.Description)
}
inline std::string* ServerTaskEndAndEnableUIRequest::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerTaskEndAndEnableUIRequest::release_description() {
  // @@protoc_insertion_point(field_release:krserver.ServerTaskEndAndEnableUIRequest.Description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerTaskEndAndEnableUIRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerTaskEndAndEnableUIRequest.Description)
}

// -------------------------------------------------------------------

// ServerTaskEndAndEnableUIResponse

// bool Success = 1;
inline void ServerTaskEndAndEnableUIResponse::clear_success() {
  success_ = false;
}
inline bool ServerTaskEndAndEnableUIResponse::_internal_success() const {
  return success_;
}
inline bool ServerTaskEndAndEnableUIResponse::success() const {
  // @@protoc_insertion_point(field_get:krserver.ServerTaskEndAndEnableUIResponse.Success)
  return _internal_success();
}
inline void ServerTaskEndAndEnableUIResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ServerTaskEndAndEnableUIResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krserver.ServerTaskEndAndEnableUIResponse.Success)
}

// string Message = 2;
inline void ServerTaskEndAndEnableUIResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ServerTaskEndAndEnableUIResponse::message() const {
  // @@protoc_insertion_point(field_get:krserver.ServerTaskEndAndEnableUIResponse.Message)
  return _internal_message();
}
inline void ServerTaskEndAndEnableUIResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krserver.ServerTaskEndAndEnableUIResponse.Message)
}
inline std::string* ServerTaskEndAndEnableUIResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerTaskEndAndEnableUIResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& ServerTaskEndAndEnableUIResponse::_internal_message() const {
  return message_.Get();
}
inline void ServerTaskEndAndEnableUIResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerTaskEndAndEnableUIResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerTaskEndAndEnableUIResponse.Message)
}
inline void ServerTaskEndAndEnableUIResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerTaskEndAndEnableUIResponse.Message)
}
inline void ServerTaskEndAndEnableUIResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerTaskEndAndEnableUIResponse.Message)
}
inline std::string* ServerTaskEndAndEnableUIResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerTaskEndAndEnableUIResponse::release_message() {
  // @@protoc_insertion_point(field_release:krserver.ServerTaskEndAndEnableUIResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerTaskEndAndEnableUIResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerTaskEndAndEnableUIResponse.Message)
}

// -------------------------------------------------------------------

// ServerTaskStartAndDisableUIRequest

// -------------------------------------------------------------------

// ServerTaskStartAndDisableUIResponse

// bool Success = 1;
inline void ServerTaskStartAndDisableUIResponse::clear_success() {
  success_ = false;
}
inline bool ServerTaskStartAndDisableUIResponse::_internal_success() const {
  return success_;
}
inline bool ServerTaskStartAndDisableUIResponse::success() const {
  // @@protoc_insertion_point(field_get:krserver.ServerTaskStartAndDisableUIResponse.Success)
  return _internal_success();
}
inline void ServerTaskStartAndDisableUIResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ServerTaskStartAndDisableUIResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krserver.ServerTaskStartAndDisableUIResponse.Success)
}

// string Message = 2;
inline void ServerTaskStartAndDisableUIResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ServerTaskStartAndDisableUIResponse::message() const {
  // @@protoc_insertion_point(field_get:krserver.ServerTaskStartAndDisableUIResponse.Message)
  return _internal_message();
}
inline void ServerTaskStartAndDisableUIResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krserver.ServerTaskStartAndDisableUIResponse.Message)
}
inline std::string* ServerTaskStartAndDisableUIResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerTaskStartAndDisableUIResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& ServerTaskStartAndDisableUIResponse::_internal_message() const {
  return message_.Get();
}
inline void ServerTaskStartAndDisableUIResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerTaskStartAndDisableUIResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerTaskStartAndDisableUIResponse.Message)
}
inline void ServerTaskStartAndDisableUIResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerTaskStartAndDisableUIResponse.Message)
}
inline void ServerTaskStartAndDisableUIResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerTaskStartAndDisableUIResponse.Message)
}
inline std::string* ServerTaskStartAndDisableUIResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerTaskStartAndDisableUIResponse::release_message() {
  // @@protoc_insertion_point(field_release:krserver.ServerTaskStartAndDisableUIResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerTaskStartAndDisableUIResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerTaskStartAndDisableUIResponse.Message)
}

// -------------------------------------------------------------------

// ServerUIHeartbeatPackageRequest

// -------------------------------------------------------------------

// ServerUIHeartbeatPackageResponse

// -------------------------------------------------------------------

// ServerUIReadyRequest

// uint32 ClientPort = 1;
inline void ServerUIReadyRequest::clear_clientport() {
  clientport_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerUIReadyRequest::_internal_clientport() const {
  return clientport_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerUIReadyRequest::clientport() const {
  // @@protoc_insertion_point(field_get:krserver.ServerUIReadyRequest.ClientPort)
  return _internal_clientport();
}
inline void ServerUIReadyRequest::_internal_set_clientport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  clientport_ = value;
}
inline void ServerUIReadyRequest::set_clientport(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_clientport(value);
  // @@protoc_insertion_point(field_set:krserver.ServerUIReadyRequest.ClientPort)
}

// string SessionKey = 2;
inline void ServerUIReadyRequest::clear_sessionkey() {
  sessionkey_.ClearToEmpty();
}
inline const std::string& ServerUIReadyRequest::sessionkey() const {
  // @@protoc_insertion_point(field_get:krserver.ServerUIReadyRequest.SessionKey)
  return _internal_sessionkey();
}
inline void ServerUIReadyRequest::set_sessionkey(const std::string& value) {
  _internal_set_sessionkey(value);
  // @@protoc_insertion_point(field_set:krserver.ServerUIReadyRequest.SessionKey)
}
inline std::string* ServerUIReadyRequest::mutable_sessionkey() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerUIReadyRequest.SessionKey)
  return _internal_mutable_sessionkey();
}
inline const std::string& ServerUIReadyRequest::_internal_sessionkey() const {
  return sessionkey_.Get();
}
inline void ServerUIReadyRequest::_internal_set_sessionkey(const std::string& value) {
  
  sessionkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerUIReadyRequest::set_sessionkey(std::string&& value) {
  
  sessionkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerUIReadyRequest.SessionKey)
}
inline void ServerUIReadyRequest::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sessionkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerUIReadyRequest.SessionKey)
}
inline void ServerUIReadyRequest::set_sessionkey(const char* value,
    size_t size) {
  
  sessionkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerUIReadyRequest.SessionKey)
}
inline std::string* ServerUIReadyRequest::_internal_mutable_sessionkey() {
  
  return sessionkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerUIReadyRequest::release_sessionkey() {
  // @@protoc_insertion_point(field_release:krserver.ServerUIReadyRequest.SessionKey)
  return sessionkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerUIReadyRequest::set_allocated_sessionkey(std::string* sessionkey) {
  if (sessionkey != nullptr) {
    
  } else {
    
  }
  sessionkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sessionkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerUIReadyRequest.SessionKey)
}

// uint32 Extra = 3;
inline void ServerUIReadyRequest::clear_extra() {
  extra_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerUIReadyRequest::_internal_extra() const {
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerUIReadyRequest::extra() const {
  // @@protoc_insertion_point(field_get:krserver.ServerUIReadyRequest.Extra)
  return _internal_extra();
}
inline void ServerUIReadyRequest::_internal_set_extra(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  extra_ = value;
}
inline void ServerUIReadyRequest::set_extra(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_extra(value);
  // @@protoc_insertion_point(field_set:krserver.ServerUIReadyRequest.Extra)
}

// -------------------------------------------------------------------

// ServerUIReadyResponse

// bool Success = 1;
inline void ServerUIReadyResponse::clear_success() {
  success_ = false;
}
inline bool ServerUIReadyResponse::_internal_success() const {
  return success_;
}
inline bool ServerUIReadyResponse::success() const {
  // @@protoc_insertion_point(field_get:krserver.ServerUIReadyResponse.Success)
  return _internal_success();
}
inline void ServerUIReadyResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ServerUIReadyResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:krserver.ServerUIReadyResponse.Success)
}

// string Message = 2;
inline void ServerUIReadyResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ServerUIReadyResponse::message() const {
  // @@protoc_insertion_point(field_get:krserver.ServerUIReadyResponse.Message)
  return _internal_message();
}
inline void ServerUIReadyResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:krserver.ServerUIReadyResponse.Message)
}
inline std::string* ServerUIReadyResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:krserver.ServerUIReadyResponse.Message)
  return _internal_mutable_message();
}
inline const std::string& ServerUIReadyResponse::_internal_message() const {
  return message_.Get();
}
inline void ServerUIReadyResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerUIReadyResponse::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:krserver.ServerUIReadyResponse.Message)
}
inline void ServerUIReadyResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:krserver.ServerUIReadyResponse.Message)
}
inline void ServerUIReadyResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:krserver.ServerUIReadyResponse.Message)
}
inline std::string* ServerUIReadyResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerUIReadyResponse::release_message() {
  // @@protoc_insertion_point(field_release:krserver.ServerUIReadyResponse.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerUIReadyResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:krserver.ServerUIReadyResponse.Message)
}

// uint32 HeartbeatInterval = 3;
inline void ServerUIReadyResponse::clear_heartbeatinterval() {
  heartbeatinterval_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerUIReadyResponse::_internal_heartbeatinterval() const {
  return heartbeatinterval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServerUIReadyResponse::heartbeatinterval() const {
  // @@protoc_insertion_point(field_get:krserver.ServerUIReadyResponse.HeartbeatInterval)
  return _internal_heartbeatinterval();
}
inline void ServerUIReadyResponse::_internal_set_heartbeatinterval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  heartbeatinterval_ = value;
}
inline void ServerUIReadyResponse::set_heartbeatinterval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heartbeatinterval(value);
  // @@protoc_insertion_point(field_set:krserver.ServerUIReadyResponse.HeartbeatInterval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace krserver

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2eproto
