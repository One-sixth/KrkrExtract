// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace krclient {
constexpr CancelTaskRequest::CancelTaskRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CancelTaskRequestDefaultTypeInternal {
  constexpr CancelTaskRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelTaskRequestDefaultTypeInternal() {}
  union {
    CancelTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelTaskRequestDefaultTypeInternal _CancelTaskRequest_default_instance_;
constexpr CancelTaskResponse::CancelTaskResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct CancelTaskResponseDefaultTypeInternal {
  constexpr CancelTaskResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelTaskResponseDefaultTypeInternal() {}
  union {
    CancelTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelTaskResponseDefaultTypeInternal _CancelTaskResponse_default_instance_;
constexpr EmitCommandRequest::EmitCommandRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EmitCommandRequestDefaultTypeInternal {
  constexpr EmitCommandRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmitCommandRequestDefaultTypeInternal() {}
  union {
    EmitCommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmitCommandRequestDefaultTypeInternal _EmitCommandRequest_default_instance_;
constexpr EmitCommandResponse::EmitCommandResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct EmitCommandResponseDefaultTypeInternal {
  constexpr EmitCommandResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EmitCommandResponseDefaultTypeInternal() {}
  union {
    EmitCommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EmitCommandResponseDefaultTypeInternal _EmitCommandResponse_default_instance_;
constexpr PackerRequest::PackerRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : basedir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , originalarchivename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , outputarchivename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PackerRequestDefaultTypeInternal {
  constexpr PackerRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PackerRequestDefaultTypeInternal() {}
  union {
    PackerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PackerRequestDefaultTypeInternal _PackerRequest_default_instance_;
constexpr PackerResponse::PackerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct PackerResponseDefaultTypeInternal {
  constexpr PackerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PackerResponseDefaultTypeInternal() {}
  union {
    PackerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PackerResponseDefaultTypeInternal _PackerResponse_default_instance_;
constexpr TaskCloseWindowRequest::TaskCloseWindowRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TaskCloseWindowRequestDefaultTypeInternal {
  constexpr TaskCloseWindowRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskCloseWindowRequestDefaultTypeInternal() {}
  union {
    TaskCloseWindowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskCloseWindowRequestDefaultTypeInternal _TaskCloseWindowRequest_default_instance_;
constexpr TaskCloseWindowResponse::TaskCloseWindowResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TaskCloseWindowResponseDefaultTypeInternal {
  constexpr TaskCloseWindowResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskCloseWindowResponseDefaultTypeInternal() {}
  union {
    TaskCloseWindowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskCloseWindowResponseDefaultTypeInternal _TaskCloseWindowResponse_default_instance_;
constexpr TaskDumpStartRequest::TaskDumpStartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , psbmode_(PROTOBUF_ULONGLONG(0))
  , textmode_(PROTOBUF_ULONGLONG(0))
  , pngmode_(PROTOBUF_ULONGLONG(0))
  , tjs2mode_(PROTOBUF_ULONGLONG(0))
  , tlgmode_(PROTOBUF_ULONGLONG(0))
  , amvmode_(PROTOBUF_ULONGLONG(0))
  , pdbmode_(PROTOBUF_ULONGLONG(0)){}
struct TaskDumpStartRequestDefaultTypeInternal {
  constexpr TaskDumpStartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskDumpStartRequestDefaultTypeInternal() {}
  union {
    TaskDumpStartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskDumpStartRequestDefaultTypeInternal _TaskDumpStartRequest_default_instance_;
constexpr TaskDumpStartResponse::TaskDumpStartResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct TaskDumpStartResponseDefaultTypeInternal {
  constexpr TaskDumpStartResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskDumpStartResponseDefaultTypeInternal() {}
  union {
    TaskDumpStartResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskDumpStartResponseDefaultTypeInternal _TaskDumpStartResponse_default_instance_;
constexpr UniversalDumperRequest::UniversalDumperRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : psbmode_(PROTOBUF_ULONGLONG(0))
  , textmode_(PROTOBUF_ULONGLONG(0))
  , pngmode_(PROTOBUF_ULONGLONG(0))
  , tjs2mode_(PROTOBUF_ULONGLONG(0))
  , tlgmode_(PROTOBUF_ULONGLONG(0))
  , amvmode_(PROTOBUF_ULONGLONG(0))
  , pdbmode_(PROTOBUF_ULONGLONG(0)){}
struct UniversalDumperRequestDefaultTypeInternal {
  constexpr UniversalDumperRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UniversalDumperRequestDefaultTypeInternal() {}
  union {
    UniversalDumperRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UniversalDumperRequestDefaultTypeInternal _UniversalDumperRequest_default_instance_;
constexpr UniversalDumperResponse::UniversalDumperResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct UniversalDumperResponseDefaultTypeInternal {
  constexpr UniversalDumperResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UniversalDumperResponseDefaultTypeInternal() {}
  union {
    UniversalDumperResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UniversalDumperResponseDefaultTypeInternal _UniversalDumperResponse_default_instance_;
constexpr UniversalPatchRequest::UniversalPatchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protect_(0u)
  , icon_(0u){}
struct UniversalPatchRequestDefaultTypeInternal {
  constexpr UniversalPatchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UniversalPatchRequestDefaultTypeInternal() {}
  union {
    UniversalPatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UniversalPatchRequestDefaultTypeInternal _UniversalPatchRequest_default_instance_;
constexpr UniversalPatchResponse::UniversalPatchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct UniversalPatchResponseDefaultTypeInternal {
  constexpr UniversalPatchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UniversalPatchResponseDefaultTypeInternal() {}
  union {
    UniversalPatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UniversalPatchResponseDefaultTypeInternal _UniversalPatchResponse_default_instance_;
}  // namespace krclient
namespace krclient {

// ===================================================================

class CancelTaskRequest::_Internal {
 public:
};

CancelTaskRequest::CancelTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.CancelTaskRequest)
}
CancelTaskRequest::CancelTaskRequest(const CancelTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:krclient.CancelTaskRequest)
}

void CancelTaskRequest::SharedCtor() {
}

CancelTaskRequest::~CancelTaskRequest() {
  // @@protoc_insertion_point(destructor:krclient.CancelTaskRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CancelTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CancelTaskRequest::ArenaDtor(void* object) {
  CancelTaskRequest* _this = reinterpret_cast< CancelTaskRequest* >(object);
  (void)_this;
}
void CancelTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.CancelTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* CancelTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelTaskRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.CancelTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.CancelTaskRequest)
  return target;
}

size_t CancelTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.CancelTaskRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelTaskRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CancelTaskRequest*>(
      &from));
}

void CancelTaskRequest::MergeFrom(const CancelTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.CancelTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CancelTaskRequest::CopyFrom(const CancelTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.CancelTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelTaskRequest::IsInitialized() const {
  return true;
}

void CancelTaskRequest::InternalSwap(CancelTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string CancelTaskRequest::GetTypeName() const {
  return "krclient.CancelTaskRequest";
}


// ===================================================================

class CancelTaskResponse::_Internal {
 public:
};

CancelTaskResponse::CancelTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.CancelTaskResponse)
}
CancelTaskResponse::CancelTaskResponse(const CancelTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krclient.CancelTaskResponse)
}

void CancelTaskResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

CancelTaskResponse::~CancelTaskResponse() {
  // @@protoc_insertion_point(destructor:krclient.CancelTaskResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CancelTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelTaskResponse::ArenaDtor(void* object) {
  CancelTaskResponse* _this = reinterpret_cast< CancelTaskResponse* >(object);
  (void)_this;
}
void CancelTaskResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.CancelTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* CancelTaskResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelTaskResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.CancelTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krclient.CancelTaskResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.CancelTaskResponse)
  return target;
}

size_t CancelTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.CancelTaskResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelTaskResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CancelTaskResponse*>(
      &from));
}

void CancelTaskResponse::MergeFrom(const CancelTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.CancelTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void CancelTaskResponse::CopyFrom(const CancelTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.CancelTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelTaskResponse::IsInitialized() const {
  return true;
}

void CancelTaskResponse::InternalSwap(CancelTaskResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string CancelTaskResponse::GetTypeName() const {
  return "krclient.CancelTaskResponse";
}


// ===================================================================

class EmitCommandRequest::_Internal {
 public:
};

EmitCommandRequest::EmitCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.EmitCommandRequest)
}
EmitCommandRequest::EmitCommandRequest(const EmitCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:krclient.EmitCommandRequest)
}

void EmitCommandRequest::SharedCtor() {
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EmitCommandRequest::~EmitCommandRequest() {
  // @@protoc_insertion_point(destructor:krclient.EmitCommandRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EmitCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EmitCommandRequest::ArenaDtor(void* object) {
  EmitCommandRequest* _this = reinterpret_cast< EmitCommandRequest* >(object);
  (void)_this;
}
void EmitCommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmitCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmitCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.EmitCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* EmitCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmitCommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.EmitCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Command = 1;
  if (this->command().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krclient.EmitCommandRequest.Command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.EmitCommandRequest)
  return target;
}

size_t EmitCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.EmitCommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Command = 1;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmitCommandRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EmitCommandRequest*>(
      &from));
}

void EmitCommandRequest::MergeFrom(const EmitCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.EmitCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command().size() > 0) {
    _internal_set_command(from._internal_command());
  }
}

void EmitCommandRequest::CopyFrom(const EmitCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.EmitCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmitCommandRequest::IsInitialized() const {
  return true;
}

void EmitCommandRequest::InternalSwap(EmitCommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string EmitCommandRequest::GetTypeName() const {
  return "krclient.EmitCommandRequest";
}


// ===================================================================

class EmitCommandResponse::_Internal {
 public:
};

EmitCommandResponse::EmitCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.EmitCommandResponse)
}
EmitCommandResponse::EmitCommandResponse(const EmitCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krclient.EmitCommandResponse)
}

void EmitCommandResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

EmitCommandResponse::~EmitCommandResponse() {
  // @@protoc_insertion_point(destructor:krclient.EmitCommandResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void EmitCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EmitCommandResponse::ArenaDtor(void* object) {
  EmitCommandResponse* _this = reinterpret_cast< EmitCommandResponse* >(object);
  (void)_this;
}
void EmitCommandResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmitCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EmitCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.EmitCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* EmitCommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmitCommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.EmitCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krclient.EmitCommandResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.EmitCommandResponse)
  return target;
}

size_t EmitCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.EmitCommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmitCommandResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EmitCommandResponse*>(
      &from));
}

void EmitCommandResponse::MergeFrom(const EmitCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.EmitCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void EmitCommandResponse::CopyFrom(const EmitCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.EmitCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmitCommandResponse::IsInitialized() const {
  return true;
}

void EmitCommandResponse::InternalSwap(EmitCommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string EmitCommandResponse::GetTypeName() const {
  return "krclient.EmitCommandResponse";
}


// ===================================================================

class PackerRequest::_Internal {
 public:
};

PackerRequest::PackerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.PackerRequest)
}
PackerRequest::PackerRequest(const PackerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  basedir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_basedir().empty()) {
    basedir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_basedir(), 
      GetArena());
  }
  originalarchivename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_originalarchivename().empty()) {
    originalarchivename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_originalarchivename(), 
      GetArena());
  }
  outputarchivename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outputarchivename().empty()) {
    outputarchivename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_outputarchivename(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:krclient.PackerRequest)
}

void PackerRequest::SharedCtor() {
basedir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
originalarchivename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
outputarchivename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PackerRequest::~PackerRequest() {
  // @@protoc_insertion_point(destructor:krclient.PackerRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PackerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  basedir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  originalarchivename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outputarchivename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PackerRequest::ArenaDtor(void* object) {
  PackerRequest* _this = reinterpret_cast< PackerRequest* >(object);
  (void)_this;
}
void PackerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PackerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PackerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.PackerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  basedir_.ClearToEmpty();
  originalarchivename_.ClearToEmpty();
  outputarchivename_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* PackerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string BaseDir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_basedir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OriginalArchiveName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_originalarchivename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string OutputArchiveName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_outputarchivename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PackerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.PackerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string BaseDir = 1;
  if (this->basedir().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_basedir().data(), static_cast<int>(this->_internal_basedir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krclient.PackerRequest.BaseDir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_basedir(), target);
  }

  // string OriginalArchiveName = 2;
  if (this->originalarchivename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_originalarchivename().data(), static_cast<int>(this->_internal_originalarchivename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krclient.PackerRequest.OriginalArchiveName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_originalarchivename(), target);
  }

  // string OutputArchiveName = 3;
  if (this->outputarchivename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outputarchivename().data(), static_cast<int>(this->_internal_outputarchivename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krclient.PackerRequest.OutputArchiveName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_outputarchivename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.PackerRequest)
  return target;
}

size_t PackerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.PackerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string BaseDir = 1;
  if (this->basedir().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_basedir());
  }

  // string OriginalArchiveName = 2;
  if (this->originalarchivename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_originalarchivename());
  }

  // string OutputArchiveName = 3;
  if (this->outputarchivename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outputarchivename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackerRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PackerRequest*>(
      &from));
}

void PackerRequest::MergeFrom(const PackerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.PackerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.basedir().size() > 0) {
    _internal_set_basedir(from._internal_basedir());
  }
  if (from.originalarchivename().size() > 0) {
    _internal_set_originalarchivename(from._internal_originalarchivename());
  }
  if (from.outputarchivename().size() > 0) {
    _internal_set_outputarchivename(from._internal_outputarchivename());
  }
}

void PackerRequest::CopyFrom(const PackerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.PackerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackerRequest::IsInitialized() const {
  return true;
}

void PackerRequest::InternalSwap(PackerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  basedir_.Swap(&other->basedir_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  originalarchivename_.Swap(&other->originalarchivename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  outputarchivename_.Swap(&other->outputarchivename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string PackerRequest::GetTypeName() const {
  return "krclient.PackerRequest";
}


// ===================================================================

class PackerResponse::_Internal {
 public:
};

PackerResponse::PackerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.PackerResponse)
}
PackerResponse::PackerResponse(const PackerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krclient.PackerResponse)
}

void PackerResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

PackerResponse::~PackerResponse() {
  // @@protoc_insertion_point(destructor:krclient.PackerResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PackerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PackerResponse::ArenaDtor(void* object) {
  PackerResponse* _this = reinterpret_cast< PackerResponse* >(object);
  (void)_this;
}
void PackerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PackerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PackerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.PackerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* PackerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PackerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.PackerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krclient.PackerResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.PackerResponse)
  return target;
}

size_t PackerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.PackerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackerResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PackerResponse*>(
      &from));
}

void PackerResponse::MergeFrom(const PackerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.PackerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void PackerResponse::CopyFrom(const PackerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.PackerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackerResponse::IsInitialized() const {
  return true;
}

void PackerResponse::InternalSwap(PackerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string PackerResponse::GetTypeName() const {
  return "krclient.PackerResponse";
}


// ===================================================================

class TaskCloseWindowRequest::_Internal {
 public:
};

TaskCloseWindowRequest::TaskCloseWindowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.TaskCloseWindowRequest)
}
TaskCloseWindowRequest::TaskCloseWindowRequest(const TaskCloseWindowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:krclient.TaskCloseWindowRequest)
}

void TaskCloseWindowRequest::SharedCtor() {
}

TaskCloseWindowRequest::~TaskCloseWindowRequest() {
  // @@protoc_insertion_point(destructor:krclient.TaskCloseWindowRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TaskCloseWindowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaskCloseWindowRequest::ArenaDtor(void* object) {
  TaskCloseWindowRequest* _this = reinterpret_cast< TaskCloseWindowRequest* >(object);
  (void)_this;
}
void TaskCloseWindowRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskCloseWindowRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskCloseWindowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.TaskCloseWindowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* TaskCloseWindowRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskCloseWindowRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.TaskCloseWindowRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.TaskCloseWindowRequest)
  return target;
}

size_t TaskCloseWindowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.TaskCloseWindowRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskCloseWindowRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TaskCloseWindowRequest*>(
      &from));
}

void TaskCloseWindowRequest::MergeFrom(const TaskCloseWindowRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.TaskCloseWindowRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TaskCloseWindowRequest::CopyFrom(const TaskCloseWindowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.TaskCloseWindowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCloseWindowRequest::IsInitialized() const {
  return true;
}

void TaskCloseWindowRequest::InternalSwap(TaskCloseWindowRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string TaskCloseWindowRequest::GetTypeName() const {
  return "krclient.TaskCloseWindowRequest";
}


// ===================================================================

class TaskCloseWindowResponse::_Internal {
 public:
};

TaskCloseWindowResponse::TaskCloseWindowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.TaskCloseWindowResponse)
}
TaskCloseWindowResponse::TaskCloseWindowResponse(const TaskCloseWindowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:krclient.TaskCloseWindowResponse)
}

void TaskCloseWindowResponse::SharedCtor() {
}

TaskCloseWindowResponse::~TaskCloseWindowResponse() {
  // @@protoc_insertion_point(destructor:krclient.TaskCloseWindowResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TaskCloseWindowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TaskCloseWindowResponse::ArenaDtor(void* object) {
  TaskCloseWindowResponse* _this = reinterpret_cast< TaskCloseWindowResponse* >(object);
  (void)_this;
}
void TaskCloseWindowResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskCloseWindowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskCloseWindowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.TaskCloseWindowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* TaskCloseWindowResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskCloseWindowResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.TaskCloseWindowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.TaskCloseWindowResponse)
  return target;
}

size_t TaskCloseWindowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.TaskCloseWindowResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskCloseWindowResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TaskCloseWindowResponse*>(
      &from));
}

void TaskCloseWindowResponse::MergeFrom(const TaskCloseWindowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.TaskCloseWindowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TaskCloseWindowResponse::CopyFrom(const TaskCloseWindowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.TaskCloseWindowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCloseWindowResponse::IsInitialized() const {
  return true;
}

void TaskCloseWindowResponse::InternalSwap(TaskCloseWindowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
}

std::string TaskCloseWindowResponse::GetTypeName() const {
  return "krclient.TaskCloseWindowResponse";
}


// ===================================================================

class TaskDumpStartRequest::_Internal {
 public:
};

TaskDumpStartRequest::TaskDumpStartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.TaskDumpStartRequest)
}
TaskDumpStartRequest::TaskDumpStartRequest(const TaskDumpStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file().empty()) {
    file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file(), 
      GetArena());
  }
  ::memcpy(&psbmode_, &from.psbmode_,
    static_cast<size_t>(reinterpret_cast<char*>(&pdbmode_) -
    reinterpret_cast<char*>(&psbmode_)) + sizeof(pdbmode_));
  // @@protoc_insertion_point(copy_constructor:krclient.TaskDumpStartRequest)
}

void TaskDumpStartRequest::SharedCtor() {
file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&psbmode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pdbmode_) -
    reinterpret_cast<char*>(&psbmode_)) + sizeof(pdbmode_));
}

TaskDumpStartRequest::~TaskDumpStartRequest() {
  // @@protoc_insertion_point(destructor:krclient.TaskDumpStartRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TaskDumpStartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskDumpStartRequest::ArenaDtor(void* object) {
  TaskDumpStartRequest* _this = reinterpret_cast< TaskDumpStartRequest* >(object);
  (void)_this;
}
void TaskDumpStartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskDumpStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskDumpStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.TaskDumpStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmpty();
  ::memset(&psbmode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdbmode_) -
      reinterpret_cast<char*>(&psbmode_)) + sizeof(pdbmode_));
  _internal_metadata_.Clear<std::string>();
}

const char* TaskDumpStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string File = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 PsbMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          psbmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TextMode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          textmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 PngMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pngmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Tjs2Mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tjs2mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TlgMode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tlgmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AmvMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          amvmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 PdbMode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pdbmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskDumpStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.TaskDumpStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string File = 1;
  if (this->file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krclient.TaskDumpStartRequest.File");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file(), target);
  }

  // uint64 PsbMode = 2;
  if (this->psbmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_psbmode(), target);
  }

  // uint64 TextMode = 3;
  if (this->textmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_textmode(), target);
  }

  // uint64 PngMode = 4;
  if (this->pngmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pngmode(), target);
  }

  // uint64 Tjs2Mode = 5;
  if (this->tjs2mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_tjs2mode(), target);
  }

  // uint64 TlgMode = 6;
  if (this->tlgmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_tlgmode(), target);
  }

  // uint64 AmvMode = 7;
  if (this->amvmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_amvmode(), target);
  }

  // uint64 PdbMode = 8;
  if (this->pdbmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_pdbmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.TaskDumpStartRequest)
  return target;
}

size_t TaskDumpStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.TaskDumpStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string File = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file());
  }

  // uint64 PsbMode = 2;
  if (this->psbmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_psbmode());
  }

  // uint64 TextMode = 3;
  if (this->textmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_textmode());
  }

  // uint64 PngMode = 4;
  if (this->pngmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pngmode());
  }

  // uint64 Tjs2Mode = 5;
  if (this->tjs2mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tjs2mode());
  }

  // uint64 TlgMode = 6;
  if (this->tlgmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tlgmode());
  }

  // uint64 AmvMode = 7;
  if (this->amvmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amvmode());
  }

  // uint64 PdbMode = 8;
  if (this->pdbmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pdbmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskDumpStartRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TaskDumpStartRequest*>(
      &from));
}

void TaskDumpStartRequest::MergeFrom(const TaskDumpStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.TaskDumpStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {
    _internal_set_file(from._internal_file());
  }
  if (from.psbmode() != 0) {
    _internal_set_psbmode(from._internal_psbmode());
  }
  if (from.textmode() != 0) {
    _internal_set_textmode(from._internal_textmode());
  }
  if (from.pngmode() != 0) {
    _internal_set_pngmode(from._internal_pngmode());
  }
  if (from.tjs2mode() != 0) {
    _internal_set_tjs2mode(from._internal_tjs2mode());
  }
  if (from.tlgmode() != 0) {
    _internal_set_tlgmode(from._internal_tlgmode());
  }
  if (from.amvmode() != 0) {
    _internal_set_amvmode(from._internal_amvmode());
  }
  if (from.pdbmode() != 0) {
    _internal_set_pdbmode(from._internal_pdbmode());
  }
}

void TaskDumpStartRequest::CopyFrom(const TaskDumpStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.TaskDumpStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskDumpStartRequest::IsInitialized() const {
  return true;
}

void TaskDumpStartRequest::InternalSwap(TaskDumpStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  file_.Swap(&other->file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskDumpStartRequest, pdbmode_)
      + sizeof(TaskDumpStartRequest::pdbmode_)
      - PROTOBUF_FIELD_OFFSET(TaskDumpStartRequest, psbmode_)>(
          reinterpret_cast<char*>(&psbmode_),
          reinterpret_cast<char*>(&other->psbmode_));
}

std::string TaskDumpStartRequest::GetTypeName() const {
  return "krclient.TaskDumpStartRequest";
}


// ===================================================================

class TaskDumpStartResponse::_Internal {
 public:
};

TaskDumpStartResponse::TaskDumpStartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.TaskDumpStartResponse)
}
TaskDumpStartResponse::TaskDumpStartResponse(const TaskDumpStartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krclient.TaskDumpStartResponse)
}

void TaskDumpStartResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

TaskDumpStartResponse::~TaskDumpStartResponse() {
  // @@protoc_insertion_point(destructor:krclient.TaskDumpStartResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TaskDumpStartResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TaskDumpStartResponse::ArenaDtor(void* object) {
  TaskDumpStartResponse* _this = reinterpret_cast< TaskDumpStartResponse* >(object);
  (void)_this;
}
void TaskDumpStartResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskDumpStartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskDumpStartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.TaskDumpStartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* TaskDumpStartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskDumpStartResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.TaskDumpStartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krclient.TaskDumpStartResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.TaskDumpStartResponse)
  return target;
}

size_t TaskDumpStartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.TaskDumpStartResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskDumpStartResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TaskDumpStartResponse*>(
      &from));
}

void TaskDumpStartResponse::MergeFrom(const TaskDumpStartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.TaskDumpStartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void TaskDumpStartResponse::CopyFrom(const TaskDumpStartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.TaskDumpStartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskDumpStartResponse::IsInitialized() const {
  return true;
}

void TaskDumpStartResponse::InternalSwap(TaskDumpStartResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string TaskDumpStartResponse::GetTypeName() const {
  return "krclient.TaskDumpStartResponse";
}


// ===================================================================

class UniversalDumperRequest::_Internal {
 public:
};

UniversalDumperRequest::UniversalDumperRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.UniversalDumperRequest)
}
UniversalDumperRequest::UniversalDumperRequest(const UniversalDumperRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&psbmode_, &from.psbmode_,
    static_cast<size_t>(reinterpret_cast<char*>(&pdbmode_) -
    reinterpret_cast<char*>(&psbmode_)) + sizeof(pdbmode_));
  // @@protoc_insertion_point(copy_constructor:krclient.UniversalDumperRequest)
}

void UniversalDumperRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&psbmode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pdbmode_) -
    reinterpret_cast<char*>(&psbmode_)) + sizeof(pdbmode_));
}

UniversalDumperRequest::~UniversalDumperRequest() {
  // @@protoc_insertion_point(destructor:krclient.UniversalDumperRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UniversalDumperRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UniversalDumperRequest::ArenaDtor(void* object) {
  UniversalDumperRequest* _this = reinterpret_cast< UniversalDumperRequest* >(object);
  (void)_this;
}
void UniversalDumperRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UniversalDumperRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UniversalDumperRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.UniversalDumperRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&psbmode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdbmode_) -
      reinterpret_cast<char*>(&psbmode_)) + sizeof(pdbmode_));
  _internal_metadata_.Clear<std::string>();
}

const char* UniversalDumperRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 PsbMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          psbmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TextMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          textmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 PngMode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pngmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Tjs2Mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tjs2mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 TlgMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tlgmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AmvMode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          amvmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 PdbMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pdbmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniversalDumperRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.UniversalDumperRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PsbMode = 1;
  if (this->psbmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_psbmode(), target);
  }

  // uint64 TextMode = 2;
  if (this->textmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_textmode(), target);
  }

  // uint64 PngMode = 3;
  if (this->pngmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pngmode(), target);
  }

  // uint64 Tjs2Mode = 4;
  if (this->tjs2mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_tjs2mode(), target);
  }

  // uint64 TlgMode = 5;
  if (this->tlgmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_tlgmode(), target);
  }

  // uint64 AmvMode = 6;
  if (this->amvmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_amvmode(), target);
  }

  // uint64 PdbMode = 7;
  if (this->pdbmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_pdbmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.UniversalDumperRequest)
  return target;
}

size_t UniversalDumperRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.UniversalDumperRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 PsbMode = 1;
  if (this->psbmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_psbmode());
  }

  // uint64 TextMode = 2;
  if (this->textmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_textmode());
  }

  // uint64 PngMode = 3;
  if (this->pngmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pngmode());
  }

  // uint64 Tjs2Mode = 4;
  if (this->tjs2mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tjs2mode());
  }

  // uint64 TlgMode = 5;
  if (this->tlgmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tlgmode());
  }

  // uint64 AmvMode = 6;
  if (this->amvmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amvmode());
  }

  // uint64 PdbMode = 7;
  if (this->pdbmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pdbmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniversalDumperRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UniversalDumperRequest*>(
      &from));
}

void UniversalDumperRequest::MergeFrom(const UniversalDumperRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.UniversalDumperRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.psbmode() != 0) {
    _internal_set_psbmode(from._internal_psbmode());
  }
  if (from.textmode() != 0) {
    _internal_set_textmode(from._internal_textmode());
  }
  if (from.pngmode() != 0) {
    _internal_set_pngmode(from._internal_pngmode());
  }
  if (from.tjs2mode() != 0) {
    _internal_set_tjs2mode(from._internal_tjs2mode());
  }
  if (from.tlgmode() != 0) {
    _internal_set_tlgmode(from._internal_tlgmode());
  }
  if (from.amvmode() != 0) {
    _internal_set_amvmode(from._internal_amvmode());
  }
  if (from.pdbmode() != 0) {
    _internal_set_pdbmode(from._internal_pdbmode());
  }
}

void UniversalDumperRequest::CopyFrom(const UniversalDumperRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.UniversalDumperRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniversalDumperRequest::IsInitialized() const {
  return true;
}

void UniversalDumperRequest::InternalSwap(UniversalDumperRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UniversalDumperRequest, pdbmode_)
      + sizeof(UniversalDumperRequest::pdbmode_)
      - PROTOBUF_FIELD_OFFSET(UniversalDumperRequest, psbmode_)>(
          reinterpret_cast<char*>(&psbmode_),
          reinterpret_cast<char*>(&other->psbmode_));
}

std::string UniversalDumperRequest::GetTypeName() const {
  return "krclient.UniversalDumperRequest";
}


// ===================================================================

class UniversalDumperResponse::_Internal {
 public:
};

UniversalDumperResponse::UniversalDumperResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.UniversalDumperResponse)
}
UniversalDumperResponse::UniversalDumperResponse(const UniversalDumperResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krclient.UniversalDumperResponse)
}

void UniversalDumperResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

UniversalDumperResponse::~UniversalDumperResponse() {
  // @@protoc_insertion_point(destructor:krclient.UniversalDumperResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UniversalDumperResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UniversalDumperResponse::ArenaDtor(void* object) {
  UniversalDumperResponse* _this = reinterpret_cast< UniversalDumperResponse* >(object);
  (void)_this;
}
void UniversalDumperResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UniversalDumperResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UniversalDumperResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.UniversalDumperResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* UniversalDumperResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniversalDumperResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.UniversalDumperResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krclient.UniversalDumperResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.UniversalDumperResponse)
  return target;
}

size_t UniversalDumperResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.UniversalDumperResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniversalDumperResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UniversalDumperResponse*>(
      &from));
}

void UniversalDumperResponse::MergeFrom(const UniversalDumperResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.UniversalDumperResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void UniversalDumperResponse::CopyFrom(const UniversalDumperResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.UniversalDumperResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniversalDumperResponse::IsInitialized() const {
  return true;
}

void UniversalDumperResponse::InternalSwap(UniversalDumperResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string UniversalDumperResponse::GetTypeName() const {
  return "krclient.UniversalDumperResponse";
}


// ===================================================================

class UniversalPatchRequest::_Internal {
 public:
};

UniversalPatchRequest::UniversalPatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.UniversalPatchRequest)
}
UniversalPatchRequest::UniversalPatchRequest(const UniversalPatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&protect_, &from.protect_,
    static_cast<size_t>(reinterpret_cast<char*>(&icon_) -
    reinterpret_cast<char*>(&protect_)) + sizeof(icon_));
  // @@protoc_insertion_point(copy_constructor:krclient.UniversalPatchRequest)
}

void UniversalPatchRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&protect_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&icon_) -
    reinterpret_cast<char*>(&protect_)) + sizeof(icon_));
}

UniversalPatchRequest::~UniversalPatchRequest() {
  // @@protoc_insertion_point(destructor:krclient.UniversalPatchRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UniversalPatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UniversalPatchRequest::ArenaDtor(void* object) {
  UniversalPatchRequest* _this = reinterpret_cast< UniversalPatchRequest* >(object);
  (void)_this;
}
void UniversalPatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UniversalPatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UniversalPatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.UniversalPatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&protect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&icon_) -
      reinterpret_cast<char*>(&protect_)) + sizeof(icon_));
  _internal_metadata_.Clear<std::string>();
}

const char* UniversalPatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Protect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          protect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          icon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniversalPatchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.UniversalPatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Protect = 1;
  if (this->protect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_protect(), target);
  }

  // uint32 Icon = 2;
  if (this->icon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_icon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.UniversalPatchRequest)
  return target;
}

size_t UniversalPatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.UniversalPatchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Protect = 1;
  if (this->protect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protect());
  }

  // uint32 Icon = 2;
  if (this->icon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_icon());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniversalPatchRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UniversalPatchRequest*>(
      &from));
}

void UniversalPatchRequest::MergeFrom(const UniversalPatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.UniversalPatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protect() != 0) {
    _internal_set_protect(from._internal_protect());
  }
  if (from.icon() != 0) {
    _internal_set_icon(from._internal_icon());
  }
}

void UniversalPatchRequest::CopyFrom(const UniversalPatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.UniversalPatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniversalPatchRequest::IsInitialized() const {
  return true;
}

void UniversalPatchRequest::InternalSwap(UniversalPatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UniversalPatchRequest, icon_)
      + sizeof(UniversalPatchRequest::icon_)
      - PROTOBUF_FIELD_OFFSET(UniversalPatchRequest, protect_)>(
          reinterpret_cast<char*>(&protect_),
          reinterpret_cast<char*>(&other->protect_));
}

std::string UniversalPatchRequest::GetTypeName() const {
  return "krclient.UniversalPatchRequest";
}


// ===================================================================

class UniversalPatchResponse::_Internal {
 public:
};

UniversalPatchResponse::UniversalPatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:krclient.UniversalPatchResponse)
}
UniversalPatchResponse::UniversalPatchResponse(const UniversalPatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:krclient.UniversalPatchResponse)
}

void UniversalPatchResponse::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
}

UniversalPatchResponse::~UniversalPatchResponse() {
  // @@protoc_insertion_point(destructor:krclient.UniversalPatchResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UniversalPatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UniversalPatchResponse::ArenaDtor(void* object) {
  UniversalPatchResponse* _this = reinterpret_cast< UniversalPatchResponse* >(object);
  (void)_this;
}
void UniversalPatchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UniversalPatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UniversalPatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:krclient.UniversalPatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* UniversalPatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool Success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniversalPatchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:krclient.UniversalPatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "krclient.UniversalPatchResponse.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:krclient.UniversalPatchResponse)
  return target;
}

size_t UniversalPatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:krclient.UniversalPatchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool Success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniversalPatchResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UniversalPatchResponse*>(
      &from));
}

void UniversalPatchResponse::MergeFrom(const UniversalPatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:krclient.UniversalPatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void UniversalPatchResponse::CopyFrom(const UniversalPatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:krclient.UniversalPatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniversalPatchResponse::IsInitialized() const {
  return true;
}

void UniversalPatchResponse::InternalSwap(UniversalPatchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

std::string UniversalPatchResponse::GetTypeName() const {
  return "krclient.UniversalPatchResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace krclient
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::krclient::CancelTaskRequest* Arena::CreateMaybeMessage< ::krclient::CancelTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::CancelTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::CancelTaskResponse* Arena::CreateMaybeMessage< ::krclient::CancelTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::CancelTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::EmitCommandRequest* Arena::CreateMaybeMessage< ::krclient::EmitCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::EmitCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::EmitCommandResponse* Arena::CreateMaybeMessage< ::krclient::EmitCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::EmitCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::PackerRequest* Arena::CreateMaybeMessage< ::krclient::PackerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::PackerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::PackerResponse* Arena::CreateMaybeMessage< ::krclient::PackerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::PackerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::TaskCloseWindowRequest* Arena::CreateMaybeMessage< ::krclient::TaskCloseWindowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::TaskCloseWindowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::TaskCloseWindowResponse* Arena::CreateMaybeMessage< ::krclient::TaskCloseWindowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::TaskCloseWindowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::TaskDumpStartRequest* Arena::CreateMaybeMessage< ::krclient::TaskDumpStartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::TaskDumpStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::TaskDumpStartResponse* Arena::CreateMaybeMessage< ::krclient::TaskDumpStartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::TaskDumpStartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::UniversalDumperRequest* Arena::CreateMaybeMessage< ::krclient::UniversalDumperRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::UniversalDumperRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::UniversalDumperResponse* Arena::CreateMaybeMessage< ::krclient::UniversalDumperResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::UniversalDumperResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::UniversalPatchRequest* Arena::CreateMaybeMessage< ::krclient::UniversalPatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::UniversalPatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::krclient::UniversalPatchResponse* Arena::CreateMaybeMessage< ::krclient::UniversalPatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::krclient::UniversalPatchResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
