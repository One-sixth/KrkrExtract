// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto
#ifndef GRPC_server_2eproto__INCLUDED
#define GRPC_server_2eproto__INCLUDED

#include "server.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace krserver {

class KrConnectionApi final {
 public:
  static constexpr char const* service_full_name() {
    return "krserver.KrConnectionApi";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ServerProgressBar(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest& request, ::krserver::ServerProgressBarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerProgressBarResponse>> AsyncServerProgressBar(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerProgressBarResponse>>(AsyncServerProgressBarRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerProgressBarResponse>> PrepareAsyncServerProgressBar(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerProgressBarResponse>>(PrepareAsyncServerProgressBarRaw(context, request, cq));
    }
    virtual ::grpc::Status ServerCommandResultOutput(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest& request, ::krserver::ServerCommandResultOutputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerCommandResultOutputResponse>> AsyncServerCommandResultOutput(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerCommandResultOutputResponse>>(AsyncServerCommandResultOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerCommandResultOutputResponse>> PrepareAsyncServerCommandResultOutput(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerCommandResultOutputResponse>>(PrepareAsyncServerCommandResultOutputRaw(context, request, cq));
    }
    virtual ::grpc::Status ServerExitFromRemoteProcess(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest& request, ::krserver::ServerExitFromRemoteProcessResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerExitFromRemoteProcessResponse>> AsyncServerExitFromRemoteProcess(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerExitFromRemoteProcessResponse>>(AsyncServerExitFromRemoteProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerExitFromRemoteProcessResponse>> PrepareAsyncServerExitFromRemoteProcess(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerExitFromRemoteProcessResponse>>(PrepareAsyncServerExitFromRemoteProcessRaw(context, request, cq));
    }
    virtual ::grpc::Status ServerLogOutput(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest& request, ::krserver::ServerLogOutputResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerLogOutputResponse>> AsyncServerLogOutput(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerLogOutputResponse>>(AsyncServerLogOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerLogOutputResponse>> PrepareAsyncServerLogOutput(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerLogOutputResponse>>(PrepareAsyncServerLogOutputRaw(context, request, cq));
    }
    virtual ::grpc::Status ServerMessageBox(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest& request, ::krserver::ServerMessageBoxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerMessageBoxResponse>> AsyncServerMessageBox(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerMessageBoxResponse>>(AsyncServerMessageBoxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerMessageBoxResponse>> PrepareAsyncServerMessageBox(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerMessageBoxResponse>>(PrepareAsyncServerMessageBoxRaw(context, request, cq));
    }
    virtual ::grpc::Status ServerTaskEndAndEnableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest& request, ::krserver::ServerTaskEndAndEnableUIResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerTaskEndAndEnableUIResponse>> AsyncServerTaskEndAndEnableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerTaskEndAndEnableUIResponse>>(AsyncServerTaskEndAndEnableUIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerTaskEndAndEnableUIResponse>> PrepareAsyncServerTaskEndAndEnableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerTaskEndAndEnableUIResponse>>(PrepareAsyncServerTaskEndAndEnableUIRaw(context, request, cq));
    }
    virtual ::grpc::Status ServerTaskStartAndDisableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest& request, ::krserver::ServerTaskStartAndDisableUIResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerTaskStartAndDisableUIResponse>> AsyncServerTaskStartAndDisableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerTaskStartAndDisableUIResponse>>(AsyncServerTaskStartAndDisableUIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerTaskStartAndDisableUIResponse>> PrepareAsyncServerTaskStartAndDisableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerTaskStartAndDisableUIResponse>>(PrepareAsyncServerTaskStartAndDisableUIRaw(context, request, cq));
    }
    virtual ::grpc::Status ServerUIHeartbeatPackage(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest& request, ::krserver::ServerUIHeartbeatPackageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerUIHeartbeatPackageResponse>> AsyncServerUIHeartbeatPackage(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerUIHeartbeatPackageResponse>>(AsyncServerUIHeartbeatPackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerUIHeartbeatPackageResponse>> PrepareAsyncServerUIHeartbeatPackage(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerUIHeartbeatPackageResponse>>(PrepareAsyncServerUIHeartbeatPackageRaw(context, request, cq));
    }
    virtual ::grpc::Status ServerUIReady(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest& request, ::krserver::ServerUIReadyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerUIReadyResponse>> AsyncServerUIReady(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerUIReadyResponse>>(AsyncServerUIReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerUIReadyResponse>> PrepareAsyncServerUIReady(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerUIReadyResponse>>(PrepareAsyncServerUIReadyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ServerProgressBar(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest* request, ::krserver::ServerProgressBarResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerProgressBar(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest* request, ::krserver::ServerProgressBarResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ServerCommandResultOutput(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest* request, ::krserver::ServerCommandResultOutputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerCommandResultOutput(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest* request, ::krserver::ServerCommandResultOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ServerExitFromRemoteProcess(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest* request, ::krserver::ServerExitFromRemoteProcessResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerExitFromRemoteProcess(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest* request, ::krserver::ServerExitFromRemoteProcessResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ServerLogOutput(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest* request, ::krserver::ServerLogOutputResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerLogOutput(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest* request, ::krserver::ServerLogOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ServerMessageBox(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest* request, ::krserver::ServerMessageBoxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerMessageBox(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest* request, ::krserver::ServerMessageBoxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ServerTaskEndAndEnableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest* request, ::krserver::ServerTaskEndAndEnableUIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerTaskEndAndEnableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest* request, ::krserver::ServerTaskEndAndEnableUIResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ServerTaskStartAndDisableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest* request, ::krserver::ServerTaskStartAndDisableUIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerTaskStartAndDisableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest* request, ::krserver::ServerTaskStartAndDisableUIResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ServerUIHeartbeatPackage(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest* request, ::krserver::ServerUIHeartbeatPackageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerUIHeartbeatPackage(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest* request, ::krserver::ServerUIHeartbeatPackageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ServerUIReady(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest* request, ::krserver::ServerUIReadyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServerUIReady(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest* request, ::krserver::ServerUIReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerProgressBarResponse>* AsyncServerProgressBarRaw(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerProgressBarResponse>* PrepareAsyncServerProgressBarRaw(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerCommandResultOutputResponse>* AsyncServerCommandResultOutputRaw(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerCommandResultOutputResponse>* PrepareAsyncServerCommandResultOutputRaw(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerExitFromRemoteProcessResponse>* AsyncServerExitFromRemoteProcessRaw(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerExitFromRemoteProcessResponse>* PrepareAsyncServerExitFromRemoteProcessRaw(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerLogOutputResponse>* AsyncServerLogOutputRaw(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerLogOutputResponse>* PrepareAsyncServerLogOutputRaw(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerMessageBoxResponse>* AsyncServerMessageBoxRaw(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerMessageBoxResponse>* PrepareAsyncServerMessageBoxRaw(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerTaskEndAndEnableUIResponse>* AsyncServerTaskEndAndEnableUIRaw(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerTaskEndAndEnableUIResponse>* PrepareAsyncServerTaskEndAndEnableUIRaw(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerTaskStartAndDisableUIResponse>* AsyncServerTaskStartAndDisableUIRaw(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerTaskStartAndDisableUIResponse>* PrepareAsyncServerTaskStartAndDisableUIRaw(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerUIHeartbeatPackageResponse>* AsyncServerUIHeartbeatPackageRaw(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerUIHeartbeatPackageResponse>* PrepareAsyncServerUIHeartbeatPackageRaw(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerUIReadyResponse>* AsyncServerUIReadyRaw(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::krserver::ServerUIReadyResponse>* PrepareAsyncServerUIReadyRaw(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ServerProgressBar(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest& request, ::krserver::ServerProgressBarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerProgressBarResponse>> AsyncServerProgressBar(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerProgressBarResponse>>(AsyncServerProgressBarRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerProgressBarResponse>> PrepareAsyncServerProgressBar(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerProgressBarResponse>>(PrepareAsyncServerProgressBarRaw(context, request, cq));
    }
    ::grpc::Status ServerCommandResultOutput(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest& request, ::krserver::ServerCommandResultOutputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerCommandResultOutputResponse>> AsyncServerCommandResultOutput(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerCommandResultOutputResponse>>(AsyncServerCommandResultOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerCommandResultOutputResponse>> PrepareAsyncServerCommandResultOutput(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerCommandResultOutputResponse>>(PrepareAsyncServerCommandResultOutputRaw(context, request, cq));
    }
    ::grpc::Status ServerExitFromRemoteProcess(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest& request, ::krserver::ServerExitFromRemoteProcessResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerExitFromRemoteProcessResponse>> AsyncServerExitFromRemoteProcess(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerExitFromRemoteProcessResponse>>(AsyncServerExitFromRemoteProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerExitFromRemoteProcessResponse>> PrepareAsyncServerExitFromRemoteProcess(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerExitFromRemoteProcessResponse>>(PrepareAsyncServerExitFromRemoteProcessRaw(context, request, cq));
    }
    ::grpc::Status ServerLogOutput(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest& request, ::krserver::ServerLogOutputResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerLogOutputResponse>> AsyncServerLogOutput(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerLogOutputResponse>>(AsyncServerLogOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerLogOutputResponse>> PrepareAsyncServerLogOutput(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerLogOutputResponse>>(PrepareAsyncServerLogOutputRaw(context, request, cq));
    }
    ::grpc::Status ServerMessageBox(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest& request, ::krserver::ServerMessageBoxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerMessageBoxResponse>> AsyncServerMessageBox(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerMessageBoxResponse>>(AsyncServerMessageBoxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerMessageBoxResponse>> PrepareAsyncServerMessageBox(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerMessageBoxResponse>>(PrepareAsyncServerMessageBoxRaw(context, request, cq));
    }
    ::grpc::Status ServerTaskEndAndEnableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest& request, ::krserver::ServerTaskEndAndEnableUIResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerTaskEndAndEnableUIResponse>> AsyncServerTaskEndAndEnableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerTaskEndAndEnableUIResponse>>(AsyncServerTaskEndAndEnableUIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerTaskEndAndEnableUIResponse>> PrepareAsyncServerTaskEndAndEnableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerTaskEndAndEnableUIResponse>>(PrepareAsyncServerTaskEndAndEnableUIRaw(context, request, cq));
    }
    ::grpc::Status ServerTaskStartAndDisableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest& request, ::krserver::ServerTaskStartAndDisableUIResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerTaskStartAndDisableUIResponse>> AsyncServerTaskStartAndDisableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerTaskStartAndDisableUIResponse>>(AsyncServerTaskStartAndDisableUIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerTaskStartAndDisableUIResponse>> PrepareAsyncServerTaskStartAndDisableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerTaskStartAndDisableUIResponse>>(PrepareAsyncServerTaskStartAndDisableUIRaw(context, request, cq));
    }
    ::grpc::Status ServerUIHeartbeatPackage(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest& request, ::krserver::ServerUIHeartbeatPackageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerUIHeartbeatPackageResponse>> AsyncServerUIHeartbeatPackage(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerUIHeartbeatPackageResponse>>(AsyncServerUIHeartbeatPackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerUIHeartbeatPackageResponse>> PrepareAsyncServerUIHeartbeatPackage(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerUIHeartbeatPackageResponse>>(PrepareAsyncServerUIHeartbeatPackageRaw(context, request, cq));
    }
    ::grpc::Status ServerUIReady(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest& request, ::krserver::ServerUIReadyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerUIReadyResponse>> AsyncServerUIReady(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerUIReadyResponse>>(AsyncServerUIReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerUIReadyResponse>> PrepareAsyncServerUIReady(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::krserver::ServerUIReadyResponse>>(PrepareAsyncServerUIReadyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ServerProgressBar(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest* request, ::krserver::ServerProgressBarResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerProgressBar(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest* request, ::krserver::ServerProgressBarResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerCommandResultOutput(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest* request, ::krserver::ServerCommandResultOutputResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerCommandResultOutput(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest* request, ::krserver::ServerCommandResultOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerExitFromRemoteProcess(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest* request, ::krserver::ServerExitFromRemoteProcessResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerExitFromRemoteProcess(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest* request, ::krserver::ServerExitFromRemoteProcessResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerLogOutput(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest* request, ::krserver::ServerLogOutputResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerLogOutput(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest* request, ::krserver::ServerLogOutputResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerMessageBox(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest* request, ::krserver::ServerMessageBoxResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerMessageBox(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest* request, ::krserver::ServerMessageBoxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerTaskEndAndEnableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest* request, ::krserver::ServerTaskEndAndEnableUIResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerTaskEndAndEnableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest* request, ::krserver::ServerTaskEndAndEnableUIResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerTaskStartAndDisableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest* request, ::krserver::ServerTaskStartAndDisableUIResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerTaskStartAndDisableUI(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest* request, ::krserver::ServerTaskStartAndDisableUIResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerUIHeartbeatPackage(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest* request, ::krserver::ServerUIHeartbeatPackageResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerUIHeartbeatPackage(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest* request, ::krserver::ServerUIHeartbeatPackageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerUIReady(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest* request, ::krserver::ServerUIReadyResponse* response, std::function<void(::grpc::Status)>) override;
      void ServerUIReady(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest* request, ::krserver::ServerUIReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerProgressBarResponse>* AsyncServerProgressBarRaw(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerProgressBarResponse>* PrepareAsyncServerProgressBarRaw(::grpc::ClientContext* context, const ::krserver::ServerProgressBarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerCommandResultOutputResponse>* AsyncServerCommandResultOutputRaw(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerCommandResultOutputResponse>* PrepareAsyncServerCommandResultOutputRaw(::grpc::ClientContext* context, const ::krserver::ServerCommandResultOutputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerExitFromRemoteProcessResponse>* AsyncServerExitFromRemoteProcessRaw(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerExitFromRemoteProcessResponse>* PrepareAsyncServerExitFromRemoteProcessRaw(::grpc::ClientContext* context, const ::krserver::ServerExitFromRemoteProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerLogOutputResponse>* AsyncServerLogOutputRaw(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerLogOutputResponse>* PrepareAsyncServerLogOutputRaw(::grpc::ClientContext* context, const ::krserver::ServerLogOutputRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerMessageBoxResponse>* AsyncServerMessageBoxRaw(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerMessageBoxResponse>* PrepareAsyncServerMessageBoxRaw(::grpc::ClientContext* context, const ::krserver::ServerMessageBoxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerTaskEndAndEnableUIResponse>* AsyncServerTaskEndAndEnableUIRaw(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerTaskEndAndEnableUIResponse>* PrepareAsyncServerTaskEndAndEnableUIRaw(::grpc::ClientContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerTaskStartAndDisableUIResponse>* AsyncServerTaskStartAndDisableUIRaw(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerTaskStartAndDisableUIResponse>* PrepareAsyncServerTaskStartAndDisableUIRaw(::grpc::ClientContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerUIHeartbeatPackageResponse>* AsyncServerUIHeartbeatPackageRaw(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerUIHeartbeatPackageResponse>* PrepareAsyncServerUIHeartbeatPackageRaw(::grpc::ClientContext* context, const ::krserver::ServerUIHeartbeatPackageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerUIReadyResponse>* AsyncServerUIReadyRaw(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::krserver::ServerUIReadyResponse>* PrepareAsyncServerUIReadyRaw(::grpc::ClientContext* context, const ::krserver::ServerUIReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ServerProgressBar_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerCommandResultOutput_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerExitFromRemoteProcess_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerLogOutput_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerMessageBox_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerTaskEndAndEnableUI_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerTaskStartAndDisableUI_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerUIHeartbeatPackage_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerUIReady_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ServerProgressBar(::grpc::ServerContext* context, const ::krserver::ServerProgressBarRequest* request, ::krserver::ServerProgressBarResponse* response);
    virtual ::grpc::Status ServerCommandResultOutput(::grpc::ServerContext* context, const ::krserver::ServerCommandResultOutputRequest* request, ::krserver::ServerCommandResultOutputResponse* response);
    virtual ::grpc::Status ServerExitFromRemoteProcess(::grpc::ServerContext* context, const ::krserver::ServerExitFromRemoteProcessRequest* request, ::krserver::ServerExitFromRemoteProcessResponse* response);
    virtual ::grpc::Status ServerLogOutput(::grpc::ServerContext* context, const ::krserver::ServerLogOutputRequest* request, ::krserver::ServerLogOutputResponse* response);
    virtual ::grpc::Status ServerMessageBox(::grpc::ServerContext* context, const ::krserver::ServerMessageBoxRequest* request, ::krserver::ServerMessageBoxResponse* response);
    virtual ::grpc::Status ServerTaskEndAndEnableUI(::grpc::ServerContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest* request, ::krserver::ServerTaskEndAndEnableUIResponse* response);
    virtual ::grpc::Status ServerTaskStartAndDisableUI(::grpc::ServerContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest* request, ::krserver::ServerTaskStartAndDisableUIResponse* response);
    virtual ::grpc::Status ServerUIHeartbeatPackage(::grpc::ServerContext* context, const ::krserver::ServerUIHeartbeatPackageRequest* request, ::krserver::ServerUIHeartbeatPackageResponse* response);
    virtual ::grpc::Status ServerUIReady(::grpc::ServerContext* context, const ::krserver::ServerUIReadyRequest* request, ::krserver::ServerUIReadyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerProgressBar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerProgressBar() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ServerProgressBar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerProgressBar(::grpc::ServerContext* /*context*/, const ::krserver::ServerProgressBarRequest* /*request*/, ::krserver::ServerProgressBarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerProgressBar(::grpc::ServerContext* context, ::krserver::ServerProgressBarRequest* request, ::grpc::ServerAsyncResponseWriter< ::krserver::ServerProgressBarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerCommandResultOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerCommandResultOutput() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ServerCommandResultOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommandResultOutput(::grpc::ServerContext* /*context*/, const ::krserver::ServerCommandResultOutputRequest* /*request*/, ::krserver::ServerCommandResultOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerCommandResultOutput(::grpc::ServerContext* context, ::krserver::ServerCommandResultOutputRequest* request, ::grpc::ServerAsyncResponseWriter< ::krserver::ServerCommandResultOutputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerExitFromRemoteProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerExitFromRemoteProcess() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ServerExitFromRemoteProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerExitFromRemoteProcess(::grpc::ServerContext* /*context*/, const ::krserver::ServerExitFromRemoteProcessRequest* /*request*/, ::krserver::ServerExitFromRemoteProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerExitFromRemoteProcess(::grpc::ServerContext* context, ::krserver::ServerExitFromRemoteProcessRequest* request, ::grpc::ServerAsyncResponseWriter< ::krserver::ServerExitFromRemoteProcessResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerLogOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerLogOutput() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ServerLogOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerLogOutput(::grpc::ServerContext* /*context*/, const ::krserver::ServerLogOutputRequest* /*request*/, ::krserver::ServerLogOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerLogOutput(::grpc::ServerContext* context, ::krserver::ServerLogOutputRequest* request, ::grpc::ServerAsyncResponseWriter< ::krserver::ServerLogOutputResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerMessageBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerMessageBox() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ServerMessageBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMessageBox(::grpc::ServerContext* /*context*/, const ::krserver::ServerMessageBoxRequest* /*request*/, ::krserver::ServerMessageBoxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerMessageBox(::grpc::ServerContext* context, ::krserver::ServerMessageBoxRequest* request, ::grpc::ServerAsyncResponseWriter< ::krserver::ServerMessageBoxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerTaskEndAndEnableUI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerTaskEndAndEnableUI() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ServerTaskEndAndEnableUI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerTaskEndAndEnableUI(::grpc::ServerContext* /*context*/, const ::krserver::ServerTaskEndAndEnableUIRequest* /*request*/, ::krserver::ServerTaskEndAndEnableUIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerTaskEndAndEnableUI(::grpc::ServerContext* context, ::krserver::ServerTaskEndAndEnableUIRequest* request, ::grpc::ServerAsyncResponseWriter< ::krserver::ServerTaskEndAndEnableUIResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerTaskStartAndDisableUI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerTaskStartAndDisableUI() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ServerTaskStartAndDisableUI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerTaskStartAndDisableUI(::grpc::ServerContext* /*context*/, const ::krserver::ServerTaskStartAndDisableUIRequest* /*request*/, ::krserver::ServerTaskStartAndDisableUIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerTaskStartAndDisableUI(::grpc::ServerContext* context, ::krserver::ServerTaskStartAndDisableUIRequest* request, ::grpc::ServerAsyncResponseWriter< ::krserver::ServerTaskStartAndDisableUIResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerUIHeartbeatPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerUIHeartbeatPackage() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ServerUIHeartbeatPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerUIHeartbeatPackage(::grpc::ServerContext* /*context*/, const ::krserver::ServerUIHeartbeatPackageRequest* /*request*/, ::krserver::ServerUIHeartbeatPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerUIHeartbeatPackage(::grpc::ServerContext* context, ::krserver::ServerUIHeartbeatPackageRequest* request, ::grpc::ServerAsyncResponseWriter< ::krserver::ServerUIHeartbeatPackageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerUIReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerUIReady() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ServerUIReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerUIReady(::grpc::ServerContext* /*context*/, const ::krserver::ServerUIReadyRequest* /*request*/, ::krserver::ServerUIReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerUIReady(::grpc::ServerContext* context, ::krserver::ServerUIReadyRequest* request, ::grpc::ServerAsyncResponseWriter< ::krserver::ServerUIReadyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ServerProgressBar<WithAsyncMethod_ServerCommandResultOutput<WithAsyncMethod_ServerExitFromRemoteProcess<WithAsyncMethod_ServerLogOutput<WithAsyncMethod_ServerMessageBox<WithAsyncMethod_ServerTaskEndAndEnableUI<WithAsyncMethod_ServerTaskStartAndDisableUI<WithAsyncMethod_ServerUIHeartbeatPackage<WithAsyncMethod_ServerUIReady<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ServerProgressBar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerProgressBar() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::krserver::ServerProgressBarRequest, ::krserver::ServerProgressBarResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::krserver::ServerProgressBarRequest* request, ::krserver::ServerProgressBarResponse* response) { return this->ServerProgressBar(context, request, response); }));}
    void SetMessageAllocatorFor_ServerProgressBar(
        ::grpc::MessageAllocator< ::krserver::ServerProgressBarRequest, ::krserver::ServerProgressBarResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::krserver::ServerProgressBarRequest, ::krserver::ServerProgressBarResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerProgressBar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerProgressBar(::grpc::ServerContext* /*context*/, const ::krserver::ServerProgressBarRequest* /*request*/, ::krserver::ServerProgressBarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerProgressBar(
      ::grpc::CallbackServerContext* /*context*/, const ::krserver::ServerProgressBarRequest* /*request*/, ::krserver::ServerProgressBarResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerCommandResultOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerCommandResultOutput() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::krserver::ServerCommandResultOutputRequest, ::krserver::ServerCommandResultOutputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::krserver::ServerCommandResultOutputRequest* request, ::krserver::ServerCommandResultOutputResponse* response) { return this->ServerCommandResultOutput(context, request, response); }));}
    void SetMessageAllocatorFor_ServerCommandResultOutput(
        ::grpc::MessageAllocator< ::krserver::ServerCommandResultOutputRequest, ::krserver::ServerCommandResultOutputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::krserver::ServerCommandResultOutputRequest, ::krserver::ServerCommandResultOutputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerCommandResultOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommandResultOutput(::grpc::ServerContext* /*context*/, const ::krserver::ServerCommandResultOutputRequest* /*request*/, ::krserver::ServerCommandResultOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerCommandResultOutput(
      ::grpc::CallbackServerContext* /*context*/, const ::krserver::ServerCommandResultOutputRequest* /*request*/, ::krserver::ServerCommandResultOutputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerExitFromRemoteProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerExitFromRemoteProcess() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::krserver::ServerExitFromRemoteProcessRequest, ::krserver::ServerExitFromRemoteProcessResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::krserver::ServerExitFromRemoteProcessRequest* request, ::krserver::ServerExitFromRemoteProcessResponse* response) { return this->ServerExitFromRemoteProcess(context, request, response); }));}
    void SetMessageAllocatorFor_ServerExitFromRemoteProcess(
        ::grpc::MessageAllocator< ::krserver::ServerExitFromRemoteProcessRequest, ::krserver::ServerExitFromRemoteProcessResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::krserver::ServerExitFromRemoteProcessRequest, ::krserver::ServerExitFromRemoteProcessResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerExitFromRemoteProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerExitFromRemoteProcess(::grpc::ServerContext* /*context*/, const ::krserver::ServerExitFromRemoteProcessRequest* /*request*/, ::krserver::ServerExitFromRemoteProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerExitFromRemoteProcess(
      ::grpc::CallbackServerContext* /*context*/, const ::krserver::ServerExitFromRemoteProcessRequest* /*request*/, ::krserver::ServerExitFromRemoteProcessResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerLogOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerLogOutput() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::krserver::ServerLogOutputRequest, ::krserver::ServerLogOutputResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::krserver::ServerLogOutputRequest* request, ::krserver::ServerLogOutputResponse* response) { return this->ServerLogOutput(context, request, response); }));}
    void SetMessageAllocatorFor_ServerLogOutput(
        ::grpc::MessageAllocator< ::krserver::ServerLogOutputRequest, ::krserver::ServerLogOutputResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::krserver::ServerLogOutputRequest, ::krserver::ServerLogOutputResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerLogOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerLogOutput(::grpc::ServerContext* /*context*/, const ::krserver::ServerLogOutputRequest* /*request*/, ::krserver::ServerLogOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerLogOutput(
      ::grpc::CallbackServerContext* /*context*/, const ::krserver::ServerLogOutputRequest* /*request*/, ::krserver::ServerLogOutputResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerMessageBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerMessageBox() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::krserver::ServerMessageBoxRequest, ::krserver::ServerMessageBoxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::krserver::ServerMessageBoxRequest* request, ::krserver::ServerMessageBoxResponse* response) { return this->ServerMessageBox(context, request, response); }));}
    void SetMessageAllocatorFor_ServerMessageBox(
        ::grpc::MessageAllocator< ::krserver::ServerMessageBoxRequest, ::krserver::ServerMessageBoxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::krserver::ServerMessageBoxRequest, ::krserver::ServerMessageBoxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerMessageBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMessageBox(::grpc::ServerContext* /*context*/, const ::krserver::ServerMessageBoxRequest* /*request*/, ::krserver::ServerMessageBoxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerMessageBox(
      ::grpc::CallbackServerContext* /*context*/, const ::krserver::ServerMessageBoxRequest* /*request*/, ::krserver::ServerMessageBoxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerTaskEndAndEnableUI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerTaskEndAndEnableUI() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::krserver::ServerTaskEndAndEnableUIRequest, ::krserver::ServerTaskEndAndEnableUIResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::krserver::ServerTaskEndAndEnableUIRequest* request, ::krserver::ServerTaskEndAndEnableUIResponse* response) { return this->ServerTaskEndAndEnableUI(context, request, response); }));}
    void SetMessageAllocatorFor_ServerTaskEndAndEnableUI(
        ::grpc::MessageAllocator< ::krserver::ServerTaskEndAndEnableUIRequest, ::krserver::ServerTaskEndAndEnableUIResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::krserver::ServerTaskEndAndEnableUIRequest, ::krserver::ServerTaskEndAndEnableUIResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerTaskEndAndEnableUI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerTaskEndAndEnableUI(::grpc::ServerContext* /*context*/, const ::krserver::ServerTaskEndAndEnableUIRequest* /*request*/, ::krserver::ServerTaskEndAndEnableUIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerTaskEndAndEnableUI(
      ::grpc::CallbackServerContext* /*context*/, const ::krserver::ServerTaskEndAndEnableUIRequest* /*request*/, ::krserver::ServerTaskEndAndEnableUIResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerTaskStartAndDisableUI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerTaskStartAndDisableUI() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::krserver::ServerTaskStartAndDisableUIRequest, ::krserver::ServerTaskStartAndDisableUIResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::krserver::ServerTaskStartAndDisableUIRequest* request, ::krserver::ServerTaskStartAndDisableUIResponse* response) { return this->ServerTaskStartAndDisableUI(context, request, response); }));}
    void SetMessageAllocatorFor_ServerTaskStartAndDisableUI(
        ::grpc::MessageAllocator< ::krserver::ServerTaskStartAndDisableUIRequest, ::krserver::ServerTaskStartAndDisableUIResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::krserver::ServerTaskStartAndDisableUIRequest, ::krserver::ServerTaskStartAndDisableUIResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerTaskStartAndDisableUI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerTaskStartAndDisableUI(::grpc::ServerContext* /*context*/, const ::krserver::ServerTaskStartAndDisableUIRequest* /*request*/, ::krserver::ServerTaskStartAndDisableUIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerTaskStartAndDisableUI(
      ::grpc::CallbackServerContext* /*context*/, const ::krserver::ServerTaskStartAndDisableUIRequest* /*request*/, ::krserver::ServerTaskStartAndDisableUIResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerUIHeartbeatPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerUIHeartbeatPackage() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::krserver::ServerUIHeartbeatPackageRequest, ::krserver::ServerUIHeartbeatPackageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::krserver::ServerUIHeartbeatPackageRequest* request, ::krserver::ServerUIHeartbeatPackageResponse* response) { return this->ServerUIHeartbeatPackage(context, request, response); }));}
    void SetMessageAllocatorFor_ServerUIHeartbeatPackage(
        ::grpc::MessageAllocator< ::krserver::ServerUIHeartbeatPackageRequest, ::krserver::ServerUIHeartbeatPackageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::krserver::ServerUIHeartbeatPackageRequest, ::krserver::ServerUIHeartbeatPackageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerUIHeartbeatPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerUIHeartbeatPackage(::grpc::ServerContext* /*context*/, const ::krserver::ServerUIHeartbeatPackageRequest* /*request*/, ::krserver::ServerUIHeartbeatPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerUIHeartbeatPackage(
      ::grpc::CallbackServerContext* /*context*/, const ::krserver::ServerUIHeartbeatPackageRequest* /*request*/, ::krserver::ServerUIHeartbeatPackageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerUIReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerUIReady() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::krserver::ServerUIReadyRequest, ::krserver::ServerUIReadyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::krserver::ServerUIReadyRequest* request, ::krserver::ServerUIReadyResponse* response) { return this->ServerUIReady(context, request, response); }));}
    void SetMessageAllocatorFor_ServerUIReady(
        ::grpc::MessageAllocator< ::krserver::ServerUIReadyRequest, ::krserver::ServerUIReadyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::krserver::ServerUIReadyRequest, ::krserver::ServerUIReadyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServerUIReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerUIReady(::grpc::ServerContext* /*context*/, const ::krserver::ServerUIReadyRequest* /*request*/, ::krserver::ServerUIReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerUIReady(
      ::grpc::CallbackServerContext* /*context*/, const ::krserver::ServerUIReadyRequest* /*request*/, ::krserver::ServerUIReadyResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ServerProgressBar<WithCallbackMethod_ServerCommandResultOutput<WithCallbackMethod_ServerExitFromRemoteProcess<WithCallbackMethod_ServerLogOutput<WithCallbackMethod_ServerMessageBox<WithCallbackMethod_ServerTaskEndAndEnableUI<WithCallbackMethod_ServerTaskStartAndDisableUI<WithCallbackMethod_ServerUIHeartbeatPackage<WithCallbackMethod_ServerUIReady<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ServerProgressBar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerProgressBar() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ServerProgressBar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerProgressBar(::grpc::ServerContext* /*context*/, const ::krserver::ServerProgressBarRequest* /*request*/, ::krserver::ServerProgressBarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerCommandResultOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerCommandResultOutput() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ServerCommandResultOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommandResultOutput(::grpc::ServerContext* /*context*/, const ::krserver::ServerCommandResultOutputRequest* /*request*/, ::krserver::ServerCommandResultOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerExitFromRemoteProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerExitFromRemoteProcess() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ServerExitFromRemoteProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerExitFromRemoteProcess(::grpc::ServerContext* /*context*/, const ::krserver::ServerExitFromRemoteProcessRequest* /*request*/, ::krserver::ServerExitFromRemoteProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerLogOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerLogOutput() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ServerLogOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerLogOutput(::grpc::ServerContext* /*context*/, const ::krserver::ServerLogOutputRequest* /*request*/, ::krserver::ServerLogOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerMessageBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerMessageBox() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ServerMessageBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMessageBox(::grpc::ServerContext* /*context*/, const ::krserver::ServerMessageBoxRequest* /*request*/, ::krserver::ServerMessageBoxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerTaskEndAndEnableUI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerTaskEndAndEnableUI() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ServerTaskEndAndEnableUI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerTaskEndAndEnableUI(::grpc::ServerContext* /*context*/, const ::krserver::ServerTaskEndAndEnableUIRequest* /*request*/, ::krserver::ServerTaskEndAndEnableUIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerTaskStartAndDisableUI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerTaskStartAndDisableUI() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ServerTaskStartAndDisableUI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerTaskStartAndDisableUI(::grpc::ServerContext* /*context*/, const ::krserver::ServerTaskStartAndDisableUIRequest* /*request*/, ::krserver::ServerTaskStartAndDisableUIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerUIHeartbeatPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerUIHeartbeatPackage() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ServerUIHeartbeatPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerUIHeartbeatPackage(::grpc::ServerContext* /*context*/, const ::krserver::ServerUIHeartbeatPackageRequest* /*request*/, ::krserver::ServerUIHeartbeatPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerUIReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerUIReady() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ServerUIReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerUIReady(::grpc::ServerContext* /*context*/, const ::krserver::ServerUIReadyRequest* /*request*/, ::krserver::ServerUIReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerProgressBar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerProgressBar() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ServerProgressBar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerProgressBar(::grpc::ServerContext* /*context*/, const ::krserver::ServerProgressBarRequest* /*request*/, ::krserver::ServerProgressBarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerProgressBar(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerCommandResultOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerCommandResultOutput() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ServerCommandResultOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommandResultOutput(::grpc::ServerContext* /*context*/, const ::krserver::ServerCommandResultOutputRequest* /*request*/, ::krserver::ServerCommandResultOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerCommandResultOutput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerExitFromRemoteProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerExitFromRemoteProcess() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ServerExitFromRemoteProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerExitFromRemoteProcess(::grpc::ServerContext* /*context*/, const ::krserver::ServerExitFromRemoteProcessRequest* /*request*/, ::krserver::ServerExitFromRemoteProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerExitFromRemoteProcess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerLogOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerLogOutput() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ServerLogOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerLogOutput(::grpc::ServerContext* /*context*/, const ::krserver::ServerLogOutputRequest* /*request*/, ::krserver::ServerLogOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerLogOutput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerMessageBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerMessageBox() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ServerMessageBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMessageBox(::grpc::ServerContext* /*context*/, const ::krserver::ServerMessageBoxRequest* /*request*/, ::krserver::ServerMessageBoxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerMessageBox(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerTaskEndAndEnableUI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerTaskEndAndEnableUI() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ServerTaskEndAndEnableUI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerTaskEndAndEnableUI(::grpc::ServerContext* /*context*/, const ::krserver::ServerTaskEndAndEnableUIRequest* /*request*/, ::krserver::ServerTaskEndAndEnableUIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerTaskEndAndEnableUI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerTaskStartAndDisableUI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerTaskStartAndDisableUI() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ServerTaskStartAndDisableUI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerTaskStartAndDisableUI(::grpc::ServerContext* /*context*/, const ::krserver::ServerTaskStartAndDisableUIRequest* /*request*/, ::krserver::ServerTaskStartAndDisableUIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerTaskStartAndDisableUI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerUIHeartbeatPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerUIHeartbeatPackage() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ServerUIHeartbeatPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerUIHeartbeatPackage(::grpc::ServerContext* /*context*/, const ::krserver::ServerUIHeartbeatPackageRequest* /*request*/, ::krserver::ServerUIHeartbeatPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerUIHeartbeatPackage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerUIReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerUIReady() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ServerUIReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerUIReady(::grpc::ServerContext* /*context*/, const ::krserver::ServerUIReadyRequest* /*request*/, ::krserver::ServerUIReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerUIReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerProgressBar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerProgressBar() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerProgressBar(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerProgressBar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerProgressBar(::grpc::ServerContext* /*context*/, const ::krserver::ServerProgressBarRequest* /*request*/, ::krserver::ServerProgressBarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerProgressBar(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerCommandResultOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerCommandResultOutput() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerCommandResultOutput(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerCommandResultOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCommandResultOutput(::grpc::ServerContext* /*context*/, const ::krserver::ServerCommandResultOutputRequest* /*request*/, ::krserver::ServerCommandResultOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerCommandResultOutput(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerExitFromRemoteProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerExitFromRemoteProcess() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerExitFromRemoteProcess(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerExitFromRemoteProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerExitFromRemoteProcess(::grpc::ServerContext* /*context*/, const ::krserver::ServerExitFromRemoteProcessRequest* /*request*/, ::krserver::ServerExitFromRemoteProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerExitFromRemoteProcess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerLogOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerLogOutput() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerLogOutput(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerLogOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerLogOutput(::grpc::ServerContext* /*context*/, const ::krserver::ServerLogOutputRequest* /*request*/, ::krserver::ServerLogOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerLogOutput(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerMessageBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerMessageBox() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerMessageBox(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerMessageBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerMessageBox(::grpc::ServerContext* /*context*/, const ::krserver::ServerMessageBoxRequest* /*request*/, ::krserver::ServerMessageBoxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerMessageBox(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerTaskEndAndEnableUI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerTaskEndAndEnableUI() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerTaskEndAndEnableUI(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerTaskEndAndEnableUI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerTaskEndAndEnableUI(::grpc::ServerContext* /*context*/, const ::krserver::ServerTaskEndAndEnableUIRequest* /*request*/, ::krserver::ServerTaskEndAndEnableUIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerTaskEndAndEnableUI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerTaskStartAndDisableUI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerTaskStartAndDisableUI() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerTaskStartAndDisableUI(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerTaskStartAndDisableUI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerTaskStartAndDisableUI(::grpc::ServerContext* /*context*/, const ::krserver::ServerTaskStartAndDisableUIRequest* /*request*/, ::krserver::ServerTaskStartAndDisableUIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerTaskStartAndDisableUI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerUIHeartbeatPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerUIHeartbeatPackage() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerUIHeartbeatPackage(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerUIHeartbeatPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerUIHeartbeatPackage(::grpc::ServerContext* /*context*/, const ::krserver::ServerUIHeartbeatPackageRequest* /*request*/, ::krserver::ServerUIHeartbeatPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerUIHeartbeatPackage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerUIReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerUIReady() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServerUIReady(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServerUIReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerUIReady(::grpc::ServerContext* /*context*/, const ::krserver::ServerUIReadyRequest* /*request*/, ::krserver::ServerUIReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServerUIReady(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerProgressBar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerProgressBar() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::krserver::ServerProgressBarRequest, ::krserver::ServerProgressBarResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::krserver::ServerProgressBarRequest, ::krserver::ServerProgressBarResponse>* streamer) {
                       return this->StreamedServerProgressBar(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerProgressBar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerProgressBar(::grpc::ServerContext* /*context*/, const ::krserver::ServerProgressBarRequest* /*request*/, ::krserver::ServerProgressBarResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerProgressBar(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::krserver::ServerProgressBarRequest,::krserver::ServerProgressBarResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerCommandResultOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerCommandResultOutput() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::krserver::ServerCommandResultOutputRequest, ::krserver::ServerCommandResultOutputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::krserver::ServerCommandResultOutputRequest, ::krserver::ServerCommandResultOutputResponse>* streamer) {
                       return this->StreamedServerCommandResultOutput(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerCommandResultOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerCommandResultOutput(::grpc::ServerContext* /*context*/, const ::krserver::ServerCommandResultOutputRequest* /*request*/, ::krserver::ServerCommandResultOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerCommandResultOutput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::krserver::ServerCommandResultOutputRequest,::krserver::ServerCommandResultOutputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerExitFromRemoteProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerExitFromRemoteProcess() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::krserver::ServerExitFromRemoteProcessRequest, ::krserver::ServerExitFromRemoteProcessResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::krserver::ServerExitFromRemoteProcessRequest, ::krserver::ServerExitFromRemoteProcessResponse>* streamer) {
                       return this->StreamedServerExitFromRemoteProcess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerExitFromRemoteProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerExitFromRemoteProcess(::grpc::ServerContext* /*context*/, const ::krserver::ServerExitFromRemoteProcessRequest* /*request*/, ::krserver::ServerExitFromRemoteProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerExitFromRemoteProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::krserver::ServerExitFromRemoteProcessRequest,::krserver::ServerExitFromRemoteProcessResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerLogOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerLogOutput() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::krserver::ServerLogOutputRequest, ::krserver::ServerLogOutputResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::krserver::ServerLogOutputRequest, ::krserver::ServerLogOutputResponse>* streamer) {
                       return this->StreamedServerLogOutput(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerLogOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerLogOutput(::grpc::ServerContext* /*context*/, const ::krserver::ServerLogOutputRequest* /*request*/, ::krserver::ServerLogOutputResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerLogOutput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::krserver::ServerLogOutputRequest,::krserver::ServerLogOutputResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerMessageBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerMessageBox() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::krserver::ServerMessageBoxRequest, ::krserver::ServerMessageBoxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::krserver::ServerMessageBoxRequest, ::krserver::ServerMessageBoxResponse>* streamer) {
                       return this->StreamedServerMessageBox(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerMessageBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerMessageBox(::grpc::ServerContext* /*context*/, const ::krserver::ServerMessageBoxRequest* /*request*/, ::krserver::ServerMessageBoxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerMessageBox(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::krserver::ServerMessageBoxRequest,::krserver::ServerMessageBoxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerTaskEndAndEnableUI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerTaskEndAndEnableUI() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::krserver::ServerTaskEndAndEnableUIRequest, ::krserver::ServerTaskEndAndEnableUIResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::krserver::ServerTaskEndAndEnableUIRequest, ::krserver::ServerTaskEndAndEnableUIResponse>* streamer) {
                       return this->StreamedServerTaskEndAndEnableUI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerTaskEndAndEnableUI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerTaskEndAndEnableUI(::grpc::ServerContext* /*context*/, const ::krserver::ServerTaskEndAndEnableUIRequest* /*request*/, ::krserver::ServerTaskEndAndEnableUIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerTaskEndAndEnableUI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::krserver::ServerTaskEndAndEnableUIRequest,::krserver::ServerTaskEndAndEnableUIResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerTaskStartAndDisableUI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerTaskStartAndDisableUI() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::krserver::ServerTaskStartAndDisableUIRequest, ::krserver::ServerTaskStartAndDisableUIResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::krserver::ServerTaskStartAndDisableUIRequest, ::krserver::ServerTaskStartAndDisableUIResponse>* streamer) {
                       return this->StreamedServerTaskStartAndDisableUI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerTaskStartAndDisableUI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerTaskStartAndDisableUI(::grpc::ServerContext* /*context*/, const ::krserver::ServerTaskStartAndDisableUIRequest* /*request*/, ::krserver::ServerTaskStartAndDisableUIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerTaskStartAndDisableUI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::krserver::ServerTaskStartAndDisableUIRequest,::krserver::ServerTaskStartAndDisableUIResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerUIHeartbeatPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerUIHeartbeatPackage() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::krserver::ServerUIHeartbeatPackageRequest, ::krserver::ServerUIHeartbeatPackageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::krserver::ServerUIHeartbeatPackageRequest, ::krserver::ServerUIHeartbeatPackageResponse>* streamer) {
                       return this->StreamedServerUIHeartbeatPackage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerUIHeartbeatPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerUIHeartbeatPackage(::grpc::ServerContext* /*context*/, const ::krserver::ServerUIHeartbeatPackageRequest* /*request*/, ::krserver::ServerUIHeartbeatPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerUIHeartbeatPackage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::krserver::ServerUIHeartbeatPackageRequest,::krserver::ServerUIHeartbeatPackageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerUIReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServerUIReady() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::krserver::ServerUIReadyRequest, ::krserver::ServerUIReadyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::krserver::ServerUIReadyRequest, ::krserver::ServerUIReadyResponse>* streamer) {
                       return this->StreamedServerUIReady(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServerUIReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerUIReady(::grpc::ServerContext* /*context*/, const ::krserver::ServerUIReadyRequest* /*request*/, ::krserver::ServerUIReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerUIReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::krserver::ServerUIReadyRequest,::krserver::ServerUIReadyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ServerProgressBar<WithStreamedUnaryMethod_ServerCommandResultOutput<WithStreamedUnaryMethod_ServerExitFromRemoteProcess<WithStreamedUnaryMethod_ServerLogOutput<WithStreamedUnaryMethod_ServerMessageBox<WithStreamedUnaryMethod_ServerTaskEndAndEnableUI<WithStreamedUnaryMethod_ServerTaskStartAndDisableUI<WithStreamedUnaryMethod_ServerUIHeartbeatPackage<WithStreamedUnaryMethod_ServerUIReady<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ServerProgressBar<WithStreamedUnaryMethod_ServerCommandResultOutput<WithStreamedUnaryMethod_ServerExitFromRemoteProcess<WithStreamedUnaryMethod_ServerLogOutput<WithStreamedUnaryMethod_ServerMessageBox<WithStreamedUnaryMethod_ServerTaskEndAndEnableUI<WithStreamedUnaryMethod_ServerTaskStartAndDisableUI<WithStreamedUnaryMethod_ServerUIHeartbeatPackage<WithStreamedUnaryMethod_ServerUIReady<Service > > > > > > > > > StreamedService;
};

}  // namespace krserver


#endif  // GRPC_server_2eproto__INCLUDED
